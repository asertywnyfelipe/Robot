
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002c4c  08002c4c  00003c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d14  08002d14  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002d14  08002d14  00003d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d1c  08002d1c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00003d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002d24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001b8  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009222  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001994  00000000  00000000  0000d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0000ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ef  00000000  00000000  0000f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002181c  00000000  00000000  0000fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf77  00000000  00000000  000316c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca694  00000000  00000000  0003d63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107cce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b0  00000000  00000000  00107d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0010adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c34 	.word	0x08002c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002c34 	.word	0x08002c34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a18      	ldr	r2, [pc, #96]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a11      	ldr	r2, [pc, #68]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_GPIO_Init+0x80>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <MX_GPIO_Init+0x84>)
 800050e:	f000 fdcf 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin;
 8000512:	f44f 531c 	mov.w	r3, #9984	@ 0x2700
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4619      	mov	r1, r3
 800052a:	4804      	ldr	r0, [pc, #16]	@ (800053c <MX_GPIO_Init+0x84>)
 800052c:	f000 fc24 	bl	8000d78 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000

08000540 <init_motor>:
    Motor MotorLeft;
    Motor MotorRight;
} Robot;

void init_motor(Motor *motor,TIM_HandleTypeDef *htim, uint32_t channel, int speed, bool direction)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	603b      	str	r3, [r7, #0]
	 HAL_TIM_PWM_Start(motor->htim, motor->channel);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	4619      	mov	r1, r3
 8000558:	4610      	mov	r0, r2
 800055a:	f001 fa37 	bl	80019cc <HAL_TIM_PWM_Start>
	 motor->htim=htim;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	601a      	str	r2, [r3, #0]
	 motor->channel=channel;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
	 motor->speed=0;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	 motor->dir=1;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2201      	movs	r2, #1
 8000574:	731a      	strb	r2, [r3, #12]
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa9f 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f843 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f7ff ff93 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000592:	f000 f9af 	bl	80008f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Robot *andrzej;

 init_motor(&andrzej->MotorLeft, &htim3, TIM_CHANNEL_3, 0, 1);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2208      	movs	r2, #8
 80005a0:	4917      	ldr	r1, [pc, #92]	@ (8000600 <main+0x80>)
 80005a2:	f7ff ffcd 	bl	8000540 <init_motor>
 init_motor(&andrzej->MotorRight, &htim3, TIM_CHANNEL_4, 0, 1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f103 0010 	add.w	r0, r3, #16
 80005ac:	2301      	movs	r3, #1
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	220c      	movs	r2, #12
 80005b4:	4912      	ldr	r1, [pc, #72]	@ (8000600 <main+0x80>)
 80005b6:	f7ff ffc3 	bl	8000540 <init_motor>


 int current_mode=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	    switch (current_mode) {
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d817      	bhi.n	80005f4 <main+0x74>
 80005c4:	a201      	add	r2, pc, #4	@ (adr r2, 80005cc <main+0x4c>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005fd 	.word	0x080005fd
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005ed 	.word	0x080005ed
	        case 0: //mode 0, print menu options;
	            printf("Hello, my name is Andrzej\n What do you want me to do?\n");
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <main+0x84>)
 80005de:	f001 ff95 	bl	800250c <puts>
	            break;
 80005e2:	e00c      	b.n	80005fe <main+0x7e>
	        case 1://mode 1, autonomous driving

	            break;
	        case 2://mode 2, driving from controller
	            printf("You selected Option 2.\n");
 80005e4:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0x88>)
 80005e6:	f001 ff91 	bl	800250c <puts>
	            break;
 80005ea:	e008      	b.n	80005fe <main+0x7e>
	        case 3://mode 3 fight mode
	            printf("You selected Option 3.\n");
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <main+0x8c>)
 80005ee:	f001 ff8d 	bl	800250c <puts>
	            break;
 80005f2:	e004      	b.n	80005fe <main+0x7e>
	        default:
	            printf("Invalid choice.\n");
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <main+0x90>)
 80005f6:	f001 ff89 	bl	800250c <puts>
	            break;
 80005fa:	e000      	b.n	80005fe <main+0x7e>
	            break;
 80005fc:	bf00      	nop
	    switch (current_mode) {
 80005fe:	e7de      	b.n	80005be <main+0x3e>
 8000600:	20000088 	.word	0x20000088
 8000604:	08002c8c 	.word	0x08002c8c
 8000608:	08002cc4 	.word	0x08002cc4
 800060c:	08002cdc 	.word	0x08002cdc
 8000610:	08002cf4 	.word	0x08002cf4

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	@ 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f852 	bl	80026cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <SystemClock_Config+0xb4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <SystemClock_Config+0xb8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fd2d 	bl	80010e4 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f81e 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff90 	bl	80015d4 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ba:	f000 f809 	bl	80006d0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <Error_Handler+0x8>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	@ 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f9f3 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e00a      	b.n	80007b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800079c:	f3af 8000 	nop.w
 80007a0:	4601      	mov	r1, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	60ba      	str	r2, [r7, #8]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbf0      	blt.n	800079c <_read+0x12>
  }

  return len;
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e009      	b.n	80007ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbf1      	blt.n	80007d6 <_write+0x12>
  }
  return len;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_close>:

int _close(int file)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000824:	605a      	str	r2, [r3, #4]
  return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_isatty>:

int _isatty(int file)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f001 ff68 	bl	8002768 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20020000 	.word	0x20020000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	20000084 	.word	0x20000084
 80008cc:	20000220 	.word	0x20000220

080008d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000918:	4a27      	ldr	r2, [pc, #156]	@ (80009b8 <MX_TIM3_Init+0xc4>)
 800091a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800091c:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 800091e:	220f      	movs	r2, #15
 8000920:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800093c:	481d      	ldr	r0, [pc, #116]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 800093e:	f000 fff5 	bl	800192c <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000948:	f7ff fec2 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4619      	mov	r1, r3
 800095a:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 800095c:	f001 fc42 	bl	80021e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000966:	f7ff feb3 	bl	80006d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096a:	2360      	movs	r3, #96	@ 0x60
 800096c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2208      	movs	r2, #8
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000982:	f001 f8eb 	bl	8001b5c <HAL_TIM_PWM_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800098c:	f7ff fea0 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	220c      	movs	r2, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4807      	ldr	r0, [pc, #28]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 8000998:	f001 f8e0 	bl	8001b5c <HAL_TIM_PWM_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009a2:	f7ff fe95 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009a6:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <MX_TIM3_Init+0xc0>)
 80009a8:	f000 f82a 	bl	8000a00 <HAL_TIM_MspPostInit>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000088 	.word	0x20000088
 80009b8:	40000400 	.word	0x40000400

080009bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10d      	bne.n	80009ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_TIM_PWM_MspInit+0x40>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <HAL_TIM_PWM_MspInit+0x40>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <HAL_TIM_PWM_MspInit+0x40>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <HAL_TIM_MspPostInit+0x68>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d11e      	bne.n	8000a60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_TIM_MspPostInit+0x70>)
 8000a5c:	f000 f98c 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a78:	f7ff ff2a 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f001 fe67 	bl	8002774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd6b 	bl	8000580 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ab8:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 8000abc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac0:	20000220 	.word	0x20000220

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f90d 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fdee 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f917 	bl	8000d5e <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f8ed 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200000d0 	.word	0x200000d0

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200000d0 	.word	0x200000d0

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e16b      	b.n	800106c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 815a 	bne.w	8001066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80b4 	beq.w	8001066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b60      	ldr	r3, [pc, #384]	@ (8001084 <HAL_GPIO_Init+0x30c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a5f      	ldr	r2, [pc, #380]	@ (8001084 <HAL_GPIO_Init+0x30c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001084 <HAL_GPIO_Init+0x30c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a52      	ldr	r2, [pc, #328]	@ (800108c <HAL_GPIO_Init+0x314>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a51      	ldr	r2, [pc, #324]	@ (8001090 <HAL_GPIO_Init+0x318>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a50      	ldr	r2, [pc, #320]	@ (8001094 <HAL_GPIO_Init+0x31c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	@ (8001098 <HAL_GPIO_Init+0x320>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4e      	ldr	r2, [pc, #312]	@ (800109c <HAL_GPIO_Init+0x324>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4d      	ldr	r2, [pc, #308]	@ (80010a0 <HAL_GPIO_Init+0x328>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	@ (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	@ (80010a8 <HAL_GPIO_Init+0x330>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f82:	2308      	movs	r3, #8
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	@ (8001088 <HAL_GPIO_Init+0x310>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a32      	ldr	r2, [pc, #200]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_GPIO_Init+0x334>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <HAL_GPIO_Init+0x334>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae90 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40021c00 	.word	0x40021c00
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e267      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d075      	beq.n	80011ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001102:	4b88      	ldr	r3, [pc, #544]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b04      	cmp	r3, #4
 800110c:	d00c      	beq.n	8001128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b85      	ldr	r3, [pc, #532]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001116:	2b08      	cmp	r3, #8
 8001118:	d112      	bne.n	8001140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b82      	ldr	r3, [pc, #520]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001126:	d10b      	bne.n	8001140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4b7e      	ldr	r3, [pc, #504]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d05b      	beq.n	80011ec <HAL_RCC_OscConfig+0x108>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d157      	bne.n	80011ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e242      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001148:	d106      	bne.n	8001158 <HAL_RCC_OscConfig+0x74>
 800114a:	4b76      	ldr	r3, [pc, #472]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a75      	ldr	r2, [pc, #468]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e01d      	b.n	8001194 <HAL_RCC_OscConfig+0xb0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x98>
 8001162:	4b70      	ldr	r3, [pc, #448]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6f      	ldr	r2, [pc, #444]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b6d      	ldr	r3, [pc, #436]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6c      	ldr	r2, [pc, #432]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0xb0>
 800117c:	4b69      	ldr	r3, [pc, #420]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a68      	ldr	r2, [pc, #416]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b66      	ldr	r3, [pc, #408]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a65      	ldr	r2, [pc, #404]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d013      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fcfa 	bl	8000b94 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fcf6 	bl	8000b94 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e207      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0xc0>
 80011c2:	e014      	b.n	80011ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fce6 	bl	8000b94 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fce2 	bl	8000b94 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	@ 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e1f3      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	4b51      	ldr	r3, [pc, #324]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0xe8>
 80011ea:	e000      	b.n	80011ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d063      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d11c      	bne.n	800124c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d116      	bne.n	800124c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121e:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x152>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e1c7      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4937      	ldr	r1, [pc, #220]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	e03a      	b.n	80012c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001254:	4b34      	ldr	r3, [pc, #208]	@ (8001328 <HAL_RCC_OscConfig+0x244>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fc9b 	bl	8000b94 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff fc97 	bl	8000b94 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1a8      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4925      	ldr	r1, [pc, #148]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001296:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <HAL_RCC_OscConfig+0x244>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fc7a 	bl	8000b94 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc76 	bl	8000b94 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e187      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d036      	beq.n	800133c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_RCC_OscConfig+0x248>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff fc5a 	bl	8000b94 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc56 	bl	8000b94 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e167      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_RCC_OscConfig+0x240>)
 80012f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x200>
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_RCC_OscConfig+0x248>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fc43 	bl	8000b94 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	e00e      	b.n	8001330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fc3f 	bl	8000b94 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d907      	bls.n	8001330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e150      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
 8001324:	40023800 	.word	0x40023800
 8001328:	42470000 	.word	0x42470000
 800132c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b88      	ldr	r3, [pc, #544]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ea      	bne.n	8001312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 8097 	beq.w	8001478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b81      	ldr	r3, [pc, #516]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10f      	bne.n	800137a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b7d      	ldr	r3, [pc, #500]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a7c      	ldr	r2, [pc, #496]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b7a      	ldr	r3, [pc, #488]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b77      	ldr	r3, [pc, #476]	@ (8001558 <HAL_RCC_OscConfig+0x474>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b74      	ldr	r3, [pc, #464]	@ (8001558 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a73      	ldr	r2, [pc, #460]	@ (8001558 <HAL_RCC_OscConfig+0x474>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbff 	bl	8000b94 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139a:	f7ff fbfb 	bl	8000b94 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e10c      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001558 <HAL_RCC_OscConfig+0x474>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x2ea>
 80013c0:	4b64      	ldr	r3, [pc, #400]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c4:	4a63      	ldr	r2, [pc, #396]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80013cc:	e01c      	b.n	8001408 <HAL_RCC_OscConfig+0x324>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x30c>
 80013d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	4a5e      	ldr	r2, [pc, #376]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0x324>
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f4:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001400:	4a54      	ldr	r2, [pc, #336]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0304 	bic.w	r3, r3, #4
 8001406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d015      	beq.n	800143c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fbc0 	bl	8000b94 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001416:	e00a      	b.n	800142e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff fbbc 	bl	8000b94 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0cb      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0ee      	beq.n	8001418 <HAL_RCC_OscConfig+0x334>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fbaa 	bl	8000b94 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fba6 	bl	8000b94 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0b5      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ee      	bne.n	8001444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146c:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a38      	ldr	r2, [pc, #224]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a1 	beq.w	80015c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b08      	cmp	r3, #8
 800148c:	d05c      	beq.n	8001548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d141      	bne.n	800151a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b31      	ldr	r3, [pc, #196]	@ (800155c <HAL_RCC_OscConfig+0x478>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb7a 	bl	8000b94 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb76 	bl	8000b94 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e087      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	3b01      	subs	r3, #1
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	061b      	lsls	r3, r3, #24
 80014e6:	491b      	ldr	r1, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x478>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb4f 	bl	8000b94 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fb4b 	bl	8000b94 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e05c      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x416>
 8001518:	e054      	b.n	80015c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_RCC_OscConfig+0x478>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb38 	bl	8000b94 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fb34 	bl	8000b94 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e045      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_RCC_OscConfig+0x470>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x444>
 8001546:	e03d      	b.n	80015c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e038      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000
 800155c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_RCC_OscConfig+0x4ec>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d028      	beq.n	80015c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d121      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d11a      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001590:	4013      	ands	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001598:	4293      	cmp	r3, r2
 800159a:	d111      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	085b      	lsrs	r3, r3, #1
 80015a8:	3b01      	subs	r3, #1
 80015aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0cc      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e8:	4b68      	ldr	r3, [pc, #416]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d90c      	bls.n	8001610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b63      	ldr	r3, [pc, #396]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001628:	4b59      	ldr	r3, [pc, #356]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a58      	ldr	r2, [pc, #352]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a52      	ldr	r2, [pc, #328]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800164a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b50      	ldr	r3, [pc, #320]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	494d      	ldr	r1, [pc, #308]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d044      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b47      	ldr	r3, [pc, #284]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d119      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d003      	beq.n	8001692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	2b03      	cmp	r3, #3
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e06f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e067      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b2:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f023 0203 	bic.w	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4934      	ldr	r1, [pc, #208]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff fa66 	bl	8000b94 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016cc:	f7ff fa62 	bl	8000b94 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e04f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 020c 	and.w	r2, r3, #12
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1eb      	bne.n	80016cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d20c      	bcs.n	800171c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e032      	b.n	8001782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4916      	ldr	r1, [pc, #88]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490e      	ldr	r1, [pc, #56]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175a:	f000 f821 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800175e:	4602      	mov	r2, r0
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	490a      	ldr	r1, [pc, #40]	@ (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	5ccb      	ldrb	r3, [r1, r3]
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f9c6 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00
 8001790:	40023800 	.word	0x40023800
 8001794:	08002d04 	.word	0x08002d04
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a4:	b090      	sub	sp, #64	@ 0x40
 80017a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ac:	2300      	movs	r3, #0
 80017ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b8:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d00d      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x40>
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	f200 80a1 	bhi.w	800190c <HAL_RCC_GetSysClockFreq+0x16c>
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d003      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0x3a>
 80017d2:	e09b      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b53      	ldr	r3, [pc, #332]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x184>)
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80017d8:	e09b      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017da:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x188>)
 80017dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017de:	e098      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d028      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	099b      	lsrs	r3, r3, #6
 80017fc:	2200      	movs	r2, #0
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	627a      	str	r2, [r7, #36]	@ 0x24
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001808:	2100      	movs	r1, #0
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x188>)
 800180c:	fb03 f201 	mul.w	r2, r3, r1
 8001810:	2300      	movs	r3, #0
 8001812:	fb00 f303 	mul.w	r3, r0, r3
 8001816:	4413      	add	r3, r2
 8001818:	4a43      	ldr	r2, [pc, #268]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x188>)
 800181a:	fba0 1202 	umull	r1, r2, r0, r2
 800181e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001820:	460a      	mov	r2, r1
 8001822:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001826:	4413      	add	r3, r2
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182c:	2200      	movs	r2, #0
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	61fa      	str	r2, [r7, #28]
 8001832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800183a:	f7fe fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4613      	mov	r3, r2
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001846:	e053      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	2200      	movs	r2, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	617a      	str	r2, [r7, #20]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800185a:	f04f 0b00 	mov.w	fp, #0
 800185e:	4652      	mov	r2, sl
 8001860:	465b      	mov	r3, fp
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0159      	lsls	r1, r3, #5
 800186c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001870:	0150      	lsls	r0, r2, #5
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	ebb2 080a 	subs.w	r8, r2, sl
 800187a:	eb63 090b 	sbc.w	r9, r3, fp
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800188a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800188e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001892:	ebb2 0408 	subs.w	r4, r2, r8
 8001896:	eb63 0509 	sbc.w	r5, r3, r9
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	00eb      	lsls	r3, r5, #3
 80018a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a8:	00e2      	lsls	r2, r4, #3
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	eb14 030a 	adds.w	r3, r4, sl
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	eb45 030b 	adc.w	r3, r5, fp
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c6:	4629      	mov	r1, r5
 80018c8:	028b      	lsls	r3, r1, #10
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d0:	4621      	mov	r1, r4
 80018d2:	028a      	lsls	r2, r1, #10
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018da:	2200      	movs	r2, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	60fa      	str	r2, [r7, #12]
 80018e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018e4:	f7fe fc70 	bl	80001c8 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4613      	mov	r3, r2
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	3301      	adds	r3, #1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001900:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800190a:	e002      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x184>)
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001914:	4618      	mov	r0, r3
 8001916:	3740      	adds	r7, #64	@ 0x40
 8001918:	46bd      	mov	sp, r7
 800191a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	00f42400 	.word	0x00f42400
 8001928:	017d7840 	.word	0x017d7840

0800192c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e041      	b.n	80019c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff f832 	bl	80009bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 f9b8 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_TIM_PWM_Start+0x24>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	e022      	b.n	8001a36 <HAL_TIM_PWM_Start+0x6a>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d109      	bne.n	8001a0a <HAL_TIM_PWM_Start+0x3e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	e015      	b.n	8001a36 <HAL_TIM_PWM_Start+0x6a>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d109      	bne.n	8001a24 <HAL_TIM_PWM_Start+0x58>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e008      	b.n	8001a36 <HAL_TIM_PWM_Start+0x6a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07c      	b.n	8001b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <HAL_TIM_PWM_Start+0x82>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a4c:	e013      	b.n	8001a76 <HAL_TIM_PWM_Start+0xaa>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d104      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x92>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a5c:	e00b      	b.n	8001a76 <HAL_TIM_PWM_Start+0xaa>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d104      	bne.n	8001a6e <HAL_TIM_PWM_Start+0xa2>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a6c:	e003      	b.n	8001a76 <HAL_TIM_PWM_Start+0xaa>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fb8a 	bl	8002198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2d      	ldr	r2, [pc, #180]	@ (8001b40 <HAL_TIM_PWM_Start+0x174>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_TIM_PWM_Start+0xcc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2c      	ldr	r2, [pc, #176]	@ (8001b44 <HAL_TIM_PWM_Start+0x178>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_TIM_PWM_Start+0xd0>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_TIM_PWM_Start+0xd2>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_TIM_PWM_Start+0x174>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac4:	d01d      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <HAL_TIM_PWM_Start+0x17c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <HAL_TIM_PWM_Start+0x180>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_TIM_PWM_Start+0x184>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <HAL_TIM_PWM_Start+0x178>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_TIM_PWM_Start+0x188>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x136>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_TIM_PWM_Start+0x18c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d111      	bne.n	8001b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d010      	beq.n	8001b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b24:	e007      	b.n	8001b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40010400 	.word	0x40010400
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	40014000 	.word	0x40014000
 8001b58:	40001800 	.word	0x40001800

08001b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e0ae      	b.n	8001cd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	f200 809f 	bhi.w	8001cc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001bc5 	.word	0x08001bc5
 8001b94:	08001cc9 	.word	0x08001cc9
 8001b98:	08001cc9 	.word	0x08001cc9
 8001b9c:	08001cc9 	.word	0x08001cc9
 8001ba0:	08001c05 	.word	0x08001c05
 8001ba4:	08001cc9 	.word	0x08001cc9
 8001ba8:	08001cc9 	.word	0x08001cc9
 8001bac:	08001cc9 	.word	0x08001cc9
 8001bb0:	08001c47 	.word	0x08001c47
 8001bb4:	08001cc9 	.word	0x08001cc9
 8001bb8:	08001cc9 	.word	0x08001cc9
 8001bbc:	08001cc9 	.word	0x08001cc9
 8001bc0:	08001c87 	.word	0x08001c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f934 	bl	8001e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6999      	ldr	r1, [r3, #24]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	619a      	str	r2, [r3, #24]
      break;
 8001c02:	e064      	b.n	8001cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f984 	bl	8001f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6999      	ldr	r1, [r3, #24]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	021a      	lsls	r2, r3, #8
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	619a      	str	r2, [r3, #24]
      break;
 8001c44:	e043      	b.n	8001cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f9d9 	bl	8002004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0208 	orr.w	r2, r2, #8
 8001c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0204 	bic.w	r2, r2, #4
 8001c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69d9      	ldr	r1, [r3, #28]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	61da      	str	r2, [r3, #28]
      break;
 8001c84:	e023      	b.n	8001cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fa2d 	bl	80020ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69d9      	ldr	r1, [r3, #28]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	021a      	lsls	r2, r3, #8
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	61da      	str	r2, [r3, #28]
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	75fb      	strb	r3, [r7, #23]
      break;
 8001ccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a43      	ldr	r2, [pc, #268]	@ (8001e10 <TIM_Base_SetConfig+0x130>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	@ (8001e14 <TIM_Base_SetConfig+0x134>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a41      	ldr	r2, [pc, #260]	@ (8001e18 <TIM_Base_SetConfig+0x138>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a35      	ldr	r2, [pc, #212]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d027      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <TIM_Base_SetConfig+0x130>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d023      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	@ (8001e14 <TIM_Base_SetConfig+0x134>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a30      	ldr	r2, [pc, #192]	@ (8001e18 <TIM_Base_SetConfig+0x138>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d017      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <TIM_Base_SetConfig+0x140>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <TIM_Base_SetConfig+0x144>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	@ (8001e28 <TIM_Base_SetConfig+0x148>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <TIM_Base_SetConfig+0x14c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <TIM_Base_SetConfig+0x150>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <TIM_Base_SetConfig+0x154>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d108      	bne.n	8001da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0xf8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f023 0201 	bic.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40014400 	.word	0x40014400
 8001e28:	40014800 	.word	0x40014800
 8001e2c:	40001800 	.word	0x40001800
 8001e30:	40001c00 	.word	0x40001c00
 8001e34:	40002000 	.word	0x40002000

08001e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f023 0201 	bic.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 0302 	bic.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <TIM_OC1_SetConfig+0xd8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_OC1_SetConfig+0x64>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a1f      	ldr	r2, [pc, #124]	@ (8001f14 <TIM_OC1_SetConfig+0xdc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10c      	bne.n	8001eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0308 	bic.w	r3, r3, #8
 8001ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <TIM_OC1_SetConfig+0xd8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_OC1_SetConfig+0x8e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <TIM_OC1_SetConfig+0xdc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d111      	bne.n	8001eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	621a      	str	r2, [r3, #32]
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010400 	.word	0x40010400

08001f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f023 0210 	bic.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0320 	bic.w	r3, r3, #32
 8001f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <TIM_OC2_SetConfig+0xe4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_OC2_SetConfig+0x68>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <TIM_OC2_SetConfig+0xe8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10d      	bne.n	8001f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <TIM_OC2_SetConfig+0xe4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_OC2_SetConfig+0x94>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <TIM_OC2_SetConfig+0xe8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d113      	bne.n	8001fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	621a      	str	r2, [r3, #32]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40010400 	.word	0x40010400

08002004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800204c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <TIM_OC3_SetConfig+0xe0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_OC3_SetConfig+0x66>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a20      	ldr	r2, [pc, #128]	@ (80020e8 <TIM_OC3_SetConfig+0xe4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10d      	bne.n	8002086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a16      	ldr	r2, [pc, #88]	@ (80020e4 <TIM_OC3_SetConfig+0xe0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_OC3_SetConfig+0x92>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <TIM_OC3_SetConfig+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d113      	bne.n	80020be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800209c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	621a      	str	r2, [r3, #32]
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40010400 	.word	0x40010400

080020ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <TIM_OC4_SetConfig+0xa4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_OC4_SetConfig+0x68>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a11      	ldr	r2, [pc, #68]	@ (8002194 <TIM_OC4_SetConfig+0xa8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d109      	bne.n	8002168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800215a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40010400 	.word	0x40010400

08002198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2201      	movs	r2, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	621a      	str	r2, [r3, #32]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e05a      	b.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d01d      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d018      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00e      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10c      	bne.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800228c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40010400 	.word	0x40010400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40001800 	.word	0x40001800

080022dc <std>:
 80022dc:	2300      	movs	r3, #0
 80022de:	b510      	push	{r4, lr}
 80022e0:	4604      	mov	r4, r0
 80022e2:	e9c0 3300 	strd	r3, r3, [r0]
 80022e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022ea:	6083      	str	r3, [r0, #8]
 80022ec:	8181      	strh	r1, [r0, #12]
 80022ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80022f0:	81c2      	strh	r2, [r0, #14]
 80022f2:	6183      	str	r3, [r0, #24]
 80022f4:	4619      	mov	r1, r3
 80022f6:	2208      	movs	r2, #8
 80022f8:	305c      	adds	r0, #92	@ 0x5c
 80022fa:	f000 f9e7 	bl	80026cc <memset>
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <std+0x58>)
 8002300:	6263      	str	r3, [r4, #36]	@ 0x24
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <std+0x5c>)
 8002304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <std+0x60>)
 8002308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <std+0x64>)
 800230c:	6323      	str	r3, [r4, #48]	@ 0x30
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <std+0x68>)
 8002310:	6224      	str	r4, [r4, #32]
 8002312:	429c      	cmp	r4, r3
 8002314:	d006      	beq.n	8002324 <std+0x48>
 8002316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800231a:	4294      	cmp	r4, r2
 800231c:	d002      	beq.n	8002324 <std+0x48>
 800231e:	33d0      	adds	r3, #208	@ 0xd0
 8002320:	429c      	cmp	r4, r3
 8002322:	d105      	bne.n	8002330 <std+0x54>
 8002324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232c:	f000 ba46 	b.w	80027bc <__retarget_lock_init_recursive>
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	0800251d 	.word	0x0800251d
 8002338:	0800253f 	.word	0x0800253f
 800233c:	08002577 	.word	0x08002577
 8002340:	0800259b 	.word	0x0800259b
 8002344:	200000d4 	.word	0x200000d4

08002348 <stdio_exit_handler>:
 8002348:	4a02      	ldr	r2, [pc, #8]	@ (8002354 <stdio_exit_handler+0xc>)
 800234a:	4903      	ldr	r1, [pc, #12]	@ (8002358 <stdio_exit_handler+0x10>)
 800234c:	4803      	ldr	r0, [pc, #12]	@ (800235c <stdio_exit_handler+0x14>)
 800234e:	f000 b869 	b.w	8002424 <_fwalk_sglue>
 8002352:	bf00      	nop
 8002354:	2000000c 	.word	0x2000000c
 8002358:	08002abd 	.word	0x08002abd
 800235c:	2000001c 	.word	0x2000001c

08002360 <cleanup_stdio>:
 8002360:	6841      	ldr	r1, [r0, #4]
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <cleanup_stdio+0x34>)
 8002364:	4299      	cmp	r1, r3
 8002366:	b510      	push	{r4, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	d001      	beq.n	8002370 <cleanup_stdio+0x10>
 800236c:	f000 fba6 	bl	8002abc <_fflush_r>
 8002370:	68a1      	ldr	r1, [r4, #8]
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <cleanup_stdio+0x38>)
 8002374:	4299      	cmp	r1, r3
 8002376:	d002      	beq.n	800237e <cleanup_stdio+0x1e>
 8002378:	4620      	mov	r0, r4
 800237a:	f000 fb9f 	bl	8002abc <_fflush_r>
 800237e:	68e1      	ldr	r1, [r4, #12]
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <cleanup_stdio+0x3c>)
 8002382:	4299      	cmp	r1, r3
 8002384:	d004      	beq.n	8002390 <cleanup_stdio+0x30>
 8002386:	4620      	mov	r0, r4
 8002388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800238c:	f000 bb96 	b.w	8002abc <_fflush_r>
 8002390:	bd10      	pop	{r4, pc}
 8002392:	bf00      	nop
 8002394:	200000d4 	.word	0x200000d4
 8002398:	2000013c 	.word	0x2000013c
 800239c:	200001a4 	.word	0x200001a4

080023a0 <global_stdio_init.part.0>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <global_stdio_init.part.0+0x30>)
 80023a4:	4c0b      	ldr	r4, [pc, #44]	@ (80023d4 <global_stdio_init.part.0+0x34>)
 80023a6:	4a0c      	ldr	r2, [pc, #48]	@ (80023d8 <global_stdio_init.part.0+0x38>)
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4620      	mov	r0, r4
 80023ac:	2200      	movs	r2, #0
 80023ae:	2104      	movs	r1, #4
 80023b0:	f7ff ff94 	bl	80022dc <std>
 80023b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80023b8:	2201      	movs	r2, #1
 80023ba:	2109      	movs	r1, #9
 80023bc:	f7ff ff8e 	bl	80022dc <std>
 80023c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80023c4:	2202      	movs	r2, #2
 80023c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ca:	2112      	movs	r1, #18
 80023cc:	f7ff bf86 	b.w	80022dc <std>
 80023d0:	2000020c 	.word	0x2000020c
 80023d4:	200000d4 	.word	0x200000d4
 80023d8:	08002349 	.word	0x08002349

080023dc <__sfp_lock_acquire>:
 80023dc:	4801      	ldr	r0, [pc, #4]	@ (80023e4 <__sfp_lock_acquire+0x8>)
 80023de:	f000 b9ee 	b.w	80027be <__retarget_lock_acquire_recursive>
 80023e2:	bf00      	nop
 80023e4:	20000215 	.word	0x20000215

080023e8 <__sfp_lock_release>:
 80023e8:	4801      	ldr	r0, [pc, #4]	@ (80023f0 <__sfp_lock_release+0x8>)
 80023ea:	f000 b9e9 	b.w	80027c0 <__retarget_lock_release_recursive>
 80023ee:	bf00      	nop
 80023f0:	20000215 	.word	0x20000215

080023f4 <__sinit>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	f7ff fff0 	bl	80023dc <__sfp_lock_acquire>
 80023fc:	6a23      	ldr	r3, [r4, #32]
 80023fe:	b11b      	cbz	r3, 8002408 <__sinit+0x14>
 8002400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002404:	f7ff bff0 	b.w	80023e8 <__sfp_lock_release>
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <__sinit+0x28>)
 800240a:	6223      	str	r3, [r4, #32]
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <__sinit+0x2c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f5      	bne.n	8002400 <__sinit+0xc>
 8002414:	f7ff ffc4 	bl	80023a0 <global_stdio_init.part.0>
 8002418:	e7f2      	b.n	8002400 <__sinit+0xc>
 800241a:	bf00      	nop
 800241c:	08002361 	.word	0x08002361
 8002420:	2000020c 	.word	0x2000020c

08002424 <_fwalk_sglue>:
 8002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002428:	4607      	mov	r7, r0
 800242a:	4688      	mov	r8, r1
 800242c:	4614      	mov	r4, r2
 800242e:	2600      	movs	r6, #0
 8002430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002434:	f1b9 0901 	subs.w	r9, r9, #1
 8002438:	d505      	bpl.n	8002446 <_fwalk_sglue+0x22>
 800243a:	6824      	ldr	r4, [r4, #0]
 800243c:	2c00      	cmp	r4, #0
 800243e:	d1f7      	bne.n	8002430 <_fwalk_sglue+0xc>
 8002440:	4630      	mov	r0, r6
 8002442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002446:	89ab      	ldrh	r3, [r5, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d907      	bls.n	800245c <_fwalk_sglue+0x38>
 800244c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002450:	3301      	adds	r3, #1
 8002452:	d003      	beq.n	800245c <_fwalk_sglue+0x38>
 8002454:	4629      	mov	r1, r5
 8002456:	4638      	mov	r0, r7
 8002458:	47c0      	blx	r8
 800245a:	4306      	orrs	r6, r0
 800245c:	3568      	adds	r5, #104	@ 0x68
 800245e:	e7e9      	b.n	8002434 <_fwalk_sglue+0x10>

08002460 <_puts_r>:
 8002460:	6a03      	ldr	r3, [r0, #32]
 8002462:	b570      	push	{r4, r5, r6, lr}
 8002464:	6884      	ldr	r4, [r0, #8]
 8002466:	4605      	mov	r5, r0
 8002468:	460e      	mov	r6, r1
 800246a:	b90b      	cbnz	r3, 8002470 <_puts_r+0x10>
 800246c:	f7ff ffc2 	bl	80023f4 <__sinit>
 8002470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002472:	07db      	lsls	r3, r3, #31
 8002474:	d405      	bmi.n	8002482 <_puts_r+0x22>
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	0598      	lsls	r0, r3, #22
 800247a:	d402      	bmi.n	8002482 <_puts_r+0x22>
 800247c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800247e:	f000 f99e 	bl	80027be <__retarget_lock_acquire_recursive>
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	0719      	lsls	r1, r3, #28
 8002486:	d502      	bpl.n	800248e <_puts_r+0x2e>
 8002488:	6923      	ldr	r3, [r4, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d135      	bne.n	80024fa <_puts_r+0x9a>
 800248e:	4621      	mov	r1, r4
 8002490:	4628      	mov	r0, r5
 8002492:	f000 f8c5 	bl	8002620 <__swsetup_r>
 8002496:	b380      	cbz	r0, 80024fa <_puts_r+0x9a>
 8002498:	f04f 35ff 	mov.w	r5, #4294967295
 800249c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800249e:	07da      	lsls	r2, r3, #31
 80024a0:	d405      	bmi.n	80024ae <_puts_r+0x4e>
 80024a2:	89a3      	ldrh	r3, [r4, #12]
 80024a4:	059b      	lsls	r3, r3, #22
 80024a6:	d402      	bmi.n	80024ae <_puts_r+0x4e>
 80024a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024aa:	f000 f989 	bl	80027c0 <__retarget_lock_release_recursive>
 80024ae:	4628      	mov	r0, r5
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da04      	bge.n	80024c0 <_puts_r+0x60>
 80024b6:	69a2      	ldr	r2, [r4, #24]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dc17      	bgt.n	80024ec <_puts_r+0x8c>
 80024bc:	290a      	cmp	r1, #10
 80024be:	d015      	beq.n	80024ec <_puts_r+0x8c>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	6022      	str	r2, [r4, #0]
 80024c6:	7019      	strb	r1, [r3, #0]
 80024c8:	68a3      	ldr	r3, [r4, #8]
 80024ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60a3      	str	r3, [r4, #8]
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d1ed      	bne.n	80024b2 <_puts_r+0x52>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da11      	bge.n	80024fe <_puts_r+0x9e>
 80024da:	4622      	mov	r2, r4
 80024dc:	210a      	movs	r1, #10
 80024de:	4628      	mov	r0, r5
 80024e0:	f000 f85f 	bl	80025a2 <__swbuf_r>
 80024e4:	3001      	adds	r0, #1
 80024e6:	d0d7      	beq.n	8002498 <_puts_r+0x38>
 80024e8:	250a      	movs	r5, #10
 80024ea:	e7d7      	b.n	800249c <_puts_r+0x3c>
 80024ec:	4622      	mov	r2, r4
 80024ee:	4628      	mov	r0, r5
 80024f0:	f000 f857 	bl	80025a2 <__swbuf_r>
 80024f4:	3001      	adds	r0, #1
 80024f6:	d1e7      	bne.n	80024c8 <_puts_r+0x68>
 80024f8:	e7ce      	b.n	8002498 <_puts_r+0x38>
 80024fa:	3e01      	subs	r6, #1
 80024fc:	e7e4      	b.n	80024c8 <_puts_r+0x68>
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	6022      	str	r2, [r4, #0]
 8002504:	220a      	movs	r2, #10
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e7ee      	b.n	80024e8 <_puts_r+0x88>
	...

0800250c <puts>:
 800250c:	4b02      	ldr	r3, [pc, #8]	@ (8002518 <puts+0xc>)
 800250e:	4601      	mov	r1, r0
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	f7ff bfa5 	b.w	8002460 <_puts_r>
 8002516:	bf00      	nop
 8002518:	20000018 	.word	0x20000018

0800251c <__sread>:
 800251c:	b510      	push	{r4, lr}
 800251e:	460c      	mov	r4, r1
 8002520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002524:	f000 f8fc 	bl	8002720 <_read_r>
 8002528:	2800      	cmp	r0, #0
 800252a:	bfab      	itete	ge
 800252c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800252e:	89a3      	ldrhlt	r3, [r4, #12]
 8002530:	181b      	addge	r3, r3, r0
 8002532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002536:	bfac      	ite	ge
 8002538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800253a:	81a3      	strhlt	r3, [r4, #12]
 800253c:	bd10      	pop	{r4, pc}

0800253e <__swrite>:
 800253e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002542:	461f      	mov	r7, r3
 8002544:	898b      	ldrh	r3, [r1, #12]
 8002546:	05db      	lsls	r3, r3, #23
 8002548:	4605      	mov	r5, r0
 800254a:	460c      	mov	r4, r1
 800254c:	4616      	mov	r6, r2
 800254e:	d505      	bpl.n	800255c <__swrite+0x1e>
 8002550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002554:	2302      	movs	r3, #2
 8002556:	2200      	movs	r2, #0
 8002558:	f000 f8d0 	bl	80026fc <_lseek_r>
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002566:	81a3      	strh	r3, [r4, #12]
 8002568:	4632      	mov	r2, r6
 800256a:	463b      	mov	r3, r7
 800256c:	4628      	mov	r0, r5
 800256e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002572:	f000 b8e7 	b.w	8002744 <_write_r>

08002576 <__sseek>:
 8002576:	b510      	push	{r4, lr}
 8002578:	460c      	mov	r4, r1
 800257a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257e:	f000 f8bd 	bl	80026fc <_lseek_r>
 8002582:	1c43      	adds	r3, r0, #1
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	bf15      	itete	ne
 8002588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800258a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800258e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002592:	81a3      	strheq	r3, [r4, #12]
 8002594:	bf18      	it	ne
 8002596:	81a3      	strhne	r3, [r4, #12]
 8002598:	bd10      	pop	{r4, pc}

0800259a <__sclose>:
 800259a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259e:	f000 b89d 	b.w	80026dc <_close_r>

080025a2 <__swbuf_r>:
 80025a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a4:	460e      	mov	r6, r1
 80025a6:	4614      	mov	r4, r2
 80025a8:	4605      	mov	r5, r0
 80025aa:	b118      	cbz	r0, 80025b4 <__swbuf_r+0x12>
 80025ac:	6a03      	ldr	r3, [r0, #32]
 80025ae:	b90b      	cbnz	r3, 80025b4 <__swbuf_r+0x12>
 80025b0:	f7ff ff20 	bl	80023f4 <__sinit>
 80025b4:	69a3      	ldr	r3, [r4, #24]
 80025b6:	60a3      	str	r3, [r4, #8]
 80025b8:	89a3      	ldrh	r3, [r4, #12]
 80025ba:	071a      	lsls	r2, r3, #28
 80025bc:	d501      	bpl.n	80025c2 <__swbuf_r+0x20>
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	b943      	cbnz	r3, 80025d4 <__swbuf_r+0x32>
 80025c2:	4621      	mov	r1, r4
 80025c4:	4628      	mov	r0, r5
 80025c6:	f000 f82b 	bl	8002620 <__swsetup_r>
 80025ca:	b118      	cbz	r0, 80025d4 <__swbuf_r+0x32>
 80025cc:	f04f 37ff 	mov.w	r7, #4294967295
 80025d0:	4638      	mov	r0, r7
 80025d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	6922      	ldr	r2, [r4, #16]
 80025d8:	1a98      	subs	r0, r3, r2
 80025da:	6963      	ldr	r3, [r4, #20]
 80025dc:	b2f6      	uxtb	r6, r6
 80025de:	4283      	cmp	r3, r0
 80025e0:	4637      	mov	r7, r6
 80025e2:	dc05      	bgt.n	80025f0 <__swbuf_r+0x4e>
 80025e4:	4621      	mov	r1, r4
 80025e6:	4628      	mov	r0, r5
 80025e8:	f000 fa68 	bl	8002abc <_fflush_r>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d1ed      	bne.n	80025cc <__swbuf_r+0x2a>
 80025f0:	68a3      	ldr	r3, [r4, #8]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	60a3      	str	r3, [r4, #8]
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	6022      	str	r2, [r4, #0]
 80025fc:	701e      	strb	r6, [r3, #0]
 80025fe:	6962      	ldr	r2, [r4, #20]
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	429a      	cmp	r2, r3
 8002604:	d004      	beq.n	8002610 <__swbuf_r+0x6e>
 8002606:	89a3      	ldrh	r3, [r4, #12]
 8002608:	07db      	lsls	r3, r3, #31
 800260a:	d5e1      	bpl.n	80025d0 <__swbuf_r+0x2e>
 800260c:	2e0a      	cmp	r6, #10
 800260e:	d1df      	bne.n	80025d0 <__swbuf_r+0x2e>
 8002610:	4621      	mov	r1, r4
 8002612:	4628      	mov	r0, r5
 8002614:	f000 fa52 	bl	8002abc <_fflush_r>
 8002618:	2800      	cmp	r0, #0
 800261a:	d0d9      	beq.n	80025d0 <__swbuf_r+0x2e>
 800261c:	e7d6      	b.n	80025cc <__swbuf_r+0x2a>
	...

08002620 <__swsetup_r>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <__swsetup_r+0xa8>)
 8002624:	4605      	mov	r5, r0
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	460c      	mov	r4, r1
 800262a:	b118      	cbz	r0, 8002634 <__swsetup_r+0x14>
 800262c:	6a03      	ldr	r3, [r0, #32]
 800262e:	b90b      	cbnz	r3, 8002634 <__swsetup_r+0x14>
 8002630:	f7ff fee0 	bl	80023f4 <__sinit>
 8002634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002638:	0719      	lsls	r1, r3, #28
 800263a:	d422      	bmi.n	8002682 <__swsetup_r+0x62>
 800263c:	06da      	lsls	r2, r3, #27
 800263e:	d407      	bmi.n	8002650 <__swsetup_r+0x30>
 8002640:	2209      	movs	r2, #9
 8002642:	602a      	str	r2, [r5, #0]
 8002644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	f04f 30ff 	mov.w	r0, #4294967295
 800264e:	e033      	b.n	80026b8 <__swsetup_r+0x98>
 8002650:	0758      	lsls	r0, r3, #29
 8002652:	d512      	bpl.n	800267a <__swsetup_r+0x5a>
 8002654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002656:	b141      	cbz	r1, 800266a <__swsetup_r+0x4a>
 8002658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800265c:	4299      	cmp	r1, r3
 800265e:	d002      	beq.n	8002666 <__swsetup_r+0x46>
 8002660:	4628      	mov	r0, r5
 8002662:	f000 f8af 	bl	80027c4 <_free_r>
 8002666:	2300      	movs	r3, #0
 8002668:	6363      	str	r3, [r4, #52]	@ 0x34
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002670:	81a3      	strh	r3, [r4, #12]
 8002672:	2300      	movs	r3, #0
 8002674:	6063      	str	r3, [r4, #4]
 8002676:	6923      	ldr	r3, [r4, #16]
 8002678:	6023      	str	r3, [r4, #0]
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	81a3      	strh	r3, [r4, #12]
 8002682:	6923      	ldr	r3, [r4, #16]
 8002684:	b94b      	cbnz	r3, 800269a <__swsetup_r+0x7a>
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800268c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002690:	d003      	beq.n	800269a <__swsetup_r+0x7a>
 8002692:	4621      	mov	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f000 fa5f 	bl	8002b58 <__smakebuf_r>
 800269a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800269e:	f013 0201 	ands.w	r2, r3, #1
 80026a2:	d00a      	beq.n	80026ba <__swsetup_r+0x9a>
 80026a4:	2200      	movs	r2, #0
 80026a6:	60a2      	str	r2, [r4, #8]
 80026a8:	6962      	ldr	r2, [r4, #20]
 80026aa:	4252      	negs	r2, r2
 80026ac:	61a2      	str	r2, [r4, #24]
 80026ae:	6922      	ldr	r2, [r4, #16]
 80026b0:	b942      	cbnz	r2, 80026c4 <__swsetup_r+0xa4>
 80026b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026b6:	d1c5      	bne.n	8002644 <__swsetup_r+0x24>
 80026b8:	bd38      	pop	{r3, r4, r5, pc}
 80026ba:	0799      	lsls	r1, r3, #30
 80026bc:	bf58      	it	pl
 80026be:	6962      	ldrpl	r2, [r4, #20]
 80026c0:	60a2      	str	r2, [r4, #8]
 80026c2:	e7f4      	b.n	80026ae <__swsetup_r+0x8e>
 80026c4:	2000      	movs	r0, #0
 80026c6:	e7f7      	b.n	80026b8 <__swsetup_r+0x98>
 80026c8:	20000018 	.word	0x20000018

080026cc <memset>:
 80026cc:	4402      	add	r2, r0
 80026ce:	4603      	mov	r3, r0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	f803 1b01 	strb.w	r1, [r3], #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <_close_r>:
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	4d06      	ldr	r5, [pc, #24]	@ (80026f8 <_close_r+0x1c>)
 80026e0:	2300      	movs	r3, #0
 80026e2:	4604      	mov	r4, r0
 80026e4:	4608      	mov	r0, r1
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	f7fe f888 	bl	80007fc <_close>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_close_r+0x1a>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_close_r+0x1a>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000210 	.word	0x20000210

080026fc <_lseek_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d07      	ldr	r5, [pc, #28]	@ (800271c <_lseek_r+0x20>)
 8002700:	4604      	mov	r4, r0
 8002702:	4608      	mov	r0, r1
 8002704:	4611      	mov	r1, r2
 8002706:	2200      	movs	r2, #0
 8002708:	602a      	str	r2, [r5, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7fe f89d 	bl	800084a <_lseek>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_lseek_r+0x1e>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_lseek_r+0x1e>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000210 	.word	0x20000210

08002720 <_read_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4d07      	ldr	r5, [pc, #28]	@ (8002740 <_read_r+0x20>)
 8002724:	4604      	mov	r4, r0
 8002726:	4608      	mov	r0, r1
 8002728:	4611      	mov	r1, r2
 800272a:	2200      	movs	r2, #0
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f7fe f82b 	bl	800078a <_read>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_read_r+0x1e>
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	b103      	cbz	r3, 800273e <_read_r+0x1e>
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000210 	.word	0x20000210

08002744 <_write_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	4d07      	ldr	r5, [pc, #28]	@ (8002764 <_write_r+0x20>)
 8002748:	4604      	mov	r4, r0
 800274a:	4608      	mov	r0, r1
 800274c:	4611      	mov	r1, r2
 800274e:	2200      	movs	r2, #0
 8002750:	602a      	str	r2, [r5, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f7fe f836 	bl	80007c4 <_write>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d102      	bne.n	8002762 <_write_r+0x1e>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b103      	cbz	r3, 8002762 <_write_r+0x1e>
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	bd38      	pop	{r3, r4, r5, pc}
 8002764:	20000210 	.word	0x20000210

08002768 <__errno>:
 8002768:	4b01      	ldr	r3, [pc, #4]	@ (8002770 <__errno+0x8>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000018 	.word	0x20000018

08002774 <__libc_init_array>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	4d0d      	ldr	r5, [pc, #52]	@ (80027ac <__libc_init_array+0x38>)
 8002778:	4c0d      	ldr	r4, [pc, #52]	@ (80027b0 <__libc_init_array+0x3c>)
 800277a:	1b64      	subs	r4, r4, r5
 800277c:	10a4      	asrs	r4, r4, #2
 800277e:	2600      	movs	r6, #0
 8002780:	42a6      	cmp	r6, r4
 8002782:	d109      	bne.n	8002798 <__libc_init_array+0x24>
 8002784:	4d0b      	ldr	r5, [pc, #44]	@ (80027b4 <__libc_init_array+0x40>)
 8002786:	4c0c      	ldr	r4, [pc, #48]	@ (80027b8 <__libc_init_array+0x44>)
 8002788:	f000 fa54 	bl	8002c34 <_init>
 800278c:	1b64      	subs	r4, r4, r5
 800278e:	10a4      	asrs	r4, r4, #2
 8002790:	2600      	movs	r6, #0
 8002792:	42a6      	cmp	r6, r4
 8002794:	d105      	bne.n	80027a2 <__libc_init_array+0x2e>
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	f855 3b04 	ldr.w	r3, [r5], #4
 800279c:	4798      	blx	r3
 800279e:	3601      	adds	r6, #1
 80027a0:	e7ee      	b.n	8002780 <__libc_init_array+0xc>
 80027a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a6:	4798      	blx	r3
 80027a8:	3601      	adds	r6, #1
 80027aa:	e7f2      	b.n	8002792 <__libc_init_array+0x1e>
 80027ac:	08002d1c 	.word	0x08002d1c
 80027b0:	08002d1c 	.word	0x08002d1c
 80027b4:	08002d1c 	.word	0x08002d1c
 80027b8:	08002d20 	.word	0x08002d20

080027bc <__retarget_lock_init_recursive>:
 80027bc:	4770      	bx	lr

080027be <__retarget_lock_acquire_recursive>:
 80027be:	4770      	bx	lr

080027c0 <__retarget_lock_release_recursive>:
 80027c0:	4770      	bx	lr
	...

080027c4 <_free_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	4605      	mov	r5, r0
 80027c8:	2900      	cmp	r1, #0
 80027ca:	d041      	beq.n	8002850 <_free_r+0x8c>
 80027cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027d0:	1f0c      	subs	r4, r1, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bfb8      	it	lt
 80027d6:	18e4      	addlt	r4, r4, r3
 80027d8:	f000 f8e0 	bl	800299c <__malloc_lock>
 80027dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <_free_r+0x90>)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	b933      	cbnz	r3, 80027f0 <_free_r+0x2c>
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	6014      	str	r4, [r2, #0]
 80027e6:	4628      	mov	r0, r5
 80027e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ec:	f000 b8dc 	b.w	80029a8 <__malloc_unlock>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d908      	bls.n	8002806 <_free_r+0x42>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	1821      	adds	r1, r4, r0
 80027f8:	428b      	cmp	r3, r1
 80027fa:	bf01      	itttt	eq
 80027fc:	6819      	ldreq	r1, [r3, #0]
 80027fe:	685b      	ldreq	r3, [r3, #4]
 8002800:	1809      	addeq	r1, r1, r0
 8002802:	6021      	streq	r1, [r4, #0]
 8002804:	e7ed      	b.n	80027e2 <_free_r+0x1e>
 8002806:	461a      	mov	r2, r3
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b10b      	cbz	r3, 8002810 <_free_r+0x4c>
 800280c:	42a3      	cmp	r3, r4
 800280e:	d9fa      	bls.n	8002806 <_free_r+0x42>
 8002810:	6811      	ldr	r1, [r2, #0]
 8002812:	1850      	adds	r0, r2, r1
 8002814:	42a0      	cmp	r0, r4
 8002816:	d10b      	bne.n	8002830 <_free_r+0x6c>
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	4401      	add	r1, r0
 800281c:	1850      	adds	r0, r2, r1
 800281e:	4283      	cmp	r3, r0
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	d1e0      	bne.n	80027e6 <_free_r+0x22>
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	6053      	str	r3, [r2, #4]
 800282a:	4408      	add	r0, r1
 800282c:	6010      	str	r0, [r2, #0]
 800282e:	e7da      	b.n	80027e6 <_free_r+0x22>
 8002830:	d902      	bls.n	8002838 <_free_r+0x74>
 8002832:	230c      	movs	r3, #12
 8002834:	602b      	str	r3, [r5, #0]
 8002836:	e7d6      	b.n	80027e6 <_free_r+0x22>
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	1821      	adds	r1, r4, r0
 800283c:	428b      	cmp	r3, r1
 800283e:	bf04      	itt	eq
 8002840:	6819      	ldreq	r1, [r3, #0]
 8002842:	685b      	ldreq	r3, [r3, #4]
 8002844:	6063      	str	r3, [r4, #4]
 8002846:	bf04      	itt	eq
 8002848:	1809      	addeq	r1, r1, r0
 800284a:	6021      	streq	r1, [r4, #0]
 800284c:	6054      	str	r4, [r2, #4]
 800284e:	e7ca      	b.n	80027e6 <_free_r+0x22>
 8002850:	bd38      	pop	{r3, r4, r5, pc}
 8002852:	bf00      	nop
 8002854:	2000021c 	.word	0x2000021c

08002858 <sbrk_aligned>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	4e0f      	ldr	r6, [pc, #60]	@ (8002898 <sbrk_aligned+0x40>)
 800285c:	460c      	mov	r4, r1
 800285e:	6831      	ldr	r1, [r6, #0]
 8002860:	4605      	mov	r5, r0
 8002862:	b911      	cbnz	r1, 800286a <sbrk_aligned+0x12>
 8002864:	f000 f9d6 	bl	8002c14 <_sbrk_r>
 8002868:	6030      	str	r0, [r6, #0]
 800286a:	4621      	mov	r1, r4
 800286c:	4628      	mov	r0, r5
 800286e:	f000 f9d1 	bl	8002c14 <_sbrk_r>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	d103      	bne.n	800287e <sbrk_aligned+0x26>
 8002876:	f04f 34ff 	mov.w	r4, #4294967295
 800287a:	4620      	mov	r0, r4
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	1cc4      	adds	r4, r0, #3
 8002880:	f024 0403 	bic.w	r4, r4, #3
 8002884:	42a0      	cmp	r0, r4
 8002886:	d0f8      	beq.n	800287a <sbrk_aligned+0x22>
 8002888:	1a21      	subs	r1, r4, r0
 800288a:	4628      	mov	r0, r5
 800288c:	f000 f9c2 	bl	8002c14 <_sbrk_r>
 8002890:	3001      	adds	r0, #1
 8002892:	d1f2      	bne.n	800287a <sbrk_aligned+0x22>
 8002894:	e7ef      	b.n	8002876 <sbrk_aligned+0x1e>
 8002896:	bf00      	nop
 8002898:	20000218 	.word	0x20000218

0800289c <_malloc_r>:
 800289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028a0:	1ccd      	adds	r5, r1, #3
 80028a2:	f025 0503 	bic.w	r5, r5, #3
 80028a6:	3508      	adds	r5, #8
 80028a8:	2d0c      	cmp	r5, #12
 80028aa:	bf38      	it	cc
 80028ac:	250c      	movcc	r5, #12
 80028ae:	2d00      	cmp	r5, #0
 80028b0:	4606      	mov	r6, r0
 80028b2:	db01      	blt.n	80028b8 <_malloc_r+0x1c>
 80028b4:	42a9      	cmp	r1, r5
 80028b6:	d904      	bls.n	80028c2 <_malloc_r+0x26>
 80028b8:	230c      	movs	r3, #12
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	2000      	movs	r0, #0
 80028be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002998 <_malloc_r+0xfc>
 80028c6:	f000 f869 	bl	800299c <__malloc_lock>
 80028ca:	f8d8 3000 	ldr.w	r3, [r8]
 80028ce:	461c      	mov	r4, r3
 80028d0:	bb44      	cbnz	r4, 8002924 <_malloc_r+0x88>
 80028d2:	4629      	mov	r1, r5
 80028d4:	4630      	mov	r0, r6
 80028d6:	f7ff ffbf 	bl	8002858 <sbrk_aligned>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	4604      	mov	r4, r0
 80028de:	d158      	bne.n	8002992 <_malloc_r+0xf6>
 80028e0:	f8d8 4000 	ldr.w	r4, [r8]
 80028e4:	4627      	mov	r7, r4
 80028e6:	2f00      	cmp	r7, #0
 80028e8:	d143      	bne.n	8002972 <_malloc_r+0xd6>
 80028ea:	2c00      	cmp	r4, #0
 80028ec:	d04b      	beq.n	8002986 <_malloc_r+0xea>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	4639      	mov	r1, r7
 80028f2:	4630      	mov	r0, r6
 80028f4:	eb04 0903 	add.w	r9, r4, r3
 80028f8:	f000 f98c 	bl	8002c14 <_sbrk_r>
 80028fc:	4581      	cmp	r9, r0
 80028fe:	d142      	bne.n	8002986 <_malloc_r+0xea>
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	1a6d      	subs	r5, r5, r1
 8002904:	4629      	mov	r1, r5
 8002906:	4630      	mov	r0, r6
 8002908:	f7ff ffa6 	bl	8002858 <sbrk_aligned>
 800290c:	3001      	adds	r0, #1
 800290e:	d03a      	beq.n	8002986 <_malloc_r+0xea>
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	442b      	add	r3, r5
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	f8d8 3000 	ldr.w	r3, [r8]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	bb62      	cbnz	r2, 8002978 <_malloc_r+0xdc>
 800291e:	f8c8 7000 	str.w	r7, [r8]
 8002922:	e00f      	b.n	8002944 <_malloc_r+0xa8>
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	1b52      	subs	r2, r2, r5
 8002928:	d420      	bmi.n	800296c <_malloc_r+0xd0>
 800292a:	2a0b      	cmp	r2, #11
 800292c:	d917      	bls.n	800295e <_malloc_r+0xc2>
 800292e:	1961      	adds	r1, r4, r5
 8002930:	42a3      	cmp	r3, r4
 8002932:	6025      	str	r5, [r4, #0]
 8002934:	bf18      	it	ne
 8002936:	6059      	strne	r1, [r3, #4]
 8002938:	6863      	ldr	r3, [r4, #4]
 800293a:	bf08      	it	eq
 800293c:	f8c8 1000 	streq.w	r1, [r8]
 8002940:	5162      	str	r2, [r4, r5]
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	4630      	mov	r0, r6
 8002946:	f000 f82f 	bl	80029a8 <__malloc_unlock>
 800294a:	f104 000b 	add.w	r0, r4, #11
 800294e:	1d23      	adds	r3, r4, #4
 8002950:	f020 0007 	bic.w	r0, r0, #7
 8002954:	1ac2      	subs	r2, r0, r3
 8002956:	bf1c      	itt	ne
 8002958:	1a1b      	subne	r3, r3, r0
 800295a:	50a3      	strne	r3, [r4, r2]
 800295c:	e7af      	b.n	80028be <_malloc_r+0x22>
 800295e:	6862      	ldr	r2, [r4, #4]
 8002960:	42a3      	cmp	r3, r4
 8002962:	bf0c      	ite	eq
 8002964:	f8c8 2000 	streq.w	r2, [r8]
 8002968:	605a      	strne	r2, [r3, #4]
 800296a:	e7eb      	b.n	8002944 <_malloc_r+0xa8>
 800296c:	4623      	mov	r3, r4
 800296e:	6864      	ldr	r4, [r4, #4]
 8002970:	e7ae      	b.n	80028d0 <_malloc_r+0x34>
 8002972:	463c      	mov	r4, r7
 8002974:	687f      	ldr	r7, [r7, #4]
 8002976:	e7b6      	b.n	80028e6 <_malloc_r+0x4a>
 8002978:	461a      	mov	r2, r3
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	42a3      	cmp	r3, r4
 800297e:	d1fb      	bne.n	8002978 <_malloc_r+0xdc>
 8002980:	2300      	movs	r3, #0
 8002982:	6053      	str	r3, [r2, #4]
 8002984:	e7de      	b.n	8002944 <_malloc_r+0xa8>
 8002986:	230c      	movs	r3, #12
 8002988:	6033      	str	r3, [r6, #0]
 800298a:	4630      	mov	r0, r6
 800298c:	f000 f80c 	bl	80029a8 <__malloc_unlock>
 8002990:	e794      	b.n	80028bc <_malloc_r+0x20>
 8002992:	6005      	str	r5, [r0, #0]
 8002994:	e7d6      	b.n	8002944 <_malloc_r+0xa8>
 8002996:	bf00      	nop
 8002998:	2000021c 	.word	0x2000021c

0800299c <__malloc_lock>:
 800299c:	4801      	ldr	r0, [pc, #4]	@ (80029a4 <__malloc_lock+0x8>)
 800299e:	f7ff bf0e 	b.w	80027be <__retarget_lock_acquire_recursive>
 80029a2:	bf00      	nop
 80029a4:	20000214 	.word	0x20000214

080029a8 <__malloc_unlock>:
 80029a8:	4801      	ldr	r0, [pc, #4]	@ (80029b0 <__malloc_unlock+0x8>)
 80029aa:	f7ff bf09 	b.w	80027c0 <__retarget_lock_release_recursive>
 80029ae:	bf00      	nop
 80029b0:	20000214 	.word	0x20000214

080029b4 <__sflush_r>:
 80029b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	0716      	lsls	r6, r2, #28
 80029be:	4605      	mov	r5, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	d454      	bmi.n	8002a6e <__sflush_r+0xba>
 80029c4:	684b      	ldr	r3, [r1, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	dc02      	bgt.n	80029d0 <__sflush_r+0x1c>
 80029ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dd48      	ble.n	8002a62 <__sflush_r+0xae>
 80029d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80029d2:	2e00      	cmp	r6, #0
 80029d4:	d045      	beq.n	8002a62 <__sflush_r+0xae>
 80029d6:	2300      	movs	r3, #0
 80029d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80029dc:	682f      	ldr	r7, [r5, #0]
 80029de:	6a21      	ldr	r1, [r4, #32]
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	d030      	beq.n	8002a46 <__sflush_r+0x92>
 80029e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	0759      	lsls	r1, r3, #29
 80029ea:	d505      	bpl.n	80029f8 <__sflush_r+0x44>
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80029f2:	b10b      	cbz	r3, 80029f8 <__sflush_r+0x44>
 80029f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	2300      	movs	r3, #0
 80029fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	4628      	mov	r0, r5
 8002a00:	47b0      	blx	r6
 8002a02:	1c43      	adds	r3, r0, #1
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	d106      	bne.n	8002a16 <__sflush_r+0x62>
 8002a08:	6829      	ldr	r1, [r5, #0]
 8002a0a:	291d      	cmp	r1, #29
 8002a0c:	d82b      	bhi.n	8002a66 <__sflush_r+0xb2>
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <__sflush_r+0x104>)
 8002a10:	410a      	asrs	r2, r1
 8002a12:	07d6      	lsls	r6, r2, #31
 8002a14:	d427      	bmi.n	8002a66 <__sflush_r+0xb2>
 8002a16:	2200      	movs	r2, #0
 8002a18:	6062      	str	r2, [r4, #4]
 8002a1a:	04d9      	lsls	r1, r3, #19
 8002a1c:	6922      	ldr	r2, [r4, #16]
 8002a1e:	6022      	str	r2, [r4, #0]
 8002a20:	d504      	bpl.n	8002a2c <__sflush_r+0x78>
 8002a22:	1c42      	adds	r2, r0, #1
 8002a24:	d101      	bne.n	8002a2a <__sflush_r+0x76>
 8002a26:	682b      	ldr	r3, [r5, #0]
 8002a28:	b903      	cbnz	r3, 8002a2c <__sflush_r+0x78>
 8002a2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a2e:	602f      	str	r7, [r5, #0]
 8002a30:	b1b9      	cbz	r1, 8002a62 <__sflush_r+0xae>
 8002a32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a36:	4299      	cmp	r1, r3
 8002a38:	d002      	beq.n	8002a40 <__sflush_r+0x8c>
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7ff fec2 	bl	80027c4 <_free_r>
 8002a40:	2300      	movs	r3, #0
 8002a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a44:	e00d      	b.n	8002a62 <__sflush_r+0xae>
 8002a46:	2301      	movs	r3, #1
 8002a48:	4628      	mov	r0, r5
 8002a4a:	47b0      	blx	r6
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	1c50      	adds	r0, r2, #1
 8002a50:	d1c9      	bne.n	80029e6 <__sflush_r+0x32>
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0c6      	beq.n	80029e6 <__sflush_r+0x32>
 8002a58:	2b1d      	cmp	r3, #29
 8002a5a:	d001      	beq.n	8002a60 <__sflush_r+0xac>
 8002a5c:	2b16      	cmp	r3, #22
 8002a5e:	d11e      	bne.n	8002a9e <__sflush_r+0xea>
 8002a60:	602f      	str	r7, [r5, #0]
 8002a62:	2000      	movs	r0, #0
 8002a64:	e022      	b.n	8002aac <__sflush_r+0xf8>
 8002a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	e01b      	b.n	8002aa6 <__sflush_r+0xf2>
 8002a6e:	690f      	ldr	r7, [r1, #16]
 8002a70:	2f00      	cmp	r7, #0
 8002a72:	d0f6      	beq.n	8002a62 <__sflush_r+0xae>
 8002a74:	0793      	lsls	r3, r2, #30
 8002a76:	680e      	ldr	r6, [r1, #0]
 8002a78:	bf08      	it	eq
 8002a7a:	694b      	ldreq	r3, [r1, #20]
 8002a7c:	600f      	str	r7, [r1, #0]
 8002a7e:	bf18      	it	ne
 8002a80:	2300      	movne	r3, #0
 8002a82:	eba6 0807 	sub.w	r8, r6, r7
 8002a86:	608b      	str	r3, [r1, #8]
 8002a88:	f1b8 0f00 	cmp.w	r8, #0
 8002a8c:	dde9      	ble.n	8002a62 <__sflush_r+0xae>
 8002a8e:	6a21      	ldr	r1, [r4, #32]
 8002a90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002a92:	4643      	mov	r3, r8
 8002a94:	463a      	mov	r2, r7
 8002a96:	4628      	mov	r0, r5
 8002a98:	47b0      	blx	r6
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	dc08      	bgt.n	8002ab0 <__sflush_r+0xfc>
 8002a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa6:	81a3      	strh	r3, [r4, #12]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ab0:	4407      	add	r7, r0
 8002ab2:	eba8 0800 	sub.w	r8, r8, r0
 8002ab6:	e7e7      	b.n	8002a88 <__sflush_r+0xd4>
 8002ab8:	dfbffffe 	.word	0xdfbffffe

08002abc <_fflush_r>:
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	690b      	ldr	r3, [r1, #16]
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	b913      	cbnz	r3, 8002acc <_fflush_r+0x10>
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	4628      	mov	r0, r5
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	b118      	cbz	r0, 8002ad6 <_fflush_r+0x1a>
 8002ace:	6a03      	ldr	r3, [r0, #32]
 8002ad0:	b90b      	cbnz	r3, 8002ad6 <_fflush_r+0x1a>
 8002ad2:	f7ff fc8f 	bl	80023f4 <__sinit>
 8002ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f3      	beq.n	8002ac6 <_fflush_r+0xa>
 8002ade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ae0:	07d0      	lsls	r0, r2, #31
 8002ae2:	d404      	bmi.n	8002aee <_fflush_r+0x32>
 8002ae4:	0599      	lsls	r1, r3, #22
 8002ae6:	d402      	bmi.n	8002aee <_fflush_r+0x32>
 8002ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002aea:	f7ff fe68 	bl	80027be <__retarget_lock_acquire_recursive>
 8002aee:	4628      	mov	r0, r5
 8002af0:	4621      	mov	r1, r4
 8002af2:	f7ff ff5f 	bl	80029b4 <__sflush_r>
 8002af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002af8:	07da      	lsls	r2, r3, #31
 8002afa:	4605      	mov	r5, r0
 8002afc:	d4e4      	bmi.n	8002ac8 <_fflush_r+0xc>
 8002afe:	89a3      	ldrh	r3, [r4, #12]
 8002b00:	059b      	lsls	r3, r3, #22
 8002b02:	d4e1      	bmi.n	8002ac8 <_fflush_r+0xc>
 8002b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b06:	f7ff fe5b 	bl	80027c0 <__retarget_lock_release_recursive>
 8002b0a:	e7dd      	b.n	8002ac8 <_fflush_r+0xc>

08002b0c <__swhatbuf_r>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	460c      	mov	r4, r1
 8002b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b14:	2900      	cmp	r1, #0
 8002b16:	b096      	sub	sp, #88	@ 0x58
 8002b18:	4615      	mov	r5, r2
 8002b1a:	461e      	mov	r6, r3
 8002b1c:	da0d      	bge.n	8002b3a <__swhatbuf_r+0x2e>
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2340      	movne	r3, #64	@ 0x40
 8002b2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002b30:	2000      	movs	r0, #0
 8002b32:	6031      	str	r1, [r6, #0]
 8002b34:	602b      	str	r3, [r5, #0]
 8002b36:	b016      	add	sp, #88	@ 0x58
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
 8002b3a:	466a      	mov	r2, sp
 8002b3c:	f000 f848 	bl	8002bd0 <_fstat_r>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	dbec      	blt.n	8002b1e <__swhatbuf_r+0x12>
 8002b44:	9901      	ldr	r1, [sp, #4]
 8002b46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002b4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002b4e:	4259      	negs	r1, r3
 8002b50:	4159      	adcs	r1, r3
 8002b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b56:	e7eb      	b.n	8002b30 <__swhatbuf_r+0x24>

08002b58 <__smakebuf_r>:
 8002b58:	898b      	ldrh	r3, [r1, #12]
 8002b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b5c:	079d      	lsls	r5, r3, #30
 8002b5e:	4606      	mov	r6, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	d507      	bpl.n	8002b74 <__smakebuf_r+0x1c>
 8002b64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	6123      	str	r3, [r4, #16]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	6163      	str	r3, [r4, #20]
 8002b70:	b003      	add	sp, #12
 8002b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b74:	ab01      	add	r3, sp, #4
 8002b76:	466a      	mov	r2, sp
 8002b78:	f7ff ffc8 	bl	8002b0c <__swhatbuf_r>
 8002b7c:	9f00      	ldr	r7, [sp, #0]
 8002b7e:	4605      	mov	r5, r0
 8002b80:	4639      	mov	r1, r7
 8002b82:	4630      	mov	r0, r6
 8002b84:	f7ff fe8a 	bl	800289c <_malloc_r>
 8002b88:	b948      	cbnz	r0, 8002b9e <__smakebuf_r+0x46>
 8002b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8e:	059a      	lsls	r2, r3, #22
 8002b90:	d4ee      	bmi.n	8002b70 <__smakebuf_r+0x18>
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	81a3      	strh	r3, [r4, #12]
 8002b9c:	e7e2      	b.n	8002b64 <__smakebuf_r+0xc>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	6020      	str	r0, [r4, #0]
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba6:	81a3      	strh	r3, [r4, #12]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002bae:	b15b      	cbz	r3, 8002bc8 <__smakebuf_r+0x70>
 8002bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f000 f81d 	bl	8002bf4 <_isatty_r>
 8002bba:	b128      	cbz	r0, 8002bc8 <__smakebuf_r+0x70>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	431d      	orrs	r5, r3
 8002bcc:	81a5      	strh	r5, [r4, #12]
 8002bce:	e7cf      	b.n	8002b70 <__smakebuf_r+0x18>

08002bd0 <_fstat_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4d07      	ldr	r5, [pc, #28]	@ (8002bf0 <_fstat_r+0x20>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	f7fd fe19 	bl	8000814 <_fstat>
 8002be2:	1c43      	adds	r3, r0, #1
 8002be4:	d102      	bne.n	8002bec <_fstat_r+0x1c>
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	b103      	cbz	r3, 8002bec <_fstat_r+0x1c>
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000210 	.word	0x20000210

08002bf4 <_isatty_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4d06      	ldr	r5, [pc, #24]	@ (8002c10 <_isatty_r+0x1c>)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	f7fd fe18 	bl	8000834 <_isatty>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d102      	bne.n	8002c0e <_isatty_r+0x1a>
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	b103      	cbz	r3, 8002c0e <_isatty_r+0x1a>
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	20000210 	.word	0x20000210

08002c14 <_sbrk_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4d06      	ldr	r5, [pc, #24]	@ (8002c30 <_sbrk_r+0x1c>)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	602b      	str	r3, [r5, #0]
 8002c20:	f7fd fe20 	bl	8000864 <_sbrk>
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	d102      	bne.n	8002c2e <_sbrk_r+0x1a>
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	b103      	cbz	r3, 8002c2e <_sbrk_r+0x1a>
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
 8002c30:	20000210 	.word	0x20000210

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
