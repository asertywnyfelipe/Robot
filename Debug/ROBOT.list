
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000278c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002914  08002914  00003914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a40  08002a40  00003a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a48  08002a48  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00003a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          000000bc  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb65  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccf  00000000  00000000  0000fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000118c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e5  00000000  00000000  00012568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020783  00000000  00000000  00012f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f920  00000000  00000000  000336d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78a0  00000000  00000000  00042ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a890  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003570  00000000  00000000  0010a8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0010de44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028fc 	.word	0x080028fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080028fc 	.word	0x080028fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000598 <MX_GPIO_Init+0xd0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000598 <MX_GPIO_Init+0xd0>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <MX_GPIO_Init+0xd0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <MX_GPIO_Init+0xd0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a1e      	ldr	r2, [pc, #120]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0308 	and.w	r3, r3, #8
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <MX_GPIO_Init+0xd0>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_GPIO_Init+0xd0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8000554:	4811      	ldr	r0, [pc, #68]	@ (800059c <MX_GPIO_Init+0xd4>)
 8000556:	f000 ff1b 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin;
 800055a:	f44f 531c 	mov.w	r3, #9984	@ 0x2700
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	480a      	ldr	r0, [pc, #40]	@ (800059c <MX_GPIO_Init+0xd4>)
 8000574:	f000 fd58 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_Confirm_Pin|BUTTON_Up_Pin|BUTTON_Down_Pin;
 8000578:	2307      	movs	r3, #7
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_GPIO_Init+0xd8>)
 800058c:	f000 fd4c 	bl	8001028 <HAL_GPIO_Init>

}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	@ 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <MX_I2C1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005b0:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <MX_I2C1_Init+0x58>)
 80005b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <MX_I2C1_Init+0x50>)
 80005e2:	f000 feef 	bl	80013c4 <HAL_I2C_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 fa46 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000078 	.word	0x20000078
 80005f8:	40005400 	.word	0x40005400
 80005fc:	000186a0 	.word	0x000186a0

08000600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a19      	ldr	r2, [pc, #100]	@ (8000684 <HAL_I2C_MspInit+0x84>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d12b      	bne.n	800067a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a17      	ldr	r2, [pc, #92]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800063e:	23c0      	movs	r3, #192	@ 0xc0
 8000640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000642:	2312      	movs	r3, #18
 8000644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800064e:	2304      	movs	r3, #4
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <HAL_I2C_MspInit+0x8c>)
 800065a:	f000 fce5 	bl	8001028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800066c:	6413      	str	r3, [r2, #64]	@ 0x40
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_I2C_MspInit+0x88>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	@ 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40005400 	.word	0x40005400
 8000688:	40023800 	.word	0x40023800
 800068c:	40020400 	.word	0x40020400

08000690 <init_motor>:
    Motor MotorLeft;
    Motor MotorRight;
} Robot;

void init_motor(Motor *motor,TIM_HandleTypeDef *htim, uint32_t channel, int speed, bool direction)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
	 HAL_TIM_PWM_Start(motor->htim, motor->channel);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4610      	mov	r0, r2
 80006aa:	f001 fc63 	bl	8001f74 <HAL_TIM_PWM_Start>
	 motor->htim=htim;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	601a      	str	r2, [r3, #0]
	 motor->channel=channel;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
	 motor->speed=0;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
	 motor->dir=1;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2201      	movs	r2, #1
 80006c4:	731a      	strb	r2, [r3, #12]
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <Display>:
}



void Display()
   {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
		char _dataStr[20];


       if (menu.lcdDisplayStart % menuStep == 0) //beginning of menu
 80006d6:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <Display+0x118>)
 80006d8:	6899      	ldr	r1, [r3, #8]
 80006da:	4b44      	ldr	r3, [pc, #272]	@ (80007ec <Display+0x11c>)
 80006dc:	fb83 2301 	smull	r2, r3, r3, r1
 80006e0:	109a      	asrs	r2, r3, #2
 80006e2:	17cb      	asrs	r3, r1, #31
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	d104      	bne.n	80006fe <Display+0x2e>
       {
           menu.lcdDisplayStart = menu.index;
 80006f4:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <Display+0x118>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a3b      	ldr	r2, [pc, #236]	@ (80007e8 <Display+0x118>)
 80006fa:	6093      	str	r3, [r2, #8]
 80006fc:	e014      	b.n	8000728 <Display+0x58>
       }
       else if(menuItem[(menu.index)+1].subMenu==-2) //end of menu
 80006fe:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <Display+0x118>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a3a      	ldr	r2, [pc, #232]	@ (80007f0 <Display+0x120>)
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	4413      	add	r3, r2
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f113 0f02 	cmn.w	r3, #2
 8000710:	d105      	bne.n	800071e <Display+0x4e>
       {
    	   menu.lcdDisplayStart = menu.index-2;
 8000712:	4b35      	ldr	r3, [pc, #212]	@ (80007e8 <Display+0x118>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b02      	subs	r3, #2
 8000718:	4a33      	ldr	r2, [pc, #204]	@ (80007e8 <Display+0x118>)
 800071a:	6093      	str	r3, [r2, #8]
 800071c:	e004      	b.n	8000728 <Display+0x58>
       }
       else //middle of menu
       {
           menu.lcdDisplayStart = menu.index-1;
 800071e:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <Display+0x118>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3b01      	subs	r3, #1
 8000724:	4a30      	ldr	r2, [pc, #192]	@ (80007e8 <Display+0x118>)
 8000726:	6093      	str	r3, [r2, #8]
//           index = 1;


       /* Generowanie lini */

       for (int x = 0; x < lcd_Rows; x++)
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e053      	b.n	80007d6 <Display+0x106>
       {
           strcpy(_dataStr, " "); // Clearing the string
 800072e:	463b      	mov	r3, r7
 8000730:	2220      	movs	r2, #32
 8000732:	801a      	strh	r2, [r3, #0]


           if (menu.index == menu.lcdDisplayStart+x)
 8000734:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <Display+0x118>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <Display+0x118>)
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	440b      	add	r3, r1
 8000740:	429a      	cmp	r2, r3
 8000742:	d10c      	bne.n	800075e <Display+0x8e>
                       strcat(_dataStr, ">"); // Adding ">" if the index matches
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd3e 	bl	80001c8 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	463b      	mov	r3, r7
 8000752:	4413      	add	r3, r2
 8000754:	4927      	ldr	r1, [pc, #156]	@ (80007f4 <Display+0x124>)
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	8013      	strh	r3, [r2, #0]
           if (menuItem[menu.lcdDisplayStart + x].subMenu >= 0 && menu.lcdIndexStart != menu.lcdDisplayStart + x)
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <Display+0x118>)
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	4413      	add	r3, r2
 8000766:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <Display+0x120>)
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	4413      	add	r3, r2
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db15      	blt.n	800079e <Display+0xce>
 8000772:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <Display+0x118>)
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <Display+0x118>)
 8000778:	6899      	ldr	r1, [r3, #8]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	440b      	add	r3, r1
 800077e:	429a      	cmp	r2, r3
 8000780:	d00d      	beq.n	800079e <Display+0xce>
                   {
                       strcat(_dataStr, "+"); // Adding "+" if condition met
 8000782:	463b      	mov	r3, r7
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd1f 	bl	80001c8 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	463b      	mov	r3, r7
 8000790:	4413      	add	r3, r2
 8000792:	4919      	ldr	r1, [pc, #100]	@ (80007f8 <Display+0x128>)
 8000794:	461a      	mov	r2, r3
 8000796:	460b      	mov	r3, r1
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	8013      	strh	r3, [r2, #0]
                   {
 800079c:	e00c      	b.n	80007b8 <Display+0xe8>
                   }
            else
                   {
                       strcat(_dataStr, " "); // Adding space otherwise
 800079e:	463b      	mov	r3, r7
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd11 	bl	80001c8 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	463b      	mov	r3, r7
 80007ac:	4413      	add	r3, r2
 80007ae:	4913      	ldr	r1, [pc, #76]	@ (80007fc <Display+0x12c>)
 80007b0:	461a      	mov	r2, r3
 80007b2:	460b      	mov	r3, r1
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	8013      	strh	r3, [r2, #0]
                   }

           strcat(_dataStr, menuItem[menu.lcdDisplayStart + x].name); // Adding the menu item name
 80007b8:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <Display+0x118>)
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	4413      	add	r3, r2
 80007c0:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <Display+0x120>)
 80007c2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007c6:	463b      	mov	r3, r7
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f862 	bl	8002894 <strcat>
       for (int x = 0; x < lcd_Rows; x++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	dda8      	ble.n	800072e <Display+0x5e>
                //   strcpy(menu.lcdValue[x], FillSpace(_dataStr)); // Filling space and copying to lcdValue array
       }
   }
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	66666667 	.word	0x66666667
 80007f0:	080029b8 	.word	0x080029b8
 80007f4:	08002984 	.word	0x08002984
 80007f8:	08002988 	.word	0x08002988
 80007fc:	0800298c 	.word	0x0800298c

08000800 <GetButtonInput>:


void GetButtonInput()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOD, BUTTON_Up_Pin) == 1)
 8000804:	2102      	movs	r1, #2
 8000806:	4823      	ldr	r0, [pc, #140]	@ (8000894 <GetButtonInput+0x94>)
 8000808:	f000 fdaa 	bl	8001360 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d116      	bne.n	8000840 <GetButtonInput+0x40>
    {
        menu.index++;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <GetButtonInput+0x98>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a1f      	ldr	r2, [pc, #124]	@ (8000898 <GetButtonInput+0x98>)
 800081a:	6013      	str	r3, [r2, #0]
        if (menu.index > menu.lcdIndexStart + menuStep)
 800081c:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <GetButtonInput+0x98>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <GetButtonInput+0x98>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	330a      	adds	r3, #10
 8000826:	429a      	cmp	r2, r3
 8000828:	dd04      	ble.n	8000834 <GetButtonInput+0x34>
        {
        	menu.index = menu.lcdIndexStart + menuStep;
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <GetButtonInput+0x98>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	330a      	adds	r3, #10
 8000830:	4a19      	ldr	r2, [pc, #100]	@ (8000898 <GetButtonInput+0x98>)
 8000832:	6013      	str	r3, [r2, #0]
        }
        Display();
 8000834:	f7ff ff4c 	bl	80006d0 <Display>
        HAL_Delay(200); // Adjust delay as needed
 8000838:	20c8      	movs	r0, #200	@ 0xc8
 800083a:	f000 faeb 	bl	8000e14 <HAL_Delay>
    else if (HAL_GPIO_ReadPin(GPIOD, BUTTON_Confirm_Pin) == 1)
    {
        MenuOk();
        HAL_Delay(200); // Adjust delay as needed
    }
}
 800083e:	e027      	b.n	8000890 <GetButtonInput+0x90>
    else if (HAL_GPIO_ReadPin(GPIOD, BUTTON_Down_Pin) == 1)
 8000840:	2104      	movs	r1, #4
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <GetButtonInput+0x94>)
 8000844:	f000 fd8c 	bl	8001360 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d114      	bne.n	8000878 <GetButtonInput+0x78>
    	menu.index--;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <GetButtonInput+0x98>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <GetButtonInput+0x98>)
 8000856:	6013      	str	r3, [r2, #0]
        if (menu.index < menu.lcdIndexStart)
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <GetButtonInput+0x98>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <GetButtonInput+0x98>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	da03      	bge.n	800086c <GetButtonInput+0x6c>
        	menu.index = menu.lcdIndexStart;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <GetButtonInput+0x98>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <GetButtonInput+0x98>)
 800086a:	6013      	str	r3, [r2, #0]
        Display();
 800086c:	f7ff ff30 	bl	80006d0 <Display>
        HAL_Delay(200); // Adjust delay as needed
 8000870:	20c8      	movs	r0, #200	@ 0xc8
 8000872:	f000 facf 	bl	8000e14 <HAL_Delay>
}
 8000876:	e00b      	b.n	8000890 <GetButtonInput+0x90>
    else if (HAL_GPIO_ReadPin(GPIOD, BUTTON_Confirm_Pin) == 1)
 8000878:	2101      	movs	r1, #1
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <GetButtonInput+0x94>)
 800087c:	f000 fd70 	bl	8001360 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d104      	bne.n	8000890 <GetButtonInput+0x90>
        MenuOk();
 8000886:	f000 f809 	bl	800089c <MenuOk>
        HAL_Delay(200); // Adjust delay as needed
 800088a:	20c8      	movs	r0, #200	@ 0xc8
 800088c:	f000 fac2 	bl	8000e14 <HAL_Delay>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40020c00 	.word	0x40020c00
 8000898:	20000000 	.word	0x20000000

0800089c <MenuOk>:
       return _indexResult;
   }


void MenuOk()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    if (menuItem[menu.index].subMenu > 0)//jezeli istnieje submenu
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MenuOk+0xb4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000954 <MenuOk+0xb8>)
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4413      	add	r3, r2
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dd49      	ble.n	8000944 <MenuOk+0xa8>
    {
        if (menuItem[menu.index].subMenu > menu.index)//jezeli submenu jest wieksze niz obecne menu (idziemy w gore)
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MenuOk+0xb4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <MenuOk+0xb8>)
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MenuOk+0xb4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dd11      	ble.n	80008e8 <MenuOk+0x4c>
        {
        	menu.lcdIndexStart = menuItem[menu.index].subMenu;
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MenuOk+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <MenuOk+0xb8>)
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000950 <MenuOk+0xb4>)
 80008d2:	60d3      	str	r3, [r2, #12]
            menu.index = menu.lcdIndexStart + 1;   //jestesmy na 1 nizej niz menu
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MenuOk+0xb4>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a1d      	ldr	r2, [pc, #116]	@ (8000950 <MenuOk+0xb4>)
 80008dc:	6013      	str	r3, [r2, #0]
            menu.lcdDisplayStart = menu.lcdIndexStart;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MenuOk+0xb4>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MenuOk+0xb4>)
 80008e4:	6093      	str	r3, [r2, #8]
 80008e6:	e02a      	b.n	800093e <MenuOk+0xa2>
        }
        else //jezeli submenu jest mniejsze
        {

        	menu.lcdIndexStart = menuItem[menu.index].subMenu / menuStep;
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MenuOk+0xb4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <MenuOk+0xb8>)
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <MenuOk+0xbc>)
 80008f6:	fb82 1203 	smull	r1, r2, r2, r3
 80008fa:	1092      	asrs	r2, r2, #2
 80008fc:	17db      	asrs	r3, r3, #31
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <MenuOk+0xb4>)
 8000902:	60d3      	str	r3, [r2, #12]
        	menu.lcdIndexStart *= menuStep;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MenuOk+0xb4>)
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	461a      	mov	r2, r3
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MenuOk+0xb4>)
 8000914:	60da      	str	r2, [r3, #12]
            menu.index = menuItem[menu.index].subMenu;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MenuOk+0xb4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <MenuOk+0xb8>)
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4413      	add	r3, r2
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <MenuOk+0xb4>)
 8000924:	6013      	str	r3, [r2, #0]
            menu.lcdDisplayStart = menu.index - 1;
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <MenuOk+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3b01      	subs	r3, #1
 800092c:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <MenuOk+0xb4>)
 800092e:	6093      	str	r3, [r2, #8]
            if (menu.lcdDisplayStart < 0)
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <MenuOk+0xb4>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	da02      	bge.n	800093e <MenuOk+0xa2>
            	menu.lcdDisplayStart = 0;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MenuOk+0xb4>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
        }
        Display();
 800093e:	f7ff fec7 	bl	80006d0 <Display>
    }
    else //nie ma submenu
    {
    	menu.indexResult = menu.index;
    }
}
 8000942:	e003      	b.n	800094c <MenuOk+0xb0>
    	menu.indexResult = menu.index;
 8000944:	4b02      	ldr	r3, [pc, #8]	@ (8000950 <MenuOk+0xb4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a01      	ldr	r2, [pc, #4]	@ (8000950 <MenuOk+0xb4>)
 800094a:	6053      	str	r3, [r2, #4]
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	080029b8 	.word	0x080029b8
 8000958:	66666667 	.word	0x66666667

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09a      	sub	sp, #104	@ 0x68
 8000960:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 f9e5 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f82b 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f7ff fdad 	bl	80004c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800096e:	f000 f8f5 	bl	8000b5c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000972:	f7ff fe17 	bl	80005a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Robot *andrzej;

 init_motor(&andrzej->MotorLeft, &htim3, TIM_CHANNEL_3, 0, 1);
 8000976:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000978:	2301      	movs	r3, #1
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2300      	movs	r3, #0
 800097e:	2208      	movs	r2, #8
 8000980:	490e      	ldr	r1, [pc, #56]	@ (80009bc <main+0x60>)
 8000982:	f7ff fe85 	bl	8000690 <init_motor>
 init_motor(&andrzej->MotorRight, &htim3, TIM_CHANNEL_4, 0, 1);
 8000986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000988:	f103 0010 	add.w	r0, r3, #16
 800098c:	2301      	movs	r3, #1
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	220c      	movs	r2, #12
 8000994:	4909      	ldr	r1, [pc, #36]	@ (80009bc <main+0x60>)
 8000996:	f7ff fe7b 	bl	8000690 <init_motor>


 int current_mode=0;
 800099a:	2300      	movs	r3, #0
 800099c:	65bb      	str	r3, [r7, #88]	@ 0x58
int mode_change =0;
 800099e:	2300      	movs	r3, #0
 80009a0:	657b      	str	r3, [r7, #84]	@ 0x54



Menu menu;

menu.index = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
menu.indexResult = -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	60bb      	str	r3, [r7, #8]
menu.lcdDisplayStart = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
menu.lcdIndexStart = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]





GetButtonInput();
 80009b4:	f7ff ff24 	bl	8000800 <GetButtonInput>
 80009b8:	e7fc      	b.n	80009b4 <main+0x58>
 80009ba:	bf00      	nop
 80009bc:	200000cc 	.word	0x200000cc

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	@ 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 ff58 	bl	8002884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <SystemClock_Config+0xb4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <SystemClock_Config+0xb4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <SystemClock_Config+0xb4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <SystemClock_Config+0xb8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <SystemClock_Config+0xb8>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <SystemClock_Config+0xb8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fe0b 	bl	800164c <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a3c:	f000 f81e 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f86e 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a66:	f000 f809 	bl	8000a7c <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	@ 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f951 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000b80:	4a27      	ldr	r2, [pc, #156]	@ (8000c20 <MX_TIM3_Init+0xc4>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000b84:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000b86:	220f      	movs	r2, #15
 8000b88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba4:	481d      	ldr	r0, [pc, #116]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000ba6:	f001 f995 	bl	8001ed4 <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f7ff ff64 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000bc4:	f001 fde2 	bl	800278c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bce:	f7ff ff55 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd2:	2360      	movs	r3, #96	@ 0x60
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2208      	movs	r2, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000bea:	f001 fa8b 	bl	8002104 <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000bf4:	f7ff ff42 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000c00:	f001 fa80 	bl	8002104 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c0a:	f7ff ff37 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM3_Init+0xc0>)
 8000c10:	f000 f82a 	bl	8000c68 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000cc 	.word	0x200000cc
 8000c20:	40000400 	.word	0x40000400

08000c24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10d      	bne.n	8000c52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40000400 	.word	0x40000400
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <HAL_TIM_MspPostInit+0x68>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d11e      	bne.n	8000cc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_TIM_MspPostInit+0x70>)
 8000cc4:	f000 f9b0 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce0:	f7ff ff2a 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f001 fdd3 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fe25 	bl	800095c <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d20:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 8000d24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d28:	20000118 	.word	0x20000118

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f931 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe90 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93b 	bl	800100e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f911 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000050 	.word	0x20000050
 8000dcc:	20000058 	.word	0x20000058
 8000dd0:	20000054 	.word	0x20000054

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000058 	.word	0x20000058
 8000df8:	20000114 	.word	0x20000114

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000114 	.word	0x20000114

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000058 	.word	0x20000058

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e16b      	b.n	800131c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 815a 	bne.w	8001316 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b4 	beq.w	8001316 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b5d      	ldr	r3, [pc, #372]	@ (8001334 <HAL_GPIO_Init+0x30c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001338 <HAL_GPIO_Init+0x310>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	@ (800133c <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a51      	ldr	r2, [pc, #324]	@ (8001340 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a50      	ldr	r2, [pc, #320]	@ (8001344 <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	@ (800134c <HAL_GPIO_Init+0x324>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <HAL_GPIO_Init+0x328>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x20a>
 800122e:	2307      	movs	r3, #7
 8001230:	e00e      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001232:	2308      	movs	r3, #8
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001236:	2306      	movs	r3, #6
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	@ (8001338 <HAL_GPIO_Init+0x310>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a32      	ldr	r2, [pc, #200]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <HAL_GPIO_Init+0x334>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a27      	ldr	r2, [pc, #156]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_GPIO_Init+0x334>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001310:	4a12      	ldr	r2, [pc, #72]	@ (800135c <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f ae90 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e12b      	b.n	800162e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f908 	bl	8000600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	@ 0x24
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001428:	f000 fd40 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800142c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a81      	ldr	r2, [pc, #516]	@ (8001638 <HAL_I2C_Init+0x274>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d807      	bhi.n	8001448 <HAL_I2C_Init+0x84>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a80      	ldr	r2, [pc, #512]	@ (800163c <HAL_I2C_Init+0x278>)
 800143c:	4293      	cmp	r3, r2
 800143e:	bf94      	ite	ls
 8001440:	2301      	movls	r3, #1
 8001442:	2300      	movhi	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e006      	b.n	8001456 <HAL_I2C_Init+0x92>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4a7d      	ldr	r2, [pc, #500]	@ (8001640 <HAL_I2C_Init+0x27c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	bf94      	ite	ls
 8001450:	2301      	movls	r3, #1
 8001452:	2300      	movhi	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0e7      	b.n	800162e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4a78      	ldr	r2, [pc, #480]	@ (8001644 <HAL_I2C_Init+0x280>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	430a      	orrs	r2, r1
 800147c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a6a      	ldr	r2, [pc, #424]	@ (8001638 <HAL_I2C_Init+0x274>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d802      	bhi.n	8001498 <HAL_I2C_Init+0xd4>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3301      	adds	r3, #1
 8001496:	e009      	b.n	80014ac <HAL_I2C_Init+0xe8>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a69      	ldr	r2, [pc, #420]	@ (8001648 <HAL_I2C_Init+0x284>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	3301      	adds	r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	495c      	ldr	r1, [pc, #368]	@ (8001638 <HAL_I2C_Init+0x274>)
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d819      	bhi.n	8001500 <HAL_I2C_Init+0x13c>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e59      	subs	r1, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014da:	1c59      	adds	r1, r3, #1
 80014dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014e0:	400b      	ands	r3, r1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <HAL_I2C_Init+0x138>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e59      	subs	r1, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	e051      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e04f      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <HAL_I2C_Init+0x168>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e58      	subs	r0, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e012      	b.n	8001552 <HAL_I2C_Init+0x18e>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	0099      	lsls	r1, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Init+0x196>
 8001556:	2301      	movs	r3, #1
 8001558:	e022      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10e      	bne.n	8001580 <HAL_I2C_Init+0x1bc>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e58      	subs	r0, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6859      	ldr	r1, [r3, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	440b      	add	r3, r1
 8001570:	fbb0 f3f3 	udiv	r3, r0, r3
 8001574:	3301      	adds	r3, #1
 8001576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800157e:	e00f      	b.n	80015a0 <HAL_I2C_Init+0x1dc>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	0099      	lsls	r1, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	6809      	ldr	r1, [r1, #0]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6911      	ldr	r1, [r2, #16]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68d2      	ldr	r2, [r2, #12]
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	000186a0 	.word	0x000186a0
 800163c:	001e847f 	.word	0x001e847f
 8001640:	003d08ff 	.word	0x003d08ff
 8001644:	431bde83 	.word	0x431bde83
 8001648:	10624dd3 	.word	0x10624dd3

0800164c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e267      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4b85      	ldr	r3, [pc, #532]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	2b08      	cmp	r3, #8
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b82      	ldr	r3, [pc, #520]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b7e      	ldr	r3, [pc, #504]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e242      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a75      	ldr	r2, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b70      	ldr	r3, [pc, #448]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6f      	ldr	r2, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b6d      	ldr	r3, [pc, #436]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6c      	ldr	r2, [pc, #432]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b69      	ldr	r3, [pc, #420]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a68      	ldr	r2, [pc, #416]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b66      	ldr	r3, [pc, #408]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a65      	ldr	r2, [pc, #404]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb7a 	bl	8000dfc <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fb76 	bl	8000dfc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e207      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b5b      	ldr	r3, [pc, #364]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb66 	bl	8000dfc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fb62 	bl	8000dfc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1f3      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b51      	ldr	r3, [pc, #324]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b44      	ldr	r3, [pc, #272]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1c7      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4937      	ldr	r1, [pc, #220]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <HAL_RCC_OscConfig+0x244>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb1b 	bl	8000dfc <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fb17 	bl	8000dfc <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a8      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4925      	ldr	r1, [pc, #148]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_RCC_OscConfig+0x244>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fafa 	bl	8000dfc <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff faf6 	bl	8000dfc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e187      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d036      	beq.n	80018a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_RCC_OscConfig+0x248>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fada 	bl	8000dfc <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fad6 	bl	8000dfc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e167      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
 800186a:	e01b      	b.n	80018a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x248>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fac3 	bl	8000dfc <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e00e      	b.n	8001898 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fabf 	bl	8000dfc <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d907      	bls.n	8001898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e150      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	42470000 	.word	0x42470000
 8001894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800189a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ea      	bne.n	800187a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8097 	beq.w	80019e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b77      	ldr	r3, [pc, #476]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	4b74      	ldr	r3, [pc, #464]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a73      	ldr	r2, [pc, #460]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa7f 	bl	8000dfc <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff fa7b 	bl	8000dfc <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e10c      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x2ea>
 8001928:	4b64      	ldr	r3, [pc, #400]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	4a63      	ldr	r2, [pc, #396]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	@ 0x70
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x324>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x30c>
 800193e:	4b5f      	ldr	r3, [pc, #380]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	4a5e      	ldr	r2, [pc, #376]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6713      	str	r3, [r2, #112]	@ 0x70
 800194a:	4b5c      	ldr	r3, [pc, #368]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	4a5b      	ldr	r2, [pc, #364]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6713      	str	r3, [r2, #112]	@ 0x70
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x324>
 8001958:	4b58      	ldr	r3, [pc, #352]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	4a57      	ldr	r2, [pc, #348]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	@ 0x70
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001968:	4a54      	ldr	r2, [pc, #336]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d015      	beq.n	80019a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff fa40 	bl	8000dfc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff fa3c 	bl	8000dfc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0cb      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ee      	beq.n	8001980 <HAL_RCC_OscConfig+0x334>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fa2a 	bl	8000dfc <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff fa26 	bl	8000dfc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0b5      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c2:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ee      	bne.n	80019ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a38      	ldr	r2, [pc, #224]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a1 	beq.w	8001b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ea:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d05c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d141      	bne.n	8001a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f9fa 	bl	8000dfc <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f9f6 	bl	8000dfc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e087      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	491b      	ldr	r1, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f9cf 	bl	8000dfc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f9cb 	bl	8000dfc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e05c      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x416>
 8001a80:	e054      	b.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9b8 	bl	8000dfc <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f9b4 	bl	8000dfc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e045      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x444>
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e038      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d028      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d121      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d11a      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cc      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d90c      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a58      	ldr	r2, [pc, #352]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a52      	ldr	r2, [pc, #328]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d044      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e067      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4934      	ldr	r1, [pc, #208]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7ff f8e6 	bl	8000dfc <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f8e2 	bl	8000dfc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f821 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	490a      	ldr	r1, [pc, #40]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	5ccb      	ldrb	r3, [r1, r3]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f846 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08002a28 	.word	0x08002a28
 8001d00:	20000050 	.word	0x20000050
 8001d04:	20000054 	.word	0x20000054

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d0c:	b090      	sub	sp, #64	@ 0x40
 8001d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d14:	2300      	movs	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d20:	4b59      	ldr	r3, [pc, #356]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d00d      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f200 80a1 	bhi.w	8001e74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d3a:	e09b      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b53      	ldr	r3, [pc, #332]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001d40:	e09b      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d42:	4b53      	ldr	r3, [pc, #332]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d46:	e098      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d48:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d52:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2200      	movs	r2, #0
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d70:	2100      	movs	r1, #0
 8001d72:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d74:	fb03 f201 	mul.w	r2, r3, r1
 8001d78:	2300      	movs	r3, #0
 8001d7a:	fb00 f303 	mul.w	r3, r0, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a43      	ldr	r2, [pc, #268]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d82:	fba0 1202 	umull	r1, r2, r0, r2
 8001d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d88:	460a      	mov	r2, r1
 8001d8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d8e:	4413      	add	r3, r2
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d94:	2200      	movs	r2, #0
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	61fa      	str	r2, [r7, #28]
 8001d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001da2:	f7fe fa19 	bl	80001d8 <__aeabi_uldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4613      	mov	r3, r2
 8001dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dae:	e053      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db0:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	2200      	movs	r2, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	617a      	str	r2, [r7, #20]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dc2:	f04f 0b00 	mov.w	fp, #0
 8001dc6:	4652      	mov	r2, sl
 8001dc8:	465b      	mov	r3, fp
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	0159      	lsls	r1, r3, #5
 8001dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd8:	0150      	lsls	r0, r2, #5
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	ebb2 080a 	subs.w	r8, r2, sl
 8001de2:	eb63 090b 	sbc.w	r9, r3, fp
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001df2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001df6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dfa:	ebb2 0408 	subs.w	r4, r2, r8
 8001dfe:	eb63 0509 	sbc.w	r5, r3, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	00eb      	lsls	r3, r5, #3
 8001e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e10:	00e2      	lsls	r2, r4, #3
 8001e12:	4614      	mov	r4, r2
 8001e14:	461d      	mov	r5, r3
 8001e16:	eb14 030a 	adds.w	r3, r4, sl
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	eb45 030b 	adc.w	r3, r5, fp
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e42:	2200      	movs	r2, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	60fa      	str	r2, [r7, #12]
 8001e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e4c:	f7fe f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001e68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3740      	adds	r7, #64	@ 0x40
 8001e80:	46bd      	mov	sp, r7
 8001e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	017d7840 	.word	0x017d7840

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000050 	.word	0x20000050

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	@ (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08002a38 	.word	0x08002a38

08001ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fe92 	bl	8000c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 f9b8 	bl	8002288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_TIM_PWM_Start+0x24>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e022      	b.n	8001fde <HAL_TIM_PWM_Start+0x6a>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d109      	bne.n	8001fb2 <HAL_TIM_PWM_Start+0x3e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	e015      	b.n	8001fde <HAL_TIM_PWM_Start+0x6a>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d109      	bne.n	8001fcc <HAL_TIM_PWM_Start+0x58>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e008      	b.n	8001fde <HAL_TIM_PWM_Start+0x6a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07c      	b.n	80020e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0x82>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff4:	e013      	b.n	800201e <HAL_TIM_PWM_Start+0xaa>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Start+0x92>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002004:	e00b      	b.n	800201e <HAL_TIM_PWM_Start+0xaa>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d104      	bne.n	8002016 <HAL_TIM_PWM_Start+0xa2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002014:	e003      	b.n	800201e <HAL_TIM_PWM_Start+0xaa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fb8a 	bl	8002740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_TIM_PWM_Start+0x174>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_PWM_Start+0xcc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2c      	ldr	r2, [pc, #176]	@ (80020ec <HAL_TIM_PWM_Start+0x178>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_TIM_PWM_Start+0xd0>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_TIM_PWM_Start+0xd2>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a22      	ldr	r2, [pc, #136]	@ (80020e8 <HAL_TIM_PWM_Start+0x174>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d022      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206c:	d01d      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1f      	ldr	r2, [pc, #124]	@ (80020f0 <HAL_TIM_PWM_Start+0x17c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d018      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1d      	ldr	r2, [pc, #116]	@ (80020f4 <HAL_TIM_PWM_Start+0x180>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <HAL_TIM_PWM_Start+0x184>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00e      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a16      	ldr	r2, [pc, #88]	@ (80020ec <HAL_TIM_PWM_Start+0x178>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_TIM_PWM_Start+0x188>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_TIM_PWM_Start+0x136>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a16      	ldr	r2, [pc, #88]	@ (8002100 <HAL_TIM_PWM_Start+0x18c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d111      	bne.n	80020ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d010      	beq.n	80020de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	e007      	b.n	80020de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40014000 	.word	0x40014000
 8002100:	40001800 	.word	0x40001800

08002104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800211e:	2302      	movs	r3, #2
 8002120:	e0ae      	b.n	8002280 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	f200 809f 	bhi.w	8002270 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	0800216d 	.word	0x0800216d
 800213c:	08002271 	.word	0x08002271
 8002140:	08002271 	.word	0x08002271
 8002144:	08002271 	.word	0x08002271
 8002148:	080021ad 	.word	0x080021ad
 800214c:	08002271 	.word	0x08002271
 8002150:	08002271 	.word	0x08002271
 8002154:	08002271 	.word	0x08002271
 8002158:	080021ef 	.word	0x080021ef
 800215c:	08002271 	.word	0x08002271
 8002160:	08002271 	.word	0x08002271
 8002164:	08002271 	.word	0x08002271
 8002168:	0800222f 	.word	0x0800222f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f934 	bl	80023e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6999      	ldr	r1, [r3, #24]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
      break;
 80021aa:	e064      	b.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f984 	bl	80024c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
      break;
 80021ec:	e043      	b.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f9d9 	bl	80025ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0208 	orr.w	r2, r2, #8
 8002208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	61da      	str	r2, [r3, #28]
      break;
 800222c:	e023      	b.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa2d 	bl	8002694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
      break;
 800226e:	e002      	b.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	75fb      	strb	r3, [r7, #23]
      break;
 8002274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a46      	ldr	r2, [pc, #280]	@ (80023b4 <TIM_Base_SetConfig+0x12c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a6:	d00f      	beq.n	80022c8 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a43      	ldr	r2, [pc, #268]	@ (80023b8 <TIM_Base_SetConfig+0x130>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <TIM_Base_SetConfig+0x134>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d007      	beq.n	80022c8 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a41      	ldr	r2, [pc, #260]	@ (80023c0 <TIM_Base_SetConfig+0x138>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a40      	ldr	r2, [pc, #256]	@ (80023c4 <TIM_Base_SetConfig+0x13c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d108      	bne.n	80022da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a35      	ldr	r2, [pc, #212]	@ (80023b4 <TIM_Base_SetConfig+0x12c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e8:	d027      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a32      	ldr	r2, [pc, #200]	@ (80023b8 <TIM_Base_SetConfig+0x130>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d023      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <TIM_Base_SetConfig+0x134>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <TIM_Base_SetConfig+0x138>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01b      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2f      	ldr	r2, [pc, #188]	@ (80023c4 <TIM_Base_SetConfig+0x13c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d017      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2e      	ldr	r2, [pc, #184]	@ (80023c8 <TIM_Base_SetConfig+0x140>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <TIM_Base_SetConfig+0x144>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00f      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2c      	ldr	r2, [pc, #176]	@ (80023d0 <TIM_Base_SetConfig+0x148>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00b      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2b      	ldr	r2, [pc, #172]	@ (80023d4 <TIM_Base_SetConfig+0x14c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2a      	ldr	r2, [pc, #168]	@ (80023d8 <TIM_Base_SetConfig+0x150>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a29      	ldr	r2, [pc, #164]	@ (80023dc <TIM_Base_SetConfig+0x154>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <TIM_Base_SetConfig+0x12c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0xf8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <TIM_Base_SetConfig+0x13c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d103      	bne.n	8002388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f023 0201 	bic.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
  }
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40010400 	.word	0x40010400
 80023c8:	40014000 	.word	0x40014000
 80023cc:	40014400 	.word	0x40014400
 80023d0:	40014800 	.word	0x40014800
 80023d4:	40001800 	.word	0x40001800
 80023d8:	40001c00 	.word	0x40001c00
 80023dc:	40002000 	.word	0x40002000

080023e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 0201 	bic.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <TIM_OC1_SetConfig+0xd8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <TIM_OC1_SetConfig+0x64>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <TIM_OC1_SetConfig+0xdc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d10c      	bne.n	800245e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0308 	bic.w	r3, r3, #8
 800244a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <TIM_OC1_SetConfig+0xd8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_OC1_SetConfig+0x8e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <TIM_OC1_SetConfig+0xdc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d111      	bne.n	8002492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010400 	.word	0x40010400

080024c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 0210 	bic.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0320 	bic.w	r3, r3, #32
 800250a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a22      	ldr	r2, [pc, #136]	@ (80025a4 <TIM_OC2_SetConfig+0xe4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_OC2_SetConfig+0x68>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a21      	ldr	r2, [pc, #132]	@ (80025a8 <TIM_OC2_SetConfig+0xe8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10d      	bne.n	8002544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <TIM_OC2_SetConfig+0xe4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d003      	beq.n	8002554 <TIM_OC2_SetConfig+0x94>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <TIM_OC2_SetConfig+0xe8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d113      	bne.n	800257c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800255a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40010400 	.word	0x40010400

080025ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a21      	ldr	r2, [pc, #132]	@ (800268c <TIM_OC3_SetConfig+0xe0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_OC3_SetConfig+0x66>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <TIM_OC3_SetConfig+0xe4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10d      	bne.n	800262e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800262c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a16      	ldr	r2, [pc, #88]	@ (800268c <TIM_OC3_SetConfig+0xe0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_OC3_SetConfig+0x92>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <TIM_OC3_SetConfig+0xe4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d113      	bne.n	8002666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	621a      	str	r2, [r3, #32]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40010000 	.word	0x40010000
 8002690:	40010400 	.word	0x40010400

08002694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	031b      	lsls	r3, r3, #12
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <TIM_OC4_SetConfig+0xa4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_OC4_SetConfig+0x68>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a11      	ldr	r2, [pc, #68]	@ (800273c <TIM_OC4_SetConfig+0xa8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d109      	bne.n	8002710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	40010400 	.word	0x40010400

08002740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2201      	movs	r2, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	431a      	orrs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e05a      	b.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a21      	ldr	r2, [pc, #132]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d01d      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10c      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	40000400 	.word	0x40000400
 8002870:	40000800 	.word	0x40000800
 8002874:	40000c00 	.word	0x40000c00
 8002878:	40010400 	.word	0x40010400
 800287c:	40014000 	.word	0x40014000
 8002880:	40001800 	.word	0x40001800

08002884 <memset>:
 8002884:	4402      	add	r2, r0
 8002886:	4603      	mov	r3, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <strcat>:
 8002894:	b510      	push	{r4, lr}
 8002896:	4602      	mov	r2, r0
 8002898:	7814      	ldrb	r4, [r2, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	3201      	adds	r2, #1
 800289e:	2c00      	cmp	r4, #0
 80028a0:	d1fa      	bne.n	8002898 <strcat+0x4>
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028ac:	2a00      	cmp	r2, #0
 80028ae:	d1f9      	bne.n	80028a4 <strcat+0x10>
 80028b0:	bd10      	pop	{r4, pc}
	...

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4d0d      	ldr	r5, [pc, #52]	@ (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	@ (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2600      	movs	r6, #0
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4d0b      	ldr	r5, [pc, #44]	@ (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	@ (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 f818 	bl	80028fc <_init>
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2600      	movs	r6, #0
 80028d2:	42a6      	cmp	r6, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028dc:	4798      	blx	r3
 80028de:	3601      	adds	r6, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e6:	4798      	blx	r3
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	08002a48 	.word	0x08002a48
 80028f0:	08002a48 	.word	0x08002a48
 80028f4:	08002a48 	.word	0x08002a48
 80028f8:	08002a4c 	.word	0x08002a4c

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
