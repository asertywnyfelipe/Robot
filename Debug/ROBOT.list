
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003f78  08003f78  00004f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004084  08004084  000060f8  2**0
                  CONTENTS
  4 .ARM          00000008  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800408c  0800408c  000060f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800408c  0800408c  0000508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004090  08004090  00005090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08004094  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060f8  2**0
                  CONTENTS
 10 .bss          00000264  200000f8  200000f8  000060f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000035c  2000035c  000060f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f44f  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002590  00000000  00000000  00015577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00017b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  00018978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f3f  00000000  00000000  000194e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001319b  00000000  00000000  0003b424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda01  00000000  00000000  0004e5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bfc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004148  00000000  00000000  0011c004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f60 	.word	0x08003f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08003f60 	.word	0x08003f60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b38      	ldr	r3, [pc, #224]	@ (800065c <MX_GPIO_Init+0xfc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a37      	ldr	r2, [pc, #220]	@ (800065c <MX_GPIO_Init+0xfc>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b35      	ldr	r3, [pc, #212]	@ (800065c <MX_GPIO_Init+0xfc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b31      	ldr	r3, [pc, #196]	@ (800065c <MX_GPIO_Init+0xfc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a30      	ldr	r2, [pc, #192]	@ (800065c <MX_GPIO_Init+0xfc>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b2a      	ldr	r3, [pc, #168]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a29      	ldr	r2, [pc, #164]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b27      	ldr	r3, [pc, #156]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a22      	ldr	r2, [pc, #136]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 41aa 	mov.w	r1, #21760	@ 0x5500
 80005ec:	481c      	ldr	r0, [pc, #112]	@ (8000660 <MX_GPIO_Init+0x100>)
 80005ee:	f001 fa45 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80005f8:	481a      	ldr	r0, [pc, #104]	@ (8000664 <MX_GPIO_Init+0x104>)
 80005fa:	f001 fa3f 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C3_Keyboard_Pin|C2_Keyboard_Pin|C1_Keyboard_Pin;
 80005fe:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000614:	f001 f87e 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin;
 8000618:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <MX_GPIO_Init+0x100>)
 8000632:	f001 f86f 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin;
 8000636:	f44f 531c 	mov.w	r3, #9984	@ 0x2700
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_GPIO_Init+0x104>)
 8000650:	f001 f860 	bl	8001714 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	@ 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400

0800066c <read_keyboard>:

/* USER CODE BEGIN 2 */
char read_keyboard() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_RESET);  // Pull R1 low
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000676:	48b4      	ldr	r0, [pc, #720]	@ (8000948 <read_keyboard+0x2dc>)
 8000678:	f001 fa00 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);    // Pull R2 high
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000682:	48b1      	ldr	r0, [pc, #708]	@ (8000948 <read_keyboard+0x2dc>)
 8000684:	f001 f9fa 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);    // Pull R3 high
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068e:	48ae      	ldr	r0, [pc, #696]	@ (8000948 <read_keyboard+0x2dc>)
 8000690:	f001 f9f4 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);    // Pull R4 high
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069a:	48ab      	ldr	r0, [pc, #684]	@ (8000948 <read_keyboard+0x2dc>)
 800069c:	f001 f9ee 	bl	8001a7c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 80006a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a4:	48a9      	ldr	r0, [pc, #676]	@ (800094c <read_keyboard+0x2e0>)
 80006a6:	f001 f9d1 	bl	8001a4c <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10d      	bne.n	80006cc <read_keyboard+0x60>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));  // Wait till the button is pressed
 80006b0:	bf00      	nop
 80006b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b6:	48a5      	ldr	r0, [pc, #660]	@ (800094c <read_keyboard+0x2e0>)
 80006b8:	f001 f9c8 	bl	8001a4c <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f7      	beq.n	80006b2 <read_keyboard+0x46>
        UART_SendChar('1');  // Send the key through UART
 80006c2:	2031      	movs	r0, #49	@ 0x31
 80006c4:	f000 fd3c 	bl	8001140 <UART_SendChar>
        return '1';
 80006c8:	2331      	movs	r3, #49	@ 0x31
 80006ca:	e13a      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 80006cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d0:	489e      	ldr	r0, [pc, #632]	@ (800094c <read_keyboard+0x2e0>)
 80006d2:	f001 f9bb 	bl	8001a4c <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10d      	bne.n	80006f8 <read_keyboard+0x8c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 80006dc:	bf00      	nop
 80006de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e2:	489a      	ldr	r0, [pc, #616]	@ (800094c <read_keyboard+0x2e0>)
 80006e4:	f001 f9b2 	bl	8001a4c <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f7      	beq.n	80006de <read_keyboard+0x72>
        UART_SendChar('2');
 80006ee:	2032      	movs	r0, #50	@ 0x32
 80006f0:	f000 fd26 	bl	8001140 <UART_SendChar>
        return '2';
 80006f4:	2332      	movs	r3, #50	@ 0x32
 80006f6:	e124      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 80006f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006fc:	4893      	ldr	r0, [pc, #588]	@ (800094c <read_keyboard+0x2e0>)
 80006fe:	f001 f9a5 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10d      	bne.n	8000724 <read_keyboard+0xb8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000708:	bf00      	nop
 800070a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070e:	488f      	ldr	r0, [pc, #572]	@ (800094c <read_keyboard+0x2e0>)
 8000710:	f001 f99c 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f7      	beq.n	800070a <read_keyboard+0x9e>
        UART_SendChar('3');
 800071a:	2033      	movs	r0, #51	@ 0x33
 800071c:	f000 fd10 	bl	8001140 <UART_SendChar>
        return '3';
 8000720:	2333      	movs	r3, #51	@ 0x33
 8000722:	e10e      	b.n	8000942 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	4887      	ldr	r0, [pc, #540]	@ (8000948 <read_keyboard+0x2dc>)
 800072c:	f001 f9a6 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_RESET); // Pull R2 high
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000736:	4884      	ldr	r0, [pc, #528]	@ (8000948 <read_keyboard+0x2dc>)
 8000738:	f001 f9a0 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);   // Pull R3 high
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000742:	4881      	ldr	r0, [pc, #516]	@ (8000948 <read_keyboard+0x2dc>)
 8000744:	f001 f99a 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);   // Pull R4 high
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074e:	487e      	ldr	r0, [pc, #504]	@ (8000948 <read_keyboard+0x2dc>)
 8000750:	f001 f994 	bl	8001a7c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 8000754:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000758:	487c      	ldr	r0, [pc, #496]	@ (800094c <read_keyboard+0x2e0>)
 800075a:	f001 f977 	bl	8001a4c <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10d      	bne.n	8000780 <read_keyboard+0x114>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 8000764:	bf00      	nop
 8000766:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800076a:	4878      	ldr	r0, [pc, #480]	@ (800094c <read_keyboard+0x2e0>)
 800076c:	f001 f96e 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0f7      	beq.n	8000766 <read_keyboard+0xfa>
        UART_SendChar('4');
 8000776:	2034      	movs	r0, #52	@ 0x34
 8000778:	f000 fce2 	bl	8001140 <UART_SendChar>
        return '4';
 800077c:	2334      	movs	r3, #52	@ 0x34
 800077e:	e0e0      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 8000780:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000784:	4871      	ldr	r0, [pc, #452]	@ (800094c <read_keyboard+0x2e0>)
 8000786:	f001 f961 	bl	8001a4c <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10d      	bne.n	80007ac <read_keyboard+0x140>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 8000790:	bf00      	nop
 8000792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000796:	486d      	ldr	r0, [pc, #436]	@ (800094c <read_keyboard+0x2e0>)
 8000798:	f001 f958 	bl	8001a4c <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f7      	beq.n	8000792 <read_keyboard+0x126>
        UART_SendChar('5');
 80007a2:	2035      	movs	r0, #53	@ 0x35
 80007a4:	f000 fccc 	bl	8001140 <UART_SendChar>
        return '5';
 80007a8:	2335      	movs	r3, #53	@ 0x35
 80007aa:	e0ca      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 80007ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b0:	4866      	ldr	r0, [pc, #408]	@ (800094c <read_keyboard+0x2e0>)
 80007b2:	f001 f94b 	bl	8001a4c <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10d      	bne.n	80007d8 <read_keyboard+0x16c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 80007bc:	bf00      	nop
 80007be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c2:	4862      	ldr	r0, [pc, #392]	@ (800094c <read_keyboard+0x2e0>)
 80007c4:	f001 f942 	bl	8001a4c <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f7      	beq.n	80007be <read_keyboard+0x152>
        UART_SendChar('6');
 80007ce:	2036      	movs	r0, #54	@ 0x36
 80007d0:	f000 fcb6 	bl	8001140 <UART_SendChar>
        return '6';
 80007d4:	2336      	movs	r3, #54	@ 0x36
 80007d6:	e0b4      	b.n	8000942 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	485a      	ldr	r0, [pc, #360]	@ (8000948 <read_keyboard+0x2dc>)
 80007e0:	f001 f94c 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);  // Pull R2 high
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ea:	4857      	ldr	r0, [pc, #348]	@ (8000948 <read_keyboard+0x2dc>)
 80007ec:	f001 f946 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_RESET); // Pull R3 high
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f6:	4854      	ldr	r0, [pc, #336]	@ (8000948 <read_keyboard+0x2dc>)
 80007f8:	f001 f940 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);  // Pull R4 high
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	4851      	ldr	r0, [pc, #324]	@ (8000948 <read_keyboard+0x2dc>)
 8000804:	f001 f93a 	bl	8001a7c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 8000808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800080c:	484f      	ldr	r0, [pc, #316]	@ (800094c <read_keyboard+0x2e0>)
 800080e:	f001 f91d 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10d      	bne.n	8000834 <read_keyboard+0x1c8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 8000818:	bf00      	nop
 800081a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800081e:	484b      	ldr	r0, [pc, #300]	@ (800094c <read_keyboard+0x2e0>)
 8000820:	f001 f914 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f7      	beq.n	800081a <read_keyboard+0x1ae>
        UART_SendChar('7');
 800082a:	2037      	movs	r0, #55	@ 0x37
 800082c:	f000 fc88 	bl	8001140 <UART_SendChar>
        return '7';
 8000830:	2337      	movs	r3, #55	@ 0x37
 8000832:	e086      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 8000834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000838:	4844      	ldr	r0, [pc, #272]	@ (800094c <read_keyboard+0x2e0>)
 800083a:	f001 f907 	bl	8001a4c <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10d      	bne.n	8000860 <read_keyboard+0x1f4>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 8000844:	bf00      	nop
 8000846:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800084a:	4840      	ldr	r0, [pc, #256]	@ (800094c <read_keyboard+0x2e0>)
 800084c:	f001 f8fe 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f7      	beq.n	8000846 <read_keyboard+0x1da>
        UART_SendChar('8');
 8000856:	2038      	movs	r0, #56	@ 0x38
 8000858:	f000 fc72 	bl	8001140 <UART_SendChar>
        return '8';
 800085c:	2338      	movs	r3, #56	@ 0x38
 800085e:	e070      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 8000860:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000864:	4839      	ldr	r0, [pc, #228]	@ (800094c <read_keyboard+0x2e0>)
 8000866:	f001 f8f1 	bl	8001a4c <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10d      	bne.n	800088c <read_keyboard+0x220>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000870:	bf00      	nop
 8000872:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000876:	4835      	ldr	r0, [pc, #212]	@ (800094c <read_keyboard+0x2e0>)
 8000878:	f001 f8e8 	bl	8001a4c <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f7      	beq.n	8000872 <read_keyboard+0x206>
        UART_SendChar('9');
 8000882:	2039      	movs	r0, #57	@ 0x39
 8000884:	f000 fc5c 	bl	8001140 <UART_SendChar>
        return '9';
 8000888:	2339      	movs	r3, #57	@ 0x39
 800088a:	e05a      	b.n	8000942 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000892:	482d      	ldr	r0, [pc, #180]	@ (8000948 <read_keyboard+0x2dc>)
 8000894:	f001 f8f2 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);  // Pull R2 high
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089e:	482a      	ldr	r0, [pc, #168]	@ (8000948 <read_keyboard+0x2dc>)
 80008a0:	f001 f8ec 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);  // Pull R3 high
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008aa:	4827      	ldr	r0, [pc, #156]	@ (8000948 <read_keyboard+0x2dc>)
 80008ac:	f001 f8e6 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_RESET); // Pull R4 high
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008b6:	4824      	ldr	r0, [pc, #144]	@ (8000948 <read_keyboard+0x2dc>)
 80008b8:	f001 f8e0 	bl	8001a7c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	4822      	ldr	r0, [pc, #136]	@ (800094c <read_keyboard+0x2e0>)
 80008c2:	f001 f8c3 	bl	8001a4c <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10d      	bne.n	80008e8 <read_keyboard+0x27c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 80008cc:	bf00      	nop
 80008ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d2:	481e      	ldr	r0, [pc, #120]	@ (800094c <read_keyboard+0x2e0>)
 80008d4:	f001 f8ba 	bl	8001a4c <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f7      	beq.n	80008ce <read_keyboard+0x262>
        UART_SendChar('*');
 80008de:	202a      	movs	r0, #42	@ 0x2a
 80008e0:	f000 fc2e 	bl	8001140 <UART_SendChar>
        return '*';
 80008e4:	232a      	movs	r3, #42	@ 0x2a
 80008e6:	e02c      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 80008e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ec:	4817      	ldr	r0, [pc, #92]	@ (800094c <read_keyboard+0x2e0>)
 80008ee:	f001 f8ad 	bl	8001a4c <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10d      	bne.n	8000914 <read_keyboard+0x2a8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 80008f8:	bf00      	nop
 80008fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <read_keyboard+0x2e0>)
 8000900:	f001 f8a4 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f7      	beq.n	80008fa <read_keyboard+0x28e>
        UART_SendChar('0');
 800090a:	2030      	movs	r0, #48	@ 0x30
 800090c:	f000 fc18 	bl	8001140 <UART_SendChar>
        return '0';
 8000910:	2330      	movs	r3, #48	@ 0x30
 8000912:	e016      	b.n	8000942 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 8000914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <read_keyboard+0x2e0>)
 800091a:	f001 f897 	bl	8001a4c <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10d      	bne.n	8000940 <read_keyboard+0x2d4>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000924:	bf00      	nop
 8000926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092a:	4808      	ldr	r0, [pc, #32]	@ (800094c <read_keyboard+0x2e0>)
 800092c:	f001 f88e 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0f7      	beq.n	8000926 <read_keyboard+0x2ba>
        UART_SendChar('#');
 8000936:	2023      	movs	r0, #35	@ 0x23
 8000938:	f000 fc02 	bl	8001140 <UART_SendChar>
        return '#';
 800093c:	2323      	movs	r3, #35	@ 0x23
 800093e:	e000      	b.n	8000942 <read_keyboard+0x2d6>
    }

    return 'X';
 8000940:	2358      	movs	r3, #88	@ 0x58
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020400 	.word	0x40020400

08000950 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000956:	4a11      	ldr	r2, [pc, #68]	@ (800099c <MX_I2C1_Init+0x4c>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_I2C1_Init+0x48>)
 800095c:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_I2C1_Init+0x48>)
 800096e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <MX_I2C1_Init+0x48>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <MX_I2C1_Init+0x48>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <MX_I2C1_Init+0x48>)
 800098e:	f001 f88f 	bl	8001ab0 <HAL_I2C_Init>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000114 	.word	0x20000114
 800099c:	40005400 	.word	0x40005400
 80009a0:	000186a0 	.word	0x000186a0

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f000 fe88 	bl	8001714 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	@ 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000a4e:	2028      	movs	r0, #40	@ 0x28
 8000a50:	f000 fc98 	bl	8001384 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	2130      	movs	r1, #48	@ 0x30
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f829 	bl	8000ab4 <lcd_write>
	HAL_Delay(5);
 8000a62:	2005      	movs	r0, #5
 8000a64:	f000 fc8e 	bl	8001384 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	2130      	movs	r1, #48	@ 0x30
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f81f 	bl	8000ab4 <lcd_write>
	HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 fc84 	bl	8001384 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	2130      	movs	r1, #48	@ 0x30
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f815 	bl	8000ab4 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f80e 	bl	8000ab4 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	7bfa      	ldrb	r2, [r7, #15]
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f807 	bl	8000ab4 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f89f 	bl	8000bea <lcd_clear>

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	71bb      	strb	r3, [r7, #6]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	f023 030f 	bic.w	r3, r3, #15
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	797b      	ldrb	r3, [r7, #5]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000adc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	b25a      	sxtb	r2, r3
 8000b0c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	b299      	uxth	r1, r3
 8000b1c:	f107 020c 	add.w	r2, r7, #12
 8000b20:	2364      	movs	r3, #100	@ 0x64
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2304      	movs	r3, #4
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <lcd_write+0x88>)
 8000b28:	f001 f906 	bl	8001d38 <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f000 fc29 	bl	8001384 <HAL_Delay>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000114 	.word	0x20000114

08000b40 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f843 	bl	8000bea <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ffa1 	bl	8000ab4 <lcd_write>
	while(lcd->f_line[i])
 8000b72:	e00f      	b.n	8000b94 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7818      	ldrb	r0, [r3, #0]
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	7859      	ldrb	r1, [r3, #1]
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f7ff ff93 	bl	8000ab4 <lcd_write>
		i++;
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	3301      	adds	r3, #1
 8000b92:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1e9      	bne.n	8000b74 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	21c0      	movs	r1, #192	@ 0xc0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff81 	bl	8000ab4 <lcd_write>
	while(lcd->s_line[i])
 8000bb2:	e00f      	b.n	8000bd4 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7818      	ldrb	r0, [r3, #0]
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	7d19      	ldrb	r1, [r3, #20]
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f7ff ff73 	bl	8000ab4 <lcd_write>
		i++;
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	7d1b      	ldrb	r3, [r3, #20]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1e9      	bne.n	8000bb4 <lcd_display+0x74>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000c00:	2308      	movs	r3, #8
 8000c02:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff51 	bl	8000ab4 <lcd_write>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <DisplayMenu>:
/* USER CODE BEGIN 1 */
/* Tutaj możesz dodać swoje funkcje, które nie będą nadpisywane. */

/* Funkcja wyświetlania menu tylko przy zmianie */
void DisplayMenu(bool forceUpdate)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    if (forceUpdate || currentIndex != lastIndex) { // Aktualizuj tylko jeśli się zmieniło
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <DisplayMenu+0x1c>
 8000c2c:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <DisplayMenu+0x98>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <DisplayMenu+0x9c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d038      	beq.n	8000caa <DisplayMenu+0x8e>
        sprintf((char*)disp.f_line, ">%s", currentMenu[currentIndex].name);
 8000c38:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <DisplayMenu+0xa0>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <DisplayMenu+0x98>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	440b      	add	r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	491b      	ldr	r1, [pc, #108]	@ (8000cc0 <DisplayMenu+0xa4>)
 8000c52:	481c      	ldr	r0, [pc, #112]	@ (8000cc4 <DisplayMenu+0xa8>)
 8000c54:	f002 fcec 	bl	8003630 <siprintf>
        if (currentMenu[currentIndex + 1].name) {
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <DisplayMenu+0xa0>)
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <DisplayMenu+0x98>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d010      	beq.n	8000c94 <DisplayMenu+0x78>
            sprintf((char*)disp.s_line, "%s", currentMenu[currentIndex + 1].name);
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <DisplayMenu+0xa0>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <DisplayMenu+0x98>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	490f      	ldr	r1, [pc, #60]	@ (8000cc8 <DisplayMenu+0xac>)
 8000c8c:	480f      	ldr	r0, [pc, #60]	@ (8000ccc <DisplayMenu+0xb0>)
 8000c8e:	f002 fccf 	bl	8003630 <siprintf>
 8000c92:	e003      	b.n	8000c9c <DisplayMenu+0x80>
        } else {
            sprintf((char*)disp.s_line, " ");
 8000c94:	490e      	ldr	r1, [pc, #56]	@ (8000cd0 <DisplayMenu+0xb4>)
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <DisplayMenu+0xb0>)
 8000c98:	f002 fcca 	bl	8003630 <siprintf>
        }
        lcd_display(&disp);
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <DisplayMenu+0xb8>)
 8000c9e:	f7ff ff4f 	bl	8000b40 <lcd_display>
        lastIndex = currentIndex; // Zapisz nową pozycję
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <DisplayMenu+0x98>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <DisplayMenu+0x9c>)
 8000ca8:	6013      	str	r3, [r2, #0]
    }
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000178 	.word	0x20000178
 8000cb8:	20000098 	.word	0x20000098
 8000cbc:	20000094 	.word	0x20000094
 8000cc0:	08003fe0 	.word	0x08003fe0
 8000cc4:	20000001 	.word	0x20000001
 8000cc8:	08003fe4 	.word	0x08003fe4
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	08003fe8 	.word	0x08003fe8
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <HandleMenuInput>:

/* Obsługa klawiszy */
void HandleMenuInput(char input) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
    bool updated = false;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]

    if (input == '8' && currentMenu[currentIndex + 1].name) { // W dół
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b38      	cmp	r3, #56	@ 0x38
 8000cea:	d113      	bne.n	8000d14 <HandleMenuInput+0x3c>
 8000cec:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <HandleMenuInput+0x130>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HandleMenuInput+0x3c>
        currentIndex++;
 8000d06:	4b40      	ldr	r3, [pc, #256]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d0e:	6013      	str	r3, [r2, #0]
        updated = true;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
    if (input == '2' && currentIndex > 0) { // W górę
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b32      	cmp	r3, #50	@ 0x32
 8000d18:	d10a      	bne.n	8000d30 <HandleMenuInput+0x58>
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	dd06      	ble.n	8000d30 <HandleMenuInput+0x58>
        currentIndex--;
 8000d22:	4b39      	ldr	r3, [pc, #228]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4a37      	ldr	r2, [pc, #220]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d2a:	6013      	str	r3, [r2, #0]
        updated = true;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
    }
    if (input == '#') { // Wybór opcji
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b23      	cmp	r3, #35	@ 0x23
 8000d34:	d142      	bne.n	8000dbc <HandleMenuInput+0xe4>
        if (currentMenu[currentIndex].subMenu) {
 8000d36:	4b33      	ldr	r3, [pc, #204]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	440b      	add	r3, r1
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d016      	beq.n	8000d7e <HandleMenuInput+0xa6>
            previousMenu = currentMenu;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <HandleMenuInput+0x134>)
 8000d56:	6013      	str	r3, [r2, #0]
            currentMenu = currentMenu[currentIndex].subMenu;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	460b      	mov	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	440b      	add	r3, r1
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a25      	ldr	r2, [pc, #148]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d70:	6013      	str	r3, [r2, #0]
            currentIndex = 0;
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
            updated = true;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e01e      	b.n	8000dbc <HandleMenuInput+0xe4>
        } else if (currentMenu[currentIndex].action) {
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	440b      	add	r3, r1
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d011      	beq.n	8000dbc <HandleMenuInput+0xe4>
            currentMenu[currentIndex].action();
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HandleMenuInput+0x130>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	4798      	blx	r3
            updated = true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
            DisplayMenu(false);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff31 	bl	8000c1c <DisplayMenu>
            return;
 8000dba:	e01f      	b.n	8000dfc <HandleMenuInput+0x124>
        }
    }
    if (input == '*') { // Powrót
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dc0:	d116      	bne.n	8000df0 <HandleMenuInput+0x118>
        if (previousMenu) {
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HandleMenuInput+0x134>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HandleMenuInput+0x102>
            currentMenu = previousMenu;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HandleMenuInput+0x134>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000dd0:	6013      	str	r3, [r2, #0]
            previousMenu = NULL;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HandleMenuInput+0x134>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e002      	b.n	8000de0 <HandleMenuInput+0x108>
        } else {
            currentMenu = mainMenu; // Resetujemy menu do głównego
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HandleMenuInput+0x12c>)
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <HandleMenuInput+0x138>)
 8000dde:	601a      	str	r2, [r3, #0]
        }
        currentIndex = 0;       // Resetujemy pozycję kursora
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HandleMenuInput+0x130>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
        updated = true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
        DisplayMenu(true); // Odświeżamy menu natychmiast po powrocie
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff ff16 	bl	8000c1c <DisplayMenu>
    }
    if (updated) {
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HandleMenuInput+0x124>
        DisplayMenu(false);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff ff10 	bl	8000c1c <DisplayMenu>
    }
}
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000094 	.word	0x20000094
 8000e08:	20000178 	.word	0x20000178
 8000e0c:	20000174 	.word	0x20000174
 8000e10:	20000058 	.word	0x20000058

08000e14 <editValue>:


void editValue(const char* label, int* value) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    int prevValue = -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	60fb      	str	r3, [r7, #12]
    DisplayMenu(true);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff fef9 	bl	8000c1c <DisplayMenu>

    sprintf((char*)disp.f_line, "%s: %d", label, *value);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4923      	ldr	r1, [pc, #140]	@ (8000ec0 <editValue+0xac>)
 8000e32:	4824      	ldr	r0, [pc, #144]	@ (8000ec4 <editValue+0xb0>)
 8000e34:	f002 fbfc 	bl	8003630 <siprintf>
    sprintf((char*)disp.s_line, "Press # or * to exit");
 8000e38:	4923      	ldr	r1, [pc, #140]	@ (8000ec8 <editValue+0xb4>)
 8000e3a:	4824      	ldr	r0, [pc, #144]	@ (8000ecc <editValue+0xb8>)
 8000e3c:	f002 fbf8 	bl	8003630 <siprintf>
    lcd_display(&disp);
 8000e40:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <editValue+0xbc>)
 8000e42:	f7ff fe7d 	bl	8000b40 <lcd_display>

    while (1) {
        char key = read_keyboard();
 8000e46:	f7ff fc11 	bl	800066c <read_keyboard>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	72fb      	strb	r3, [r7, #11]
        if (key == '#' || key == '*') break; // Wyjście z edycji
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	2b23      	cmp	r3, #35	@ 0x23
 8000e52:	d030      	beq.n	8000eb6 <editValue+0xa2>
 8000e54:	7afb      	ldrb	r3, [r7, #11]
 8000e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e58:	d02d      	beq.n	8000eb6 <editValue+0xa2>

        if (key == '2') (*value)++;  // Zwiększ wartość
 8000e5a:	7afb      	ldrb	r3, [r7, #11]
 8000e5c:	2b32      	cmp	r3, #50	@ 0x32
 8000e5e:	d104      	bne.n	8000e6a <editValue+0x56>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	601a      	str	r2, [r3, #0]
        if (key == '8' && *value > 0) (*value)--;  // Zmniejsz wartość
 8000e6a:	7afb      	ldrb	r3, [r7, #11]
 8000e6c:	2b38      	cmp	r3, #56	@ 0x38
 8000e6e:	d108      	bne.n	8000e82 <editValue+0x6e>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd04      	ble.n	8000e82 <editValue+0x6e>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	601a      	str	r2, [r3, #0]

        if (*value != prevValue) {  // Tylko jeśli wartość się zmieniła
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d010      	beq.n	8000eae <editValue+0x9a>
            sprintf((char*)disp.f_line, "%s: %d", label, *value);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <editValue+0xac>)
 8000e94:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <editValue+0xb0>)
 8000e96:	f002 fbcb 	bl	8003630 <siprintf>
            sprintf((char*)disp.s_line, "Press # or * to exit");
 8000e9a:	490b      	ldr	r1, [pc, #44]	@ (8000ec8 <editValue+0xb4>)
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <editValue+0xb8>)
 8000e9e:	f002 fbc7 	bl	8003630 <siprintf>
            lcd_display(&disp);
 8000ea2:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <editValue+0xbc>)
 8000ea4:	f7ff fe4c 	bl	8000b40 <lcd_display>
            prevValue = *value;  // Aktualizujemy poprzednią wartość
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
        }

        HAL_Delay(200);  // Krótkie opóźnienie
 8000eae:	20c8      	movs	r0, #200	@ 0xc8
 8000eb0:	f000 fa68 	bl	8001384 <HAL_Delay>
    while (1) {
 8000eb4:	e7c7      	b.n	8000e46 <editValue+0x32>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	08003fec 	.word	0x08003fec
 8000ec4:	20000001 	.word	0x20000001
 8000ec8:	08003ff4 	.word	0x08003ff4
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <actionSpeed>:

/* Funkcje edycji dla poszczególnych zmiennych */
void actionSpeed() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    editValue("Speed", &speed);
 8000ed8:	4902      	ldr	r1, [pc, #8]	@ (8000ee4 <actionSpeed+0x10>)
 8000eda:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <actionSpeed+0x14>)
 8000edc:	f7ff ff9a 	bl	8000e14 <editValue>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000168 	.word	0x20000168
 8000ee8:	08003f78 	.word	0x08003f78

08000eec <actionAcceleration>:

void actionAcceleration() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    editValue("Acceleration", &acceleration);
 8000ef0:	4902      	ldr	r1, [pc, #8]	@ (8000efc <actionAcceleration+0x10>)
 8000ef2:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <actionAcceleration+0x14>)
 8000ef4:	f7ff ff8e 	bl	8000e14 <editValue>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	08003f80 	.word	0x08003f80

08000f04 <actionDeceleration>:

void actionDeceleration() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    editValue("Deceleration", &deceleration);
 8000f08:	4902      	ldr	r1, [pc, #8]	@ (8000f14 <actionDeceleration+0x10>)
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <actionDeceleration+0x14>)
 8000f0c:	f7ff ff82 	bl	8000e14 <editValue>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000170 	.word	0x20000170
 8000f18:	08003f90 	.word	0x08003f90

08000f1c <actionViewParameters>:
        HAL_Delay(200);  // Krótkie opóźnienie
    }
}

/* Funkcja wyświetlania parametrów (przykład) */
void actionViewParameters() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
    // Wyświetlamy wartości prędkości tylko raz
    sprintf((char*)disp.f_line, "Speed Left: %d", 10); // robot.MotorLeft.speed);
 8000f22:	220a      	movs	r2, #10
 8000f24:	4914      	ldr	r1, [pc, #80]	@ (8000f78 <actionViewParameters+0x5c>)
 8000f26:	4815      	ldr	r0, [pc, #84]	@ (8000f7c <actionViewParameters+0x60>)
 8000f28:	f002 fb82 	bl	8003630 <siprintf>
    sprintf((char*)disp.s_line, "Speed Right: %d", 15); // robot.MotorRight.speed);
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	4914      	ldr	r1, [pc, #80]	@ (8000f80 <actionViewParameters+0x64>)
 8000f30:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <actionViewParameters+0x68>)
 8000f32:	f002 fb7d 	bl	8003630 <siprintf>
    lcd_display(&disp);
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <actionViewParameters+0x6c>)
 8000f38:	f7ff fe02 	bl	8000b40 <lcd_display>

    while (1) {
        char key = read_keyboard();
 8000f3c:	f7ff fb96 	bl	800066c <read_keyboard>
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
        if (key == '*') {
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f48:	d003      	beq.n	8000f52 <actionViewParameters+0x36>
            break;  // Opuszczamy pętlę
        }
        HAL_Delay(50);  // Krótsze opóźnienie dla lepszej responsywności
 8000f4a:	2032      	movs	r0, #50	@ 0x32
 8000f4c:	f000 fa1a 	bl	8001384 <HAL_Delay>
    while (1) {
 8000f50:	e7f4      	b.n	8000f3c <actionViewParameters+0x20>
            break;  // Opuszczamy pętlę
 8000f52:	bf00      	nop
    }

    // Resetujemy indeks, aby wymusić odświeżenie menu
    lastIndex = -1;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <actionViewParameters+0x70>)
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	601a      	str	r2, [r3, #0]

    // Powrót do menu głównego
    currentMenu = mainMenu;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <actionViewParameters+0x74>)
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <actionViewParameters+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
    currentIndex = 0;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <actionViewParameters+0x7c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

    // Wyświetlenie menu po powrocie
    DisplayMenu(true);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff fe57 	bl	8000c1c <DisplayMenu>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	08004028 	.word	0x08004028
 8000f7c:	20000001 	.word	0x20000001
 8000f80:	08004038 	.word	0x08004038
 8000f84:	20000014 	.word	0x20000014
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	20000094 	.word	0x20000094
 8000f94:	20000058 	.word	0x20000058
 8000f98:	20000178 	.word	0x20000178

08000f9c <main>:
/* USER CODE BEGIN SysInit 0 */
/* Tutaj możesz dodać kod inicjalizacji systemu (np. zegarów, peryferiów), który nie będzie nadpisywany. */
/* USER CODE END SysInit 0 */

/* USER CODE BEGIN Main 0 */
int main(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
    HAL_Init();
 8000fa2:	f000 f97d 	bl	80012a0 <HAL_Init>
  //  SystemClock_Config();
    MX_GPIO_Init();
 8000fa6:	f7ff fadb 	bl	8000560 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000faa:	f7ff fcd1 	bl	8000950 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000fae:	f000 f8d9 	bl	8001164 <MX_USART1_UART_Init>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <main+0x48>)
 8000fb6:	f001 fa4d 	bl	8002454 <HAL_TIM_PWM_Start>

    lcd_init(&disp);
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <main+0x4c>)
 8000fbc:	f7ff fd3a 	bl	8000a34 <lcd_init>
    DisplayMenu(true); // Pierwsze wyświetlenie menu
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fe2b 	bl	8000c1c <DisplayMenu>

    while (1) {
        char input = read_keyboard();
 8000fc6:	f7ff fb51 	bl	800066c <read_keyboard>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
        if (input) {
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <main+0x40>
            HandleMenuInput(input);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe7e 	bl	8000cd8 <HandleMenuInput>
        }
        HAL_Delay(10);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f000 f9d1 	bl	8001384 <HAL_Delay>
    while (1) {
 8000fe2:	e7f0      	b.n	8000fc6 <main+0x2a>
 8000fe4:	20000180 	.word	0x20000180
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <HAL_MspInit+0x4c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_MspInit+0x4c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f957 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <USART1_IRQHandler+0x10>)
 80010a2:	f001 fb9f 	bl	80027e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//
  /* USER CODE END USART1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001c8 	.word	0x200001c8

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f002 fac6 	bl	8003670 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20020000 	.word	0x20020000
 8001110:	00000400 	.word	0x00000400
 8001114:	2000017c 	.word	0x2000017c
 8001118:	20000360 	.word	0x20000360

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <UART_SendChar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

void UART_SendChar(char c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 800114a:	1df9      	adds	r1, r7, #7
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2201      	movs	r2, #1
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <UART_SendChar+0x20>)
 8001154:	f001 fabb 	bl	80026ce <HAL_UART_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001c8 	.word	0x200001c8

08001164 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 800116a:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <MX_USART1_UART_Init+0x44>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 8001170:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119a:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <MX_USART1_UART_Init+0x40>)
 800119c:	f001 fa47 	bl	800262e <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001c8 	.word	0x200001c8
 80011a8:	40011000 	.word	0x40011000

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_UART_MspInit+0x94>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d133      	bne.n	8001236 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001206:	23c0      	movs	r3, #192	@ 0xc0
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <HAL_UART_MspInit+0x9c>)
 8001222:	f000 fa77 	bl	8001714 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2025      	movs	r0, #37	@ 0x25
 800122c:	f000 f9a9 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001230:	2025      	movs	r0, #37	@ 0x25
 8001232:	f000 f9c2 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40011000 	.word	0x40011000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020400 	.word	0x40020400

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001250:	f7ff ff64 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f002 f9ff 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fe8d 	bl	8000f9c <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001290:	08004094 	.word	0x08004094
  ldr r2, =_sbss
 8001294:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001298:	2000035c 	.word	0x2000035c

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f94f 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fe8a 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f967 	bl	80015d6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f92f 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000009c 	.word	0x2000009c
 800133c:	200000a4 	.word	0x200000a4
 8001340:	200000a0 	.word	0x200000a0

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200000a4 	.word	0x200000a4
 8001368:	20000210 	.word	0x20000210

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000210 	.word	0x20000210

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000a4 	.word	0x200000a4

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	@ (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	@ (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff feb6 	bl	800136c <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d008      	beq.n	8001620 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e052      	b.n	80016c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0216 	bic.w	r2, r2, #22
 800162e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800163e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_DMA_Abort+0x62>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0208 	bic.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001670:	e013      	b.n	800169a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001672:	f7ff fe7b 	bl	800136c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b05      	cmp	r3, #5
 800167e:	d90c      	bls.n	800169a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e015      	b.n	80016c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e4      	bne.n	8001672 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	223f      	movs	r2, #63	@ 0x3f
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d004      	beq.n	80016ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00c      	b.n	8001706 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2205      	movs	r2, #5
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e16b      	b.n	8001a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 815a 	bne.w	8001a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80b4 	beq.w	8001a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b60      	ldr	r3, [pc, #384]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a24 <HAL_GPIO_Init+0x310>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02b      	beq.n	800193a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	@ (8001a2c <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	@ (8001a30 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a34 <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x328>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	@ (8001a44 <HAL_GPIO_Init+0x330>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x20a>
 800191a:	2307      	movs	r3, #7
 800191c:	e00e      	b.n	800193c <HAL_GPIO_Init+0x228>
 800191e:	2308      	movs	r3, #8
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001922:	2306      	movs	r3, #6
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x228>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	@ (8001a24 <HAL_GPIO_Init+0x310>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f ae90 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021c00 	.word	0x40021c00
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e12b      	b.n	8001d1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe ff64 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	@ 0x24
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b14:	f000 fc76 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8001b18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a81      	ldr	r2, [pc, #516]	@ (8001d24 <HAL_I2C_Init+0x274>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d807      	bhi.n	8001b34 <HAL_I2C_Init+0x84>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a80      	ldr	r2, [pc, #512]	@ (8001d28 <HAL_I2C_Init+0x278>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e006      	b.n	8001b42 <HAL_I2C_Init+0x92>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a7d      	ldr	r2, [pc, #500]	@ (8001d2c <HAL_I2C_Init+0x27c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0e7      	b.n	8001d1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a78      	ldr	r2, [pc, #480]	@ (8001d30 <HAL_I2C_Init+0x280>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a6a      	ldr	r2, [pc, #424]	@ (8001d24 <HAL_I2C_Init+0x274>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d802      	bhi.n	8001b84 <HAL_I2C_Init+0xd4>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3301      	adds	r3, #1
 8001b82:	e009      	b.n	8001b98 <HAL_I2C_Init+0xe8>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a69      	ldr	r2, [pc, #420]	@ (8001d34 <HAL_I2C_Init+0x284>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	3301      	adds	r3, #1
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001baa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	495c      	ldr	r1, [pc, #368]	@ (8001d24 <HAL_I2C_Init+0x274>)
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	d819      	bhi.n	8001bec <HAL_I2C_Init+0x13c>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e59      	subs	r1, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bcc:	400b      	ands	r3, r1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <HAL_I2C_Init+0x138>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e59      	subs	r1, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be6:	e051      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e04f      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_I2C_Init+0x168>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e012      	b.n	8001c3e <HAL_I2C_Init+0x18e>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e58      	subs	r0, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	0099      	lsls	r1, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Init+0x196>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e022      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10e      	bne.n	8001c6c <HAL_I2C_Init+0x1bc>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e58      	subs	r0, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	440b      	add	r3, r1
 8001c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6a:	e00f      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6911      	ldr	r1, [r2, #16]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68d2      	ldr	r2, [r2, #12]
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	000186a0 	.word	0x000186a0
 8001d28:	001e847f 	.word	0x001e847f
 8001d2c:	003d08ff 	.word	0x003d08ff
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	460b      	mov	r3, r1
 8001d46:	817b      	strh	r3, [r7, #10]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff fb0e 	bl	800136c <HAL_GetTick>
 8001d50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	f040 80e0 	bne.w	8001f20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2319      	movs	r3, #25
 8001d66:	2201      	movs	r2, #1
 8001d68:	4970      	ldr	r1, [pc, #448]	@ (8001f2c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f964 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0d3      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2C_Master_Transmit+0x50>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e0cc      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d007      	beq.n	8001dae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2221      	movs	r2, #33	@ 0x21
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	893a      	ldrh	r2, [r7, #8]
 8001dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a50      	ldr	r2, [pc, #320]	@ (8001f30 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001df0:	8979      	ldrh	r1, [r7, #10]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f89c 	bl	8001f34 <I2C_MasterRequestWrite>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e08d      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e1c:	e066      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	6a39      	ldr	r1, [r7, #32]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fa22 	bl	800226c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d107      	bne.n	8001e46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d11b      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x188>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d017      	beq.n	8001ec0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	6a39      	ldr	r1, [r7, #32]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fa19 	bl	80022fc <I2C_WaitOnBTFFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e01a      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d194      	bne.n	8001e1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	00100002 	.word	0x00100002
 8001f30:	ffff0000 	.word	0xffff0000

08001f34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	460b      	mov	r3, r1
 8001f42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d006      	beq.n	8001f5e <I2C_MasterRequestWrite+0x2a>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d003      	beq.n	8001f5e <I2C_MasterRequestWrite+0x2a>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f5c:	d108      	bne.n	8001f70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e00b      	b.n	8001f88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d107      	bne.n	8001f88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f84f 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fae:	d103      	bne.n	8001fb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e035      	b.n	8002028 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fc4:	d108      	bne.n	8001fd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fc6:	897b      	ldrh	r3, [r7, #10]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	e01b      	b.n	8002010 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd8:	897b      	ldrh	r3, [r7, #10]
 8001fda:	11db      	asrs	r3, r3, #7
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0306 	and.w	r3, r3, #6
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f063 030f 	orn	r3, r3, #15
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	490e      	ldr	r1, [pc, #56]	@ (8002030 <I2C_MasterRequestWrite+0xfc>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f898 	bl	800212c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e010      	b.n	8002028 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4907      	ldr	r1, [pc, #28]	@ (8002034 <I2C_MasterRequestWrite+0x100>)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f888 	bl	800212c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00010008 	.word	0x00010008
 8002034:	00010002 	.word	0x00010002

08002038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002048:	e048      	b.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d044      	beq.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff f98b 	bl	800136c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d139      	bne.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10d      	bne.n	800208e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	43da      	mvns	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4013      	ands	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	e00c      	b.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d116      	bne.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f043 0220 	orr.w	r2, r3, #32
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e023      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4013      	ands	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	e00c      	b.n	800211c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	43da      	mvns	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	429a      	cmp	r2, r3
 8002120:	d093      	beq.n	800204a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800213a:	e071      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214a:	d123      	bne.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800215a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e067      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d041      	beq.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219c:	f7ff f8e6 	bl	800136c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d302      	bcc.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d136      	bne.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d10c      	bne.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	e00b      	b.n	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	43da      	mvns	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e021      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10c      	bne.n	8002244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e00b      	b.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f af6d 	bne.w	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002278:	e034      	b.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f886 	bl	800238c <I2C_IsAcknowledgeFailed>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e034      	b.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d028      	beq.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff f86b 	bl	800136c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11d      	bne.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b2:	2b80      	cmp	r3, #128	@ 0x80
 80022b4:	d016      	beq.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e007      	b.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	2b80      	cmp	r3, #128	@ 0x80
 80022f0:	d1c3      	bne.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002308:	e034      	b.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f83e 	bl	800238c <I2C_IsAcknowledgeFailed>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e034      	b.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d028      	beq.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff f823 	bl	800136c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11d      	bne.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d016      	beq.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e007      	b.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d1c3      	bne.n	800230a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a2:	d11b      	bne.n	80023dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0204 	orr.w	r2, r3, #4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000009c 	.word	0x2000009c

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff0 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08004048 	.word	0x08004048

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffdc 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0b5b      	lsrs	r3, r3, #13
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	@ (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	08004048 	.word	0x08004048

08002454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_TIM_PWM_Start+0x24>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e022      	b.n	80024be <HAL_TIM_PWM_Start+0x6a>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d109      	bne.n	8002492 <HAL_TIM_PWM_Start+0x3e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e015      	b.n	80024be <HAL_TIM_PWM_Start+0x6a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d109      	bne.n	80024ac <HAL_TIM_PWM_Start+0x58>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e008      	b.n	80024be <HAL_TIM_PWM_Start+0x6a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07c      	b.n	80025c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_TIM_PWM_Start+0x82>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024d4:	e013      	b.n	80024fe <HAL_TIM_PWM_Start+0xaa>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d104      	bne.n	80024e6 <HAL_TIM_PWM_Start+0x92>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e4:	e00b      	b.n	80024fe <HAL_TIM_PWM_Start+0xaa>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_PWM_Start+0xa2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f4:	e003      	b.n	80024fe <HAL_TIM_PWM_Start+0xaa>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f86c 	bl	80025e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <HAL_TIM_PWM_Start+0x174>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_PWM_Start+0xcc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_TIM_PWM_Start+0x178>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_TIM_PWM_Start+0xd0>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_TIM_PWM_Start+0xd2>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a22      	ldr	r2, [pc, #136]	@ (80025c8 <HAL_TIM_PWM_Start+0x174>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254c:	d01d      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_TIM_PWM_Start+0x17c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <HAL_TIM_PWM_Start+0x180>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_TIM_PWM_Start+0x184>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	@ (80025cc <HAL_TIM_PWM_Start+0x178>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a18      	ldr	r2, [pc, #96]	@ (80025dc <HAL_TIM_PWM_Start+0x188>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_TIM_PWM_Start+0x136>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <HAL_TIM_PWM_Start+0x18c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b06      	cmp	r3, #6
 800259a:	d010      	beq.n	80025be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	e007      	b.n	80025be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40010400 	.word	0x40010400
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40001800 	.word	0x40001800

080025e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2201      	movs	r2, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e042      	b.n	80026c6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fda9 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2224      	movs	r2, #36	@ 0x24
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002670:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fd68 	bl	8003148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002696:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08a      	sub	sp, #40	@ 0x28
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d175      	bne.n	80027da <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_Transmit+0x2c>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06e      	b.n	80027dc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2221      	movs	r2, #33	@ 0x21
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270c:	f7fe fe2e 	bl	800136c <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002726:	d108      	bne.n	800273a <HAL_UART_Transmit+0x6c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e003      	b.n	8002742 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002742:	e02e      	b.n	80027a2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2200      	movs	r2, #0
 800274c:	2180      	movs	r1, #128	@ 0x80
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb04 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e03a      	b.n	80027dc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	3302      	adds	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e007      	b.n	8002794 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1cb      	bne.n	8002744 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2140      	movs	r1, #64	@ 0x40
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fad0 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e006      	b.n	80027dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0ba      	sub	sp, #232	@ 0xe8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_UART_IRQHandler+0x66>
 8002836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fbc2 	bl	8002fcc <UART_Receive_IT>
      return;
 8002848:	e25b      	b.n	8002d02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800284a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80de 	beq.w	8002a10 <HAL_UART_IRQHandler+0x22c>
 8002854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002864:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80d1 	beq.w	8002a10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_UART_IRQHandler+0xae>
 800287a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_UART_IRQHandler+0xd2>
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_UART_IRQHandler+0xf6>
 80028c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d011      	beq.n	800290a <HAL_UART_IRQHandler+0x126>
 80028e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f043 0208 	orr.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 81f2 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_UART_IRQHandler+0x14e>
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb4d 	bl	8002fcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b40      	cmp	r3, #64	@ 0x40
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_UART_IRQHandler+0x17a>
 8002956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04f      	beq.n	80029fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa55 	bl	8002e0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b40      	cmp	r3, #64	@ 0x40
 8002970:	d141      	bne.n	80029f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800298c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3314      	adds	r3, #20
 800299a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800299e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1d9      	bne.n	8002972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d013      	beq.n	80029ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ca:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc4 <HAL_UART_IRQHandler+0x3e0>)
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fe7b 	bl	80016ce <HAL_DMA_Abort_IT>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029e8:	4610      	mov	r0, r2
 80029ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	e00e      	b.n	8002a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f99e 	bl	8002d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e00a      	b.n	8002a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f99a 	bl	8002d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e006      	b.n	8002a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f996 	bl	8002d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a0a:	e175      	b.n	8002cf8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	bf00      	nop
    return;
 8002a0e:	e173      	b.n	8002cf8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f040 814f 	bne.w	8002cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8148 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8141 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b40      	cmp	r3, #64	@ 0x40
 8002a58:	f040 80b6 	bne.w	8002bc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8145 	beq.w	8002cfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	f080 813e 	bcs.w	8002cfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a92:	f000 8088 	beq.w	8002ba6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1d9      	bne.n	8002a96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3314      	adds	r3, #20
 8002b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e1      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e3      	bne.n	8002b64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fd24 	bl	80015ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8c1 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bc2:	e09b      	b.n	8002cfc <HAL_UART_IRQHandler+0x518>
 8002bc4:	08002ed5 	.word	0x08002ed5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 808e 	beq.w	8002d00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8089 	beq.w	8002d00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e3      	bne.n	8002bee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	623b      	str	r3, [r7, #32]
   return(result);
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3314      	adds	r3, #20
 8002c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e3      	bne.n	8002c26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e3      	bne.n	8002c6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f847 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cb6:	e023      	b.n	8002d00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x4f4>
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f913 	bl	8002efc <UART_Transmit_IT>
    return;
 8002cd6:	e014      	b.n	8002d02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <HAL_UART_IRQHandler+0x51e>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f953 	bl	8002f9c <UART_EndTransmit_IT>
    return;
 8002cf6:	e004      	b.n	8002d02 <HAL_UART_IRQHandler+0x51e>
    return;
 8002cf8:	bf00      	nop
 8002cfa:	e002      	b.n	8002d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d00:	bf00      	nop
  }
}
 8002d02:	37e8      	adds	r7, #232	@ 0xe8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6c:	e03b      	b.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d037      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe faf9 	bl	800136c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e03a      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d023      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b80      	cmp	r3, #128	@ 0x80
 8002da2:	d020      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b40      	cmp	r3, #64	@ 0x40
 8002da8:	d01d      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d116      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f81d 	bl	8002e0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00f      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d0b4      	beq.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b095      	sub	sp, #84	@ 0x54
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e36:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e5      	bne.n	8002e16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e5      	bne.n	8002e4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d119      	bne.n	8002eba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0310 	bic.w	r3, r3, #16
 8002e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea6:	61ba      	str	r2, [r7, #24]
 8002ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ec8:	bf00      	nop
 8002eca:	3754      	adds	r7, #84	@ 0x54
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff ff1e 	bl	8002d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b21      	cmp	r3, #33	@ 0x21
 8002f0e:	d13e      	bne.n	8002f8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f18:	d114      	bne.n	8002f44 <UART_Transmit_IT+0x48>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d110      	bne.n	8002f44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]
 8002f42:	e008      	b.n	8002f56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	1c59      	adds	r1, r3, #1
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6211      	str	r1, [r2, #32]
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4619      	mov	r1, r3
 8002f64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fea3 	bl	8002d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b22      	cmp	r3, #34	@ 0x22
 8002fde:	f040 80ae 	bne.w	800313e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fea:	d117      	bne.n	800301c <UART_Receive_IT+0x50>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d113      	bne.n	800301c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	b29a      	uxth	r2, r3
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	@ 0x28
 800301a:	e026      	b.n	800306a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302e:	d007      	beq.n	8003040 <UART_Receive_IT+0x74>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <UART_Receive_IT+0x82>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e008      	b.n	8003060 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29b      	uxth	r3, r3
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4619      	mov	r1, r3
 8003078:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800307a:	2b00      	cmp	r3, #0
 800307c:	d15d      	bne.n	800313a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0220 	bic.w	r2, r2, #32
 800308c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800309c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d135      	bne.n	8003130 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	613b      	str	r3, [r7, #16]
   return(result);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f023 0310 	bic.w	r3, r3, #16
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	623a      	str	r2, [r7, #32]
 80030ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	69f9      	ldr	r1, [r7, #28]
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b10      	cmp	r3, #16
 800310a:	d10a      	bne.n	8003122 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fe0b 	bl	8002d44 <HAL_UARTEx_RxEventCallback>
 800312e:	e002      	b.n	8003136 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fdf3 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e002      	b.n	8003140 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
  }
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	@ 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800314c:	b0c0      	sub	sp, #256	@ 0x100
 800314e:	af00      	add	r7, sp, #0
 8003150:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003164:	68d9      	ldr	r1, [r3, #12]
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	ea40 0301 	orr.w	r3, r0, r1
 8003170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	431a      	orrs	r2, r3
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	431a      	orrs	r2, r3
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031a0:	f021 010c 	bic.w	r1, r1, #12
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ae:	430b      	orrs	r3, r1
 80031b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c2:	6999      	ldr	r1, [r3, #24]
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	ea40 0301 	orr.w	r3, r0, r1
 80031ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003414 <UART_SetConfig+0x2cc>)
 80031d8:	429a      	cmp	r2, r3
 80031da:	d005      	beq.n	80031e8 <UART_SetConfig+0xa0>
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <UART_SetConfig+0x2d0>)
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d104      	bne.n	80031f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7ff f920 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 80031ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031f0:	e003      	b.n	80031fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031f2:	f7ff f907 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 80031f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003204:	f040 810c 	bne.w	8003420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003212:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800321a:	4622      	mov	r2, r4
 800321c:	462b      	mov	r3, r5
 800321e:	1891      	adds	r1, r2, r2
 8003220:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003222:	415b      	adcs	r3, r3
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800322a:	4621      	mov	r1, r4
 800322c:	eb12 0801 	adds.w	r8, r2, r1
 8003230:	4629      	mov	r1, r5
 8003232:	eb43 0901 	adc.w	r9, r3, r1
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324a:	4690      	mov	r8, r2
 800324c:	4699      	mov	r9, r3
 800324e:	4623      	mov	r3, r4
 8003250:	eb18 0303 	adds.w	r3, r8, r3
 8003254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003258:	462b      	mov	r3, r5
 800325a:	eb49 0303 	adc.w	r3, r9, r3
 800325e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800326e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003276:	460b      	mov	r3, r1
 8003278:	18db      	adds	r3, r3, r3
 800327a:	653b      	str	r3, [r7, #80]	@ 0x50
 800327c:	4613      	mov	r3, r2
 800327e:	eb42 0303 	adc.w	r3, r2, r3
 8003282:	657b      	str	r3, [r7, #84]	@ 0x54
 8003284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800328c:	f7fc fff0 	bl	8000270 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4b61      	ldr	r3, [pc, #388]	@ (800341c <UART_SetConfig+0x2d4>)
 8003296:	fba3 2302 	umull	r2, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	011c      	lsls	r4, r3, #4
 800329e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032b0:	4642      	mov	r2, r8
 80032b2:	464b      	mov	r3, r9
 80032b4:	1891      	adds	r1, r2, r2
 80032b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032b8:	415b      	adcs	r3, r3
 80032ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032c0:	4641      	mov	r1, r8
 80032c2:	eb12 0a01 	adds.w	sl, r2, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	eb43 0b01 	adc.w	fp, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e0:	4692      	mov	sl, r2
 80032e2:	469b      	mov	fp, r3
 80032e4:	4643      	mov	r3, r8
 80032e6:	eb1a 0303 	adds.w	r3, sl, r3
 80032ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ee:	464b      	mov	r3, r9
 80032f0:	eb4b 0303 	adc.w	r3, fp, r3
 80032f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003304:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800330c:	460b      	mov	r3, r1
 800330e:	18db      	adds	r3, r3, r3
 8003310:	643b      	str	r3, [r7, #64]	@ 0x40
 8003312:	4613      	mov	r3, r2
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	647b      	str	r3, [r7, #68]	@ 0x44
 800331a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800331e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003322:	f7fc ffa5 	bl	8000270 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4611      	mov	r1, r2
 800332c:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <UART_SetConfig+0x2d4>)
 800332e:	fba3 2301 	umull	r2, r3, r3, r1
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2264      	movs	r2, #100	@ 0x64
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	1acb      	subs	r3, r1, r3
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003342:	4b36      	ldr	r3, [pc, #216]	@ (800341c <UART_SetConfig+0x2d4>)
 8003344:	fba3 2302 	umull	r2, r3, r3, r2
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003350:	441c      	add	r4, r3
 8003352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800335c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003364:	4642      	mov	r2, r8
 8003366:	464b      	mov	r3, r9
 8003368:	1891      	adds	r1, r2, r2
 800336a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800336c:	415b      	adcs	r3, r3
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003374:	4641      	mov	r1, r8
 8003376:	1851      	adds	r1, r2, r1
 8003378:	6339      	str	r1, [r7, #48]	@ 0x30
 800337a:	4649      	mov	r1, r9
 800337c:	414b      	adcs	r3, r1
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800338c:	4659      	mov	r1, fp
 800338e:	00cb      	lsls	r3, r1, #3
 8003390:	4651      	mov	r1, sl
 8003392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003396:	4651      	mov	r1, sl
 8003398:	00ca      	lsls	r2, r1, #3
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	4642      	mov	r2, r8
 80033a2:	189b      	adds	r3, r3, r2
 80033a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a8:	464b      	mov	r3, r9
 80033aa:	460a      	mov	r2, r1
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033c8:	460b      	mov	r3, r1
 80033ca:	18db      	adds	r3, r3, r3
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ce:	4613      	mov	r3, r2
 80033d0:	eb42 0303 	adc.w	r3, r2, r3
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033de:	f7fc ff47 	bl	8000270 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <UART_SetConfig+0x2d4>)
 80033e8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	2164      	movs	r1, #100	@ 0x64
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	3332      	adds	r3, #50	@ 0x32
 80033fa:	4a08      	ldr	r2, [pc, #32]	@ (800341c <UART_SetConfig+0x2d4>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	f003 0207 	and.w	r2, r3, #7
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4422      	add	r2, r4
 800340e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003410:	e106      	b.n	8003620 <UART_SetConfig+0x4d8>
 8003412:	bf00      	nop
 8003414:	40011000 	.word	0x40011000
 8003418:	40011400 	.word	0x40011400
 800341c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800342a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800342e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003432:	4642      	mov	r2, r8
 8003434:	464b      	mov	r3, r9
 8003436:	1891      	adds	r1, r2, r2
 8003438:	6239      	str	r1, [r7, #32]
 800343a:	415b      	adcs	r3, r3
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
 800343e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003442:	4641      	mov	r1, r8
 8003444:	1854      	adds	r4, r2, r1
 8003446:	4649      	mov	r1, r9
 8003448:	eb43 0501 	adc.w	r5, r3, r1
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	00eb      	lsls	r3, r5, #3
 8003456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800345a:	00e2      	lsls	r2, r4, #3
 800345c:	4614      	mov	r4, r2
 800345e:	461d      	mov	r5, r3
 8003460:	4643      	mov	r3, r8
 8003462:	18e3      	adds	r3, r4, r3
 8003464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003468:	464b      	mov	r3, r9
 800346a:	eb45 0303 	adc.w	r3, r5, r3
 800346e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800347e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800348e:	4629      	mov	r1, r5
 8003490:	008b      	lsls	r3, r1, #2
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003498:	4621      	mov	r1, r4
 800349a:	008a      	lsls	r2, r1, #2
 800349c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034a0:	f7fc fee6 	bl	8000270 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4b60      	ldr	r3, [pc, #384]	@ (800362c <UART_SetConfig+0x4e4>)
 80034aa:	fba3 2302 	umull	r2, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	011c      	lsls	r4, r3, #4
 80034b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	1891      	adds	r1, r2, r2
 80034ca:	61b9      	str	r1, [r7, #24]
 80034cc:	415b      	adcs	r3, r3
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d4:	4641      	mov	r1, r8
 80034d6:	1851      	adds	r1, r2, r1
 80034d8:	6139      	str	r1, [r7, #16]
 80034da:	4649      	mov	r1, r9
 80034dc:	414b      	adcs	r3, r1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ec:	4659      	mov	r1, fp
 80034ee:	00cb      	lsls	r3, r1, #3
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f6:	4651      	mov	r1, sl
 80034f8:	00ca      	lsls	r2, r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	4642      	mov	r2, r8
 8003502:	189b      	adds	r3, r3, r2
 8003504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003508:	464b      	mov	r3, r9
 800350a:	460a      	mov	r2, r1
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800351e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800352c:	4649      	mov	r1, r9
 800352e:	008b      	lsls	r3, r1, #2
 8003530:	4641      	mov	r1, r8
 8003532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003536:	4641      	mov	r1, r8
 8003538:	008a      	lsls	r2, r1, #2
 800353a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800353e:	f7fc fe97 	bl	8000270 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4611      	mov	r1, r2
 8003548:	4b38      	ldr	r3, [pc, #224]	@ (800362c <UART_SetConfig+0x4e4>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	@ 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	@ 0x32
 800355c:	4a33      	ldr	r2, [pc, #204]	@ (800362c <UART_SetConfig+0x4e4>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003568:	441c      	add	r4, r3
 800356a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800356e:	2200      	movs	r2, #0
 8003570:	673b      	str	r3, [r7, #112]	@ 0x70
 8003572:	677a      	str	r2, [r7, #116]	@ 0x74
 8003574:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	1891      	adds	r1, r2, r2
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	415b      	adcs	r3, r3
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003588:	4641      	mov	r1, r8
 800358a:	1851      	adds	r1, r2, r1
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	4649      	mov	r1, r9
 8003590:	414b      	adcs	r3, r1
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035a0:	4659      	mov	r1, fp
 80035a2:	00cb      	lsls	r3, r1, #3
 80035a4:	4651      	mov	r1, sl
 80035a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035aa:	4651      	mov	r1, sl
 80035ac:	00ca      	lsls	r2, r1, #3
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	4642      	mov	r2, r8
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ba:	464b      	mov	r3, r9
 80035bc:	460a      	mov	r2, r1
 80035be:	eb42 0303 	adc.w	r3, r2, r3
 80035c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035dc:	4649      	mov	r1, r9
 80035de:	008b      	lsls	r3, r1, #2
 80035e0:	4641      	mov	r1, r8
 80035e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e6:	4641      	mov	r1, r8
 80035e8:	008a      	lsls	r2, r1, #2
 80035ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ee:	f7fc fe3f 	bl	8000270 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <UART_SetConfig+0x4e4>)
 80035f8:	fba3 1302 	umull	r1, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2164      	movs	r1, #100	@ 0x64
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	3332      	adds	r3, #50	@ 0x32
 800360a:	4a08      	ldr	r2, [pc, #32]	@ (800362c <UART_SetConfig+0x4e4>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4422      	add	r2, r4
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362c:	51eb851f 	.word	0x51eb851f

08003630 <siprintf>:
 8003630:	b40e      	push	{r1, r2, r3}
 8003632:	b500      	push	{lr}
 8003634:	b09c      	sub	sp, #112	@ 0x70
 8003636:	ab1d      	add	r3, sp, #116	@ 0x74
 8003638:	9002      	str	r0, [sp, #8]
 800363a:	9006      	str	r0, [sp, #24]
 800363c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003640:	4809      	ldr	r0, [pc, #36]	@ (8003668 <siprintf+0x38>)
 8003642:	9107      	str	r1, [sp, #28]
 8003644:	9104      	str	r1, [sp, #16]
 8003646:	4909      	ldr	r1, [pc, #36]	@ (800366c <siprintf+0x3c>)
 8003648:	f853 2b04 	ldr.w	r2, [r3], #4
 800364c:	9105      	str	r1, [sp, #20]
 800364e:	6800      	ldr	r0, [r0, #0]
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	a902      	add	r1, sp, #8
 8003654:	f000 f98c 	bl	8003970 <_svfiprintf_r>
 8003658:	9b02      	ldr	r3, [sp, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	b01c      	add	sp, #112	@ 0x70
 8003660:	f85d eb04 	ldr.w	lr, [sp], #4
 8003664:	b003      	add	sp, #12
 8003666:	4770      	bx	lr
 8003668:	200000a8 	.word	0x200000a8
 800366c:	ffff0208 	.word	0xffff0208

08003670 <__errno>:
 8003670:	4b01      	ldr	r3, [pc, #4]	@ (8003678 <__errno+0x8>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	200000a8 	.word	0x200000a8

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	4d0d      	ldr	r5, [pc, #52]	@ (80036b4 <__libc_init_array+0x38>)
 8003680:	4c0d      	ldr	r4, [pc, #52]	@ (80036b8 <__libc_init_array+0x3c>)
 8003682:	1b64      	subs	r4, r4, r5
 8003684:	10a4      	asrs	r4, r4, #2
 8003686:	2600      	movs	r6, #0
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	4d0b      	ldr	r5, [pc, #44]	@ (80036bc <__libc_init_array+0x40>)
 800368e:	4c0c      	ldr	r4, [pc, #48]	@ (80036c0 <__libc_init_array+0x44>)
 8003690:	f000 fc66 	bl	8003f60 <_init>
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	2600      	movs	r6, #0
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	0800408c 	.word	0x0800408c
 80036b8:	0800408c 	.word	0x0800408c
 80036bc:	0800408c 	.word	0x0800408c
 80036c0:	08004090 	.word	0x08004090

080036c4 <__retarget_lock_acquire_recursive>:
 80036c4:	4770      	bx	lr

080036c6 <__retarget_lock_release_recursive>:
 80036c6:	4770      	bx	lr

080036c8 <_free_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d041      	beq.n	8003754 <_free_r+0x8c>
 80036d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfb8      	it	lt
 80036da:	18e4      	addlt	r4, r4, r3
 80036dc:	f000 f8e0 	bl	80038a0 <__malloc_lock>
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <_free_r+0x90>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	b933      	cbnz	r3, 80036f4 <_free_r+0x2c>
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	6014      	str	r4, [r2, #0]
 80036ea:	4628      	mov	r0, r5
 80036ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f0:	f000 b8dc 	b.w	80038ac <__malloc_unlock>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d908      	bls.n	800370a <_free_r+0x42>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	1821      	adds	r1, r4, r0
 80036fc:	428b      	cmp	r3, r1
 80036fe:	bf01      	itttt	eq
 8003700:	6819      	ldreq	r1, [r3, #0]
 8003702:	685b      	ldreq	r3, [r3, #4]
 8003704:	1809      	addeq	r1, r1, r0
 8003706:	6021      	streq	r1, [r4, #0]
 8003708:	e7ed      	b.n	80036e6 <_free_r+0x1e>
 800370a:	461a      	mov	r2, r3
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	b10b      	cbz	r3, 8003714 <_free_r+0x4c>
 8003710:	42a3      	cmp	r3, r4
 8003712:	d9fa      	bls.n	800370a <_free_r+0x42>
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	1850      	adds	r0, r2, r1
 8003718:	42a0      	cmp	r0, r4
 800371a:	d10b      	bne.n	8003734 <_free_r+0x6c>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	4401      	add	r1, r0
 8003720:	1850      	adds	r0, r2, r1
 8003722:	4283      	cmp	r3, r0
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	d1e0      	bne.n	80036ea <_free_r+0x22>
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	4408      	add	r0, r1
 8003730:	6010      	str	r0, [r2, #0]
 8003732:	e7da      	b.n	80036ea <_free_r+0x22>
 8003734:	d902      	bls.n	800373c <_free_r+0x74>
 8003736:	230c      	movs	r3, #12
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	e7d6      	b.n	80036ea <_free_r+0x22>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	1821      	adds	r1, r4, r0
 8003740:	428b      	cmp	r3, r1
 8003742:	bf04      	itt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	6063      	str	r3, [r4, #4]
 800374a:	bf04      	itt	eq
 800374c:	1809      	addeq	r1, r1, r0
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	6054      	str	r4, [r2, #4]
 8003752:	e7ca      	b.n	80036ea <_free_r+0x22>
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	bf00      	nop
 8003758:	20000358 	.word	0x20000358

0800375c <sbrk_aligned>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0f      	ldr	r6, [pc, #60]	@ (800379c <sbrk_aligned+0x40>)
 8003760:	460c      	mov	r4, r1
 8003762:	6831      	ldr	r1, [r6, #0]
 8003764:	4605      	mov	r5, r0
 8003766:	b911      	cbnz	r1, 800376e <sbrk_aligned+0x12>
 8003768:	f000 fba6 	bl	8003eb8 <_sbrk_r>
 800376c:	6030      	str	r0, [r6, #0]
 800376e:	4621      	mov	r1, r4
 8003770:	4628      	mov	r0, r5
 8003772:	f000 fba1 	bl	8003eb8 <_sbrk_r>
 8003776:	1c43      	adds	r3, r0, #1
 8003778:	d103      	bne.n	8003782 <sbrk_aligned+0x26>
 800377a:	f04f 34ff 	mov.w	r4, #4294967295
 800377e:	4620      	mov	r0, r4
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	1cc4      	adds	r4, r0, #3
 8003784:	f024 0403 	bic.w	r4, r4, #3
 8003788:	42a0      	cmp	r0, r4
 800378a:	d0f8      	beq.n	800377e <sbrk_aligned+0x22>
 800378c:	1a21      	subs	r1, r4, r0
 800378e:	4628      	mov	r0, r5
 8003790:	f000 fb92 	bl	8003eb8 <_sbrk_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d1f2      	bne.n	800377e <sbrk_aligned+0x22>
 8003798:	e7ef      	b.n	800377a <sbrk_aligned+0x1e>
 800379a:	bf00      	nop
 800379c:	20000354 	.word	0x20000354

080037a0 <_malloc_r>:
 80037a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	1ccd      	adds	r5, r1, #3
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	4606      	mov	r6, r0
 80037b6:	db01      	blt.n	80037bc <_malloc_r+0x1c>
 80037b8:	42a9      	cmp	r1, r5
 80037ba:	d904      	bls.n	80037c6 <_malloc_r+0x26>
 80037bc:	230c      	movs	r3, #12
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	2000      	movs	r0, #0
 80037c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800389c <_malloc_r+0xfc>
 80037ca:	f000 f869 	bl	80038a0 <__malloc_lock>
 80037ce:	f8d8 3000 	ldr.w	r3, [r8]
 80037d2:	461c      	mov	r4, r3
 80037d4:	bb44      	cbnz	r4, 8003828 <_malloc_r+0x88>
 80037d6:	4629      	mov	r1, r5
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff ffbf 	bl	800375c <sbrk_aligned>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	4604      	mov	r4, r0
 80037e2:	d158      	bne.n	8003896 <_malloc_r+0xf6>
 80037e4:	f8d8 4000 	ldr.w	r4, [r8]
 80037e8:	4627      	mov	r7, r4
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	d143      	bne.n	8003876 <_malloc_r+0xd6>
 80037ee:	2c00      	cmp	r4, #0
 80037f0:	d04b      	beq.n	800388a <_malloc_r+0xea>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	4639      	mov	r1, r7
 80037f6:	4630      	mov	r0, r6
 80037f8:	eb04 0903 	add.w	r9, r4, r3
 80037fc:	f000 fb5c 	bl	8003eb8 <_sbrk_r>
 8003800:	4581      	cmp	r9, r0
 8003802:	d142      	bne.n	800388a <_malloc_r+0xea>
 8003804:	6821      	ldr	r1, [r4, #0]
 8003806:	1a6d      	subs	r5, r5, r1
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff ffa6 	bl	800375c <sbrk_aligned>
 8003810:	3001      	adds	r0, #1
 8003812:	d03a      	beq.n	800388a <_malloc_r+0xea>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	442b      	add	r3, r5
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	f8d8 3000 	ldr.w	r3, [r8]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	bb62      	cbnz	r2, 800387c <_malloc_r+0xdc>
 8003822:	f8c8 7000 	str.w	r7, [r8]
 8003826:	e00f      	b.n	8003848 <_malloc_r+0xa8>
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	1b52      	subs	r2, r2, r5
 800382c:	d420      	bmi.n	8003870 <_malloc_r+0xd0>
 800382e:	2a0b      	cmp	r2, #11
 8003830:	d917      	bls.n	8003862 <_malloc_r+0xc2>
 8003832:	1961      	adds	r1, r4, r5
 8003834:	42a3      	cmp	r3, r4
 8003836:	6025      	str	r5, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	6059      	strne	r1, [r3, #4]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	bf08      	it	eq
 8003840:	f8c8 1000 	streq.w	r1, [r8]
 8003844:	5162      	str	r2, [r4, r5]
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f82f 	bl	80038ac <__malloc_unlock>
 800384e:	f104 000b 	add.w	r0, r4, #11
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	f020 0007 	bic.w	r0, r0, #7
 8003858:	1ac2      	subs	r2, r0, r3
 800385a:	bf1c      	itt	ne
 800385c:	1a1b      	subne	r3, r3, r0
 800385e:	50a3      	strne	r3, [r4, r2]
 8003860:	e7af      	b.n	80037c2 <_malloc_r+0x22>
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	42a3      	cmp	r3, r4
 8003866:	bf0c      	ite	eq
 8003868:	f8c8 2000 	streq.w	r2, [r8]
 800386c:	605a      	strne	r2, [r3, #4]
 800386e:	e7eb      	b.n	8003848 <_malloc_r+0xa8>
 8003870:	4623      	mov	r3, r4
 8003872:	6864      	ldr	r4, [r4, #4]
 8003874:	e7ae      	b.n	80037d4 <_malloc_r+0x34>
 8003876:	463c      	mov	r4, r7
 8003878:	687f      	ldr	r7, [r7, #4]
 800387a:	e7b6      	b.n	80037ea <_malloc_r+0x4a>
 800387c:	461a      	mov	r2, r3
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	42a3      	cmp	r3, r4
 8003882:	d1fb      	bne.n	800387c <_malloc_r+0xdc>
 8003884:	2300      	movs	r3, #0
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e7de      	b.n	8003848 <_malloc_r+0xa8>
 800388a:	230c      	movs	r3, #12
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f80c 	bl	80038ac <__malloc_unlock>
 8003894:	e794      	b.n	80037c0 <_malloc_r+0x20>
 8003896:	6005      	str	r5, [r0, #0]
 8003898:	e7d6      	b.n	8003848 <_malloc_r+0xa8>
 800389a:	bf00      	nop
 800389c:	20000358 	.word	0x20000358

080038a0 <__malloc_lock>:
 80038a0:	4801      	ldr	r0, [pc, #4]	@ (80038a8 <__malloc_lock+0x8>)
 80038a2:	f7ff bf0f 	b.w	80036c4 <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000350 	.word	0x20000350

080038ac <__malloc_unlock>:
 80038ac:	4801      	ldr	r0, [pc, #4]	@ (80038b4 <__malloc_unlock+0x8>)
 80038ae:	f7ff bf0a 	b.w	80036c6 <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000350 	.word	0x20000350

080038b8 <__ssputs_r>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	688e      	ldr	r6, [r1, #8]
 80038be:	461f      	mov	r7, r3
 80038c0:	42be      	cmp	r6, r7
 80038c2:	680b      	ldr	r3, [r1, #0]
 80038c4:	4682      	mov	sl, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4690      	mov	r8, r2
 80038ca:	d82d      	bhi.n	8003928 <__ssputs_r+0x70>
 80038cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038d4:	d026      	beq.n	8003924 <__ssputs_r+0x6c>
 80038d6:	6965      	ldr	r5, [r4, #20]
 80038d8:	6909      	ldr	r1, [r1, #16]
 80038da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038de:	eba3 0901 	sub.w	r9, r3, r1
 80038e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e6:	1c7b      	adds	r3, r7, #1
 80038e8:	444b      	add	r3, r9
 80038ea:	106d      	asrs	r5, r5, #1
 80038ec:	429d      	cmp	r5, r3
 80038ee:	bf38      	it	cc
 80038f0:	461d      	movcc	r5, r3
 80038f2:	0553      	lsls	r3, r2, #21
 80038f4:	d527      	bpl.n	8003946 <__ssputs_r+0x8e>
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7ff ff52 	bl	80037a0 <_malloc_r>
 80038fc:	4606      	mov	r6, r0
 80038fe:	b360      	cbz	r0, 800395a <__ssputs_r+0xa2>
 8003900:	6921      	ldr	r1, [r4, #16]
 8003902:	464a      	mov	r2, r9
 8003904:	f000 fae8 	bl	8003ed8 <memcpy>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	6126      	str	r6, [r4, #16]
 8003916:	6165      	str	r5, [r4, #20]
 8003918:	444e      	add	r6, r9
 800391a:	eba5 0509 	sub.w	r5, r5, r9
 800391e:	6026      	str	r6, [r4, #0]
 8003920:	60a5      	str	r5, [r4, #8]
 8003922:	463e      	mov	r6, r7
 8003924:	42be      	cmp	r6, r7
 8003926:	d900      	bls.n	800392a <__ssputs_r+0x72>
 8003928:	463e      	mov	r6, r7
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	4632      	mov	r2, r6
 800392e:	4641      	mov	r1, r8
 8003930:	f000 faa8 	bl	8003e84 <memmove>
 8003934:	68a3      	ldr	r3, [r4, #8]
 8003936:	1b9b      	subs	r3, r3, r6
 8003938:	60a3      	str	r3, [r4, #8]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	4433      	add	r3, r6
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	2000      	movs	r0, #0
 8003942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003946:	462a      	mov	r2, r5
 8003948:	f000 fad4 	bl	8003ef4 <_realloc_r>
 800394c:	4606      	mov	r6, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	d1e0      	bne.n	8003914 <__ssputs_r+0x5c>
 8003952:	6921      	ldr	r1, [r4, #16]
 8003954:	4650      	mov	r0, sl
 8003956:	f7ff feb7 	bl	80036c8 <_free_r>
 800395a:	230c      	movs	r3, #12
 800395c:	f8ca 3000 	str.w	r3, [sl]
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	81a3      	strh	r3, [r4, #12]
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	e7e9      	b.n	8003942 <__ssputs_r+0x8a>
	...

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	b09d      	sub	sp, #116	@ 0x74
 800397c:	4607      	mov	r7, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
 8003982:	d510      	bpl.n	80039a6 <_svfiprintf_r+0x36>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b973      	cbnz	r3, 80039a6 <_svfiprintf_r+0x36>
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	f7ff ff09 	bl	80037a0 <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b930      	cbnz	r0, 80039a2 <_svfiprintf_r+0x32>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	b01d      	add	sp, #116	@ 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	2340      	movs	r3, #64	@ 0x40
 80039a4:	616b      	str	r3, [r5, #20]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039aa:	2320      	movs	r3, #32
 80039ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b4:	2330      	movs	r3, #48	@ 0x30
 80039b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b54 <_svfiprintf_r+0x1e4>
 80039ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039be:	f04f 0901 	mov.w	r9, #1
 80039c2:	4623      	mov	r3, r4
 80039c4:	469a      	mov	sl, r3
 80039c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ca:	b10a      	cbz	r2, 80039d0 <_svfiprintf_r+0x60>
 80039cc:	2a25      	cmp	r2, #37	@ 0x25
 80039ce:	d1f9      	bne.n	80039c4 <_svfiprintf_r+0x54>
 80039d0:	ebba 0b04 	subs.w	fp, sl, r4
 80039d4:	d00b      	beq.n	80039ee <_svfiprintf_r+0x7e>
 80039d6:	465b      	mov	r3, fp
 80039d8:	4622      	mov	r2, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff6b 	bl	80038b8 <__ssputs_r>
 80039e2:	3001      	adds	r0, #1
 80039e4:	f000 80a7 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039ea:	445a      	add	r2, fp
 80039ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 809f 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295
 80039fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a02:	f10a 0a01 	add.w	sl, sl, #1
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	9307      	str	r3, [sp, #28]
 8003a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a10:	4654      	mov	r4, sl
 8003a12:	2205      	movs	r2, #5
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	484e      	ldr	r0, [pc, #312]	@ (8003b54 <_svfiprintf_r+0x1e4>)
 8003a1a:	f7fc fbd9 	bl	80001d0 <memchr>
 8003a1e:	9a04      	ldr	r2, [sp, #16]
 8003a20:	b9d8      	cbnz	r0, 8003a5a <_svfiprintf_r+0xea>
 8003a22:	06d0      	lsls	r0, r2, #27
 8003a24:	bf44      	itt	mi
 8003a26:	2320      	movmi	r3, #32
 8003a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a2c:	0711      	lsls	r1, r2, #28
 8003a2e:	bf44      	itt	mi
 8003a30:	232b      	movmi	r3, #43	@ 0x2b
 8003a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a36:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a3c:	d015      	beq.n	8003a6a <_svfiprintf_r+0xfa>
 8003a3e:	9a07      	ldr	r2, [sp, #28]
 8003a40:	4654      	mov	r4, sl
 8003a42:	2000      	movs	r0, #0
 8003a44:	f04f 0c0a 	mov.w	ip, #10
 8003a48:	4621      	mov	r1, r4
 8003a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4e:	3b30      	subs	r3, #48	@ 0x30
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d94b      	bls.n	8003aec <_svfiprintf_r+0x17c>
 8003a54:	b1b0      	cbz	r0, 8003a84 <_svfiprintf_r+0x114>
 8003a56:	9207      	str	r2, [sp, #28]
 8003a58:	e014      	b.n	8003a84 <_svfiprintf_r+0x114>
 8003a5a:	eba0 0308 	sub.w	r3, r0, r8
 8003a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	46a2      	mov	sl, r4
 8003a68:	e7d2      	b.n	8003a10 <_svfiprintf_r+0xa0>
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	9103      	str	r1, [sp, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfbb      	ittet	lt
 8003a76:	425b      	neglt	r3, r3
 8003a78:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7c:	9307      	strge	r3, [sp, #28]
 8003a7e:	9307      	strlt	r3, [sp, #28]
 8003a80:	bfb8      	it	lt
 8003a82:	9204      	strlt	r2, [sp, #16]
 8003a84:	7823      	ldrb	r3, [r4, #0]
 8003a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a88:	d10a      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a8a:	7863      	ldrb	r3, [r4, #1]
 8003a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8e:	d132      	bne.n	8003af6 <_svfiprintf_r+0x186>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b64 <_svfiprintf_r+0x1f4>
 8003aa4:	7821      	ldrb	r1, [r4, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f7fc fb91 	bl	80001d0 <memchr>
 8003aae:	b138      	cbz	r0, 8003ac0 <_svfiprintf_r+0x150>
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	4082      	lsls	r2, r0
 8003aba:	4313      	orrs	r3, r2
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4824      	ldr	r0, [pc, #144]	@ (8003b58 <_svfiprintf_r+0x1e8>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb80 	bl	80001d0 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d036      	beq.n	8003b42 <_svfiprintf_r+0x1d2>
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <_svfiprintf_r+0x1ec>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_svfiprintf_r+0x1b0>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae6:	4433      	add	r3, r6
 8003ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aea:	e76a      	b.n	80039c2 <_svfiprintf_r+0x52>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a8      	b.n	8003a48 <_svfiprintf_r+0xd8>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	@ 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_svfiprintf_r+0x1a6>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c6      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c4      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_svfiprintf_r+0x192>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f3af 8000 	nop.w
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	4606      	mov	r6, r0
 8003b34:	d1d6      	bne.n	8003ae4 <_svfiprintf_r+0x174>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af2d 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b40:	e72c      	b.n	800399c <_svfiprintf_r+0x2c>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f000 f879 	bl	8003c44 <_printf_i>
 8003b52:	e7ed      	b.n	8003b30 <_svfiprintf_r+0x1c0>
 8003b54:	08004050 	.word	0x08004050
 8003b58:	0800405a 	.word	0x0800405a
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b9 	.word	0x080038b9
 8003b64:	08004056 	.word	0x08004056

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4698      	mov	r8, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfb8      	it	lt
 8003b7c:	4613      	movlt	r3, r2
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b84:	4607      	mov	r7, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc26      	bgt.n	8003bfe <_printf_common+0x96>
 8003bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	3b00      	subs	r3, #0
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42b      	bmi.n	8003c18 <_printf_common+0xb0>
 8003bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c8      	blx	r9
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d01e      	beq.n	8003c0c <_printf_common+0xa4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6922      	ldr	r2, [r4, #16]
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf02      	ittt	eq
 8003bda:	68e5      	ldreq	r5, [r4, #12]
 8003bdc:	6833      	ldreq	r3, [r6, #0]
 8003bde:	1aed      	subeq	r5, r5, r3
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	bf0c      	ite	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	2500      	movne	r5, #0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfc4      	itt	gt
 8003bee:	1a9b      	subgt	r3, r3, r2
 8003bf0:	18ed      	addgt	r5, r5, r3
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xc8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xa8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4641      	mov	r1, r8
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c8      	blx	r9
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xac>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c6      	b.n	8003ba6 <_printf_common+0x3e>
 8003c18:	18e1      	adds	r1, r4, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	2030      	movs	r0, #48	@ 0x30
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c22:	4422      	add	r2, r4
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7c7      	b.n	8003bc0 <_printf_common+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4641      	mov	r1, r8
 8003c36:	4638      	mov	r0, r7
 8003c38:	47c8      	blx	r9
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xa4>
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7d9      	b.n	8003bf6 <_printf_common+0x8e>
	...

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c4c:	2f78      	cmp	r7, #120	@ 0x78
 8003c4e:	4691      	mov	r9, r2
 8003c50:	4680      	mov	r8, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	469a      	mov	sl, r3
 8003c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	@ 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d2 	beq.w	8003e0a <_printf_i+0x1c6>
 8003c66:	2f58      	cmp	r7, #88	@ 0x58
 8003c68:	f000 80b9 	beq.w	8003dde <_printf_i+0x19a>
 8003c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003df1 	.word	0x08003df1
 8003cb4:	08003d1b 	.word	0x08003d1b
 8003cb8:	08003dab 	.word	0x08003dab
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e13 	.word	0x08003e13
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d1b 	.word	0x08003d1b
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003db3 	.word	0x08003db3
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6032      	str	r2, [r6, #0]
 8003ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09d      	b.n	8003e2c <_printf_i+0x1e8>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	6031      	str	r1, [r6, #0]
 8003cf8:	0606      	lsls	r6, r0, #24
 8003cfa:	d501      	bpl.n	8003d00 <_printf_i+0xbc>
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	e003      	b.n	8003d08 <_printf_i+0xc4>
 8003d00:	0645      	lsls	r5, r0, #25
 8003d02:	d5fb      	bpl.n	8003cfc <_printf_i+0xb8>
 8003d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	da03      	bge.n	8003d14 <_printf_i+0xd0>
 8003d0c:	232d      	movs	r3, #45	@ 0x2d
 8003d0e:	426d      	negs	r5, r5
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d14:	4859      	ldr	r0, [pc, #356]	@ (8003e7c <_printf_i+0x238>)
 8003d16:	230a      	movs	r3, #10
 8003d18:	e011      	b.n	8003d3e <_printf_i+0xfa>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	0608      	lsls	r0, r1, #24
 8003d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d24:	d402      	bmi.n	8003d2c <_printf_i+0xe8>
 8003d26:	0649      	lsls	r1, r1, #25
 8003d28:	bf48      	it	mi
 8003d2a:	b2ad      	uxthmi	r5, r5
 8003d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d2e:	4853      	ldr	r0, [pc, #332]	@ (8003e7c <_printf_i+0x238>)
 8003d30:	6033      	str	r3, [r6, #0]
 8003d32:	bf14      	ite	ne
 8003d34:	230a      	movne	r3, #10
 8003d36:	2308      	moveq	r3, #8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d3e:	6866      	ldr	r6, [r4, #4]
 8003d40:	60a6      	str	r6, [r4, #8]
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	bfa2      	ittt	ge
 8003d46:	6821      	ldrge	r1, [r4, #0]
 8003d48:	f021 0104 	bicge.w	r1, r1, #4
 8003d4c:	6021      	strge	r1, [r4, #0]
 8003d4e:	b90d      	cbnz	r5, 8003d54 <_printf_i+0x110>
 8003d50:	2e00      	cmp	r6, #0
 8003d52:	d04b      	beq.n	8003dec <_printf_i+0x1a8>
 8003d54:	4616      	mov	r6, r2
 8003d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d5e:	5dc7      	ldrb	r7, [r0, r7]
 8003d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d64:	462f      	mov	r7, r5
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	460d      	mov	r5, r1
 8003d6a:	d9f4      	bls.n	8003d56 <_printf_i+0x112>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <_printf_i+0x144>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	07df      	lsls	r7, r3, #31
 8003d74:	d508      	bpl.n	8003d88 <_printf_i+0x144>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	bfde      	ittt	le
 8003d7e:	2330      	movle	r3, #48	@ 0x30
 8003d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d88:	1b92      	subs	r2, r2, r6
 8003d8a:	6122      	str	r2, [r4, #16]
 8003d8c:	f8cd a000 	str.w	sl, [sp]
 8003d90:	464b      	mov	r3, r9
 8003d92:	aa03      	add	r2, sp, #12
 8003d94:	4621      	mov	r1, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	f7ff fee6 	bl	8003b68 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d14a      	bne.n	8003e36 <_printf_i+0x1f2>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	b004      	add	sp, #16
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	4833      	ldr	r0, [pc, #204]	@ (8003e80 <_printf_i+0x23c>)
 8003db4:	2778      	movs	r7, #120	@ 0x78
 8003db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	6831      	ldr	r1, [r6, #0]
 8003dbe:	061f      	lsls	r7, r3, #24
 8003dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dc4:	d402      	bmi.n	8003dcc <_printf_i+0x188>
 8003dc6:	065f      	lsls	r7, r3, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2ad      	uxthmi	r5, r5
 8003dcc:	6031      	str	r1, [r6, #0]
 8003dce:	07d9      	lsls	r1, r3, #31
 8003dd0:	bf44      	itt	mi
 8003dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd6:	6023      	strmi	r3, [r4, #0]
 8003dd8:	b11d      	cbz	r5, 8003de2 <_printf_i+0x19e>
 8003dda:	2310      	movs	r3, #16
 8003ddc:	e7ac      	b.n	8003d38 <_printf_i+0xf4>
 8003dde:	4827      	ldr	r0, [pc, #156]	@ (8003e7c <_printf_i+0x238>)
 8003de0:	e7e9      	b.n	8003db6 <_printf_i+0x172>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	f023 0320 	bic.w	r3, r3, #32
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	e7f6      	b.n	8003dda <_printf_i+0x196>
 8003dec:	4616      	mov	r6, r2
 8003dee:	e7bd      	b.n	8003d6c <_printf_i+0x128>
 8003df0:	6833      	ldr	r3, [r6, #0]
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	6961      	ldr	r1, [r4, #20]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	6030      	str	r0, [r6, #0]
 8003dfa:	062e      	lsls	r6, r5, #24
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	d501      	bpl.n	8003e04 <_printf_i+0x1c0>
 8003e00:	6019      	str	r1, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <_printf_i+0x1c6>
 8003e04:	0668      	lsls	r0, r5, #25
 8003e06:	d5fb      	bpl.n	8003e00 <_printf_i+0x1bc>
 8003e08:	8019      	strh	r1, [r3, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	4616      	mov	r6, r2
 8003e10:	e7bc      	b.n	8003d8c <_printf_i+0x148>
 8003e12:	6833      	ldr	r3, [r6, #0]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	6032      	str	r2, [r6, #0]
 8003e18:	681e      	ldr	r6, [r3, #0]
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f7fc f9d6 	bl	80001d0 <memchr>
 8003e24:	b108      	cbz	r0, 8003e2a <_printf_i+0x1e6>
 8003e26:	1b80      	subs	r0, r0, r6
 8003e28:	6060      	str	r0, [r4, #4]
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e34:	e7aa      	b.n	8003d8c <_printf_i+0x148>
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	47d0      	blx	sl
 8003e40:	3001      	adds	r0, #1
 8003e42:	d0ad      	beq.n	8003da0 <_printf_i+0x15c>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	079b      	lsls	r3, r3, #30
 8003e48:	d413      	bmi.n	8003e72 <_printf_i+0x22e>
 8003e4a:	68e0      	ldr	r0, [r4, #12]
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	4298      	cmp	r0, r3
 8003e50:	bfb8      	it	lt
 8003e52:	4618      	movlt	r0, r3
 8003e54:	e7a6      	b.n	8003da4 <_printf_i+0x160>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4632      	mov	r2, r6
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	47d0      	blx	sl
 8003e60:	3001      	adds	r0, #1
 8003e62:	d09d      	beq.n	8003da0 <_printf_i+0x15c>
 8003e64:	3501      	adds	r5, #1
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	1a5b      	subs	r3, r3, r1
 8003e6c:	42ab      	cmp	r3, r5
 8003e6e:	dcf2      	bgt.n	8003e56 <_printf_i+0x212>
 8003e70:	e7eb      	b.n	8003e4a <_printf_i+0x206>
 8003e72:	2500      	movs	r5, #0
 8003e74:	f104 0619 	add.w	r6, r4, #25
 8003e78:	e7f5      	b.n	8003e66 <_printf_i+0x222>
 8003e7a:	bf00      	nop
 8003e7c:	08004061 	.word	0x08004061
 8003e80:	08004072 	.word	0x08004072

08003e84 <memmove>:
 8003e84:	4288      	cmp	r0, r1
 8003e86:	b510      	push	{r4, lr}
 8003e88:	eb01 0402 	add.w	r4, r1, r2
 8003e8c:	d902      	bls.n	8003e94 <memmove+0x10>
 8003e8e:	4284      	cmp	r4, r0
 8003e90:	4623      	mov	r3, r4
 8003e92:	d807      	bhi.n	8003ea4 <memmove+0x20>
 8003e94:	1e43      	subs	r3, r0, #1
 8003e96:	42a1      	cmp	r1, r4
 8003e98:	d008      	beq.n	8003eac <memmove+0x28>
 8003e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ea2:	e7f8      	b.n	8003e96 <memmove+0x12>
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	428a      	cmp	r2, r1
 8003eaa:	d100      	bne.n	8003eae <memmove+0x2a>
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eb6:	e7f7      	b.n	8003ea8 <memmove+0x24>

08003eb8 <_sbrk_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d06      	ldr	r5, [pc, #24]	@ (8003ed4 <_sbrk_r+0x1c>)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	f7fd f8f4 	bl	80010b0 <_sbrk>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_sbrk_r+0x1a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_sbrk_r+0x1a>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	2000034c 	.word	0x2000034c

08003ed8 <memcpy>:
 8003ed8:	440a      	add	r2, r1
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee0:	d100      	bne.n	8003ee4 <memcpy+0xc>
 8003ee2:	4770      	bx	lr
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	d1f9      	bne.n	8003ee6 <memcpy+0xe>
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <_realloc_r>:
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4615      	mov	r5, r2
 8003efc:	460c      	mov	r4, r1
 8003efe:	b921      	cbnz	r1, 8003f0a <_realloc_r+0x16>
 8003f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	4611      	mov	r1, r2
 8003f06:	f7ff bc4b 	b.w	80037a0 <_malloc_r>
 8003f0a:	b92a      	cbnz	r2, 8003f18 <_realloc_r+0x24>
 8003f0c:	f7ff fbdc 	bl	80036c8 <_free_r>
 8003f10:	2400      	movs	r4, #0
 8003f12:	4620      	mov	r0, r4
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f18:	f000 f81a 	bl	8003f50 <_malloc_usable_size_r>
 8003f1c:	4285      	cmp	r5, r0
 8003f1e:	4606      	mov	r6, r0
 8003f20:	d802      	bhi.n	8003f28 <_realloc_r+0x34>
 8003f22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f26:	d8f4      	bhi.n	8003f12 <_realloc_r+0x1e>
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	f7ff fc38 	bl	80037a0 <_malloc_r>
 8003f30:	4607      	mov	r7, r0
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d0ec      	beq.n	8003f10 <_realloc_r+0x1c>
 8003f36:	42b5      	cmp	r5, r6
 8003f38:	462a      	mov	r2, r5
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	bf28      	it	cs
 8003f3e:	4632      	movcs	r2, r6
 8003f40:	f7ff ffca 	bl	8003ed8 <memcpy>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4640      	mov	r0, r8
 8003f48:	f7ff fbbe 	bl	80036c8 <_free_r>
 8003f4c:	463c      	mov	r4, r7
 8003f4e:	e7e0      	b.n	8003f12 <_realloc_r+0x1e>

08003f50 <_malloc_usable_size_r>:
 8003f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f54:	1f18      	subs	r0, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bfbc      	itt	lt
 8003f5a:	580b      	ldrlt	r3, [r1, r0]
 8003f5c:	18c0      	addlt	r0, r0, r3
 8003f5e:	4770      	bx	lr

08003f60 <_init>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr

08003f6c <_fini>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr
