
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003488  08003488  000050c8  2**0
                  CONTENTS
  4 .ARM          00000008  08003488  08003488  00004488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003490  08003490  000050c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003490  08003490  00004490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003494  08003494  00004494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08003498  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000050c8  2**0
                  CONTENTS
 10 .bss          0000020c  200000c8  200000c8  000050c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  000050c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af20  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d22  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  00011d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000798  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002195d  00000000  00000000  00012e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e03b  00000000  00000000  000347dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc483  00000000  00000000  00042818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ec9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bd4  00000000  00000000  0010ece0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001118b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033ac 	.word	0x080033ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	080033ac 	.word	0x080033ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <MX_GPIO_Init+0xe0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a30      	ldr	r2, [pc, #192]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b2e      	ldr	r3, [pc, #184]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <MX_GPIO_Init+0xe0>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 41aa 	mov.w	r1, #21760	@ 0x5500
 80005ec:	4815      	ldr	r0, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xe4>)
 80005ee:	f001 f94d 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_GPIO_Init+0xe8>)
 80005fa:	f001 f947 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C3_Keyboard_Pin|C2_Keyboard_Pin|C1_Keyboard_Pin;
 80005fe:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <MX_GPIO_Init+0xec>)
 8000614:	f000 ff86 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin;
 8000618:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4804      	ldr	r0, [pc, #16]	@ (8000644 <MX_GPIO_Init+0xe4>)
 8000632:	f000 ff77 	bl	8001524 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400

08000650 <read_keyboard>:

/* USER CODE BEGIN 2 */
char read_keyboard() {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_RESET);  // Pull R1 low
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800065a:	48b4      	ldr	r0, [pc, #720]	@ (800092c <read_keyboard+0x2dc>)
 800065c:	f001 f916 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);    // Pull R2 high
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000666:	48b1      	ldr	r0, [pc, #708]	@ (800092c <read_keyboard+0x2dc>)
 8000668:	f001 f910 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);    // Pull R3 high
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000672:	48ae      	ldr	r0, [pc, #696]	@ (800092c <read_keyboard+0x2dc>)
 8000674:	f001 f90a 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);    // Pull R4 high
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	48ab      	ldr	r0, [pc, #684]	@ (800092c <read_keyboard+0x2dc>)
 8000680:	f001 f904 	bl	800188c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 8000684:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000688:	48a9      	ldr	r0, [pc, #676]	@ (8000930 <read_keyboard+0x2e0>)
 800068a:	f001 f8e7 	bl	800185c <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10d      	bne.n	80006b0 <read_keyboard+0x60>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));  // Wait till the button is pressed
 8000694:	bf00      	nop
 8000696:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800069a:	48a5      	ldr	r0, [pc, #660]	@ (8000930 <read_keyboard+0x2e0>)
 800069c:	f001 f8de 	bl	800185c <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0f7      	beq.n	8000696 <read_keyboard+0x46>
        UART_SendChar('1');  // Send the key through UART
 80006a6:	2031      	movs	r0, #49	@ 0x31
 80006a8:	f000 fce4 	bl	8001074 <UART_SendChar>
        return '1';
 80006ac:	2331      	movs	r3, #49	@ 0x31
 80006ae:	e13a      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 80006b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b4:	489e      	ldr	r0, [pc, #632]	@ (8000930 <read_keyboard+0x2e0>)
 80006b6:	f001 f8d1 	bl	800185c <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10d      	bne.n	80006dc <read_keyboard+0x8c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 80006c0:	bf00      	nop
 80006c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c6:	489a      	ldr	r0, [pc, #616]	@ (8000930 <read_keyboard+0x2e0>)
 80006c8:	f001 f8c8 	bl	800185c <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f7      	beq.n	80006c2 <read_keyboard+0x72>
        UART_SendChar('2');
 80006d2:	2032      	movs	r0, #50	@ 0x32
 80006d4:	f000 fcce 	bl	8001074 <UART_SendChar>
        return '2';
 80006d8:	2332      	movs	r3, #50	@ 0x32
 80006da:	e124      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 80006dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e0:	4893      	ldr	r0, [pc, #588]	@ (8000930 <read_keyboard+0x2e0>)
 80006e2:	f001 f8bb 	bl	800185c <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10d      	bne.n	8000708 <read_keyboard+0xb8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 80006ec:	bf00      	nop
 80006ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f2:	488f      	ldr	r0, [pc, #572]	@ (8000930 <read_keyboard+0x2e0>)
 80006f4:	f001 f8b2 	bl	800185c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f7      	beq.n	80006ee <read_keyboard+0x9e>
        UART_SendChar('3');
 80006fe:	2033      	movs	r0, #51	@ 0x33
 8000700:	f000 fcb8 	bl	8001074 <UART_SendChar>
        return '3';
 8000704:	2333      	movs	r3, #51	@ 0x33
 8000706:	e10e      	b.n	8000926 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070e:	4887      	ldr	r0, [pc, #540]	@ (800092c <read_keyboard+0x2dc>)
 8000710:	f001 f8bc 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_RESET); // Pull R2 high
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071a:	4884      	ldr	r0, [pc, #528]	@ (800092c <read_keyboard+0x2dc>)
 800071c:	f001 f8b6 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);   // Pull R3 high
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000726:	4881      	ldr	r0, [pc, #516]	@ (800092c <read_keyboard+0x2dc>)
 8000728:	f001 f8b0 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);   // Pull R4 high
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000732:	487e      	ldr	r0, [pc, #504]	@ (800092c <read_keyboard+0x2dc>)
 8000734:	f001 f8aa 	bl	800188c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 8000738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073c:	487c      	ldr	r0, [pc, #496]	@ (8000930 <read_keyboard+0x2e0>)
 800073e:	f001 f88d 	bl	800185c <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10d      	bne.n	8000764 <read_keyboard+0x114>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 8000748:	bf00      	nop
 800074a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074e:	4878      	ldr	r0, [pc, #480]	@ (8000930 <read_keyboard+0x2e0>)
 8000750:	f001 f884 	bl	800185c <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f7      	beq.n	800074a <read_keyboard+0xfa>
        UART_SendChar('4');
 800075a:	2034      	movs	r0, #52	@ 0x34
 800075c:	f000 fc8a 	bl	8001074 <UART_SendChar>
        return '4';
 8000760:	2334      	movs	r3, #52	@ 0x34
 8000762:	e0e0      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 8000764:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000768:	4871      	ldr	r0, [pc, #452]	@ (8000930 <read_keyboard+0x2e0>)
 800076a:	f001 f877 	bl	800185c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10d      	bne.n	8000790 <read_keyboard+0x140>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 8000774:	bf00      	nop
 8000776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077a:	486d      	ldr	r0, [pc, #436]	@ (8000930 <read_keyboard+0x2e0>)
 800077c:	f001 f86e 	bl	800185c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f7      	beq.n	8000776 <read_keyboard+0x126>
        UART_SendChar('5');
 8000786:	2035      	movs	r0, #53	@ 0x35
 8000788:	f000 fc74 	bl	8001074 <UART_SendChar>
        return '5';
 800078c:	2335      	movs	r3, #53	@ 0x35
 800078e:	e0ca      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	4866      	ldr	r0, [pc, #408]	@ (8000930 <read_keyboard+0x2e0>)
 8000796:	f001 f861 	bl	800185c <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10d      	bne.n	80007bc <read_keyboard+0x16c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 80007a0:	bf00      	nop
 80007a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a6:	4862      	ldr	r0, [pc, #392]	@ (8000930 <read_keyboard+0x2e0>)
 80007a8:	f001 f858 	bl	800185c <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f7      	beq.n	80007a2 <read_keyboard+0x152>
        UART_SendChar('6');
 80007b2:	2036      	movs	r0, #54	@ 0x36
 80007b4:	f000 fc5e 	bl	8001074 <UART_SendChar>
        return '6';
 80007b8:	2336      	movs	r3, #54	@ 0x36
 80007ba:	e0b4      	b.n	8000926 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c2:	485a      	ldr	r0, [pc, #360]	@ (800092c <read_keyboard+0x2dc>)
 80007c4:	f001 f862 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);  // Pull R2 high
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ce:	4857      	ldr	r0, [pc, #348]	@ (800092c <read_keyboard+0x2dc>)
 80007d0:	f001 f85c 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_RESET); // Pull R3 high
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007da:	4854      	ldr	r0, [pc, #336]	@ (800092c <read_keyboard+0x2dc>)
 80007dc:	f001 f856 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET);  // Pull R4 high
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e6:	4851      	ldr	r0, [pc, #324]	@ (800092c <read_keyboard+0x2dc>)
 80007e8:	f001 f850 	bl	800188c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 80007ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f0:	484f      	ldr	r0, [pc, #316]	@ (8000930 <read_keyboard+0x2e0>)
 80007f2:	f001 f833 	bl	800185c <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10d      	bne.n	8000818 <read_keyboard+0x1c8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 80007fc:	bf00      	nop
 80007fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000802:	484b      	ldr	r0, [pc, #300]	@ (8000930 <read_keyboard+0x2e0>)
 8000804:	f001 f82a 	bl	800185c <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f7      	beq.n	80007fe <read_keyboard+0x1ae>
        UART_SendChar('7');
 800080e:	2037      	movs	r0, #55	@ 0x37
 8000810:	f000 fc30 	bl	8001074 <UART_SendChar>
        return '7';
 8000814:	2337      	movs	r3, #55	@ 0x37
 8000816:	e086      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 8000818:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800081c:	4844      	ldr	r0, [pc, #272]	@ (8000930 <read_keyboard+0x2e0>)
 800081e:	f001 f81d 	bl	800185c <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10d      	bne.n	8000844 <read_keyboard+0x1f4>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 8000828:	bf00      	nop
 800082a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800082e:	4840      	ldr	r0, [pc, #256]	@ (8000930 <read_keyboard+0x2e0>)
 8000830:	f001 f814 	bl	800185c <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f7      	beq.n	800082a <read_keyboard+0x1da>
        UART_SendChar('8');
 800083a:	2038      	movs	r0, #56	@ 0x38
 800083c:	f000 fc1a 	bl	8001074 <UART_SendChar>
        return '8';
 8000840:	2338      	movs	r3, #56	@ 0x38
 8000842:	e070      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 8000844:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000848:	4839      	ldr	r0, [pc, #228]	@ (8000930 <read_keyboard+0x2e0>)
 800084a:	f001 f807 	bl	800185c <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10d      	bne.n	8000870 <read_keyboard+0x220>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000854:	bf00      	nop
 8000856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085a:	4835      	ldr	r0, [pc, #212]	@ (8000930 <read_keyboard+0x2e0>)
 800085c:	f000 fffe 	bl	800185c <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f7      	beq.n	8000856 <read_keyboard+0x206>
        UART_SendChar('9');
 8000866:	2039      	movs	r0, #57	@ 0x39
 8000868:	f000 fc04 	bl	8001074 <UART_SendChar>
        return '9';
 800086c:	2339      	movs	r3, #57	@ 0x39
 800086e:	e05a      	b.n	8000926 <read_keyboard+0x2d6>
    }

    HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  // Pull R1 low
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000876:	482d      	ldr	r0, [pc, #180]	@ (800092c <read_keyboard+0x2dc>)
 8000878:	f001 f808 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET);  // Pull R2 high
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000882:	482a      	ldr	r0, [pc, #168]	@ (800092c <read_keyboard+0x2dc>)
 8000884:	f001 f802 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET);  // Pull R3 high
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	4827      	ldr	r0, [pc, #156]	@ (800092c <read_keyboard+0x2dc>)
 8000890:	f000 fffc 	bl	800188c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_RESET); // Pull R4 high
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089a:	4824      	ldr	r0, [pc, #144]	@ (800092c <read_keyboard+0x2dc>)
 800089c:	f000 fff6 	bl	800188c <HAL_GPIO_WritePin>

    if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))) {
 80008a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a4:	4822      	ldr	r0, [pc, #136]	@ (8000930 <read_keyboard+0x2e0>)
 80008a6:	f000 ffd9 	bl	800185c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10d      	bne.n	80008cc <read_keyboard+0x27c>
        while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)));
 80008b0:	bf00      	nop
 80008b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b6:	481e      	ldr	r0, [pc, #120]	@ (8000930 <read_keyboard+0x2e0>)
 80008b8:	f000 ffd0 	bl	800185c <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f7      	beq.n	80008b2 <read_keyboard+0x262>
        UART_SendChar('*');
 80008c2:	202a      	movs	r0, #42	@ 0x2a
 80008c4:	f000 fbd6 	bl	8001074 <UART_SendChar>
        return '*';
 80008c8:	232a      	movs	r3, #42	@ 0x2a
 80008ca:	e02c      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin))) {
 80008cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d0:	4817      	ldr	r0, [pc, #92]	@ (8000930 <read_keyboard+0x2e0>)
 80008d2:	f000 ffc3 	bl	800185c <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10d      	bne.n	80008f8 <read_keyboard+0x2a8>
        while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 80008dc:	bf00      	nop
 80008de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e2:	4813      	ldr	r0, [pc, #76]	@ (8000930 <read_keyboard+0x2e0>)
 80008e4:	f000 ffba 	bl	800185c <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f7      	beq.n	80008de <read_keyboard+0x28e>
        UART_SendChar('0');
 80008ee:	2030      	movs	r0, #48	@ 0x30
 80008f0:	f000 fbc0 	bl	8001074 <UART_SendChar>
        return '0';
 80008f4:	2330      	movs	r3, #48	@ 0x30
 80008f6:	e016      	b.n	8000926 <read_keyboard+0x2d6>
    }

    if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin))) {
 80008f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <read_keyboard+0x2e0>)
 80008fe:	f000 ffad 	bl	800185c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10d      	bne.n	8000924 <read_keyboard+0x2d4>
        while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000908:	bf00      	nop
 800090a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090e:	4808      	ldr	r0, [pc, #32]	@ (8000930 <read_keyboard+0x2e0>)
 8000910:	f000 ffa4 	bl	800185c <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f7      	beq.n	800090a <read_keyboard+0x2ba>
        UART_SendChar('#');
 800091a:	2023      	movs	r0, #35	@ 0x23
 800091c:	f000 fbaa 	bl	8001074 <UART_SendChar>
        return '#';
 8000920:	2323      	movs	r3, #35	@ 0x23
 8000922:	e000      	b.n	8000926 <read_keyboard+0x2d6>
    }

    return 'X';
 8000924:	2358      	movs	r3, #88	@ 0x58
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020400 	.word	0x40020400

08000934 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_I2C1_Init+0x48>)
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x4c>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_I2C1_Init+0x48>)
 8000940:	4a10      	ldr	r2, [pc, #64]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <MX_I2C1_Init+0x48>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_I2C1_Init+0x48>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <MX_I2C1_Init+0x48>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_I2C1_Init+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <MX_I2C1_Init+0x48>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <MX_I2C1_Init+0x48>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b04      	ldr	r3, [pc, #16]	@ (800097c <MX_I2C1_Init+0x48>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <MX_I2C1_Init+0x48>)
 8000972:	f000 ffa5 	bl	80018c0 <HAL_I2C_Init>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000e4 	.word	0x200000e4
 8000980:	40005400 	.word	0x40005400
 8000984:	000186a0 	.word	0x000186a0

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <HAL_I2C_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <HAL_I2C_MspInit+0x8c>)
 80009e4:	f000 fd9e 	bl	8001524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000a32:	2028      	movs	r0, #40	@ 0x28
 8000a34:	f000 fc40 	bl	80012b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	7bfa      	ldrb	r2, [r7, #15]
 8000a3e:	2130      	movs	r1, #48	@ 0x30
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f829 	bl	8000a98 <lcd_write>
	HAL_Delay(5);
 8000a46:	2005      	movs	r0, #5
 8000a48:	f000 fc36 	bl	80012b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	7bfa      	ldrb	r2, [r7, #15]
 8000a52:	2130      	movs	r1, #48	@ 0x30
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f81f 	bl	8000a98 <lcd_write>
	HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fc2c 	bl	80012b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	2130      	movs	r1, #48	@ 0x30
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f815 	bl	8000a98 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f80e 	bl	8000a98 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	210c      	movs	r1, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f807 	bl	8000a98 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f89f 	bl	8000bce <lcd_clear>

}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	71bb      	strb	r3, [r7, #6]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	797b      	ldrb	r3, [r7, #5]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	b25a      	sxtb	r2, r3
 8000aca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	b299      	uxth	r1, r3
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	2364      	movs	r3, #100	@ 0x64
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2304      	movs	r3, #4
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <lcd_write+0x88>)
 8000b0c:	f001 f81c 	bl	8001b48 <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 8000b10:	200a      	movs	r0, #10
 8000b12:	f000 fbd1 	bl	80012b8 <HAL_Delay>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000e4 	.word	0x200000e4

08000b24 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f843 	bl	8000bce <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffa1 	bl	8000a98 <lcd_write>
	while(lcd->f_line[i])
 8000b56:	e00f      	b.n	8000b78 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7818      	ldrb	r0, [r3, #0]
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	7859      	ldrb	r1, [r3, #1]
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f7ff ff93 	bl	8000a98 <lcd_write>
		i++;
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	3301      	adds	r3, #1
 8000b76:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	21c0      	movs	r1, #192	@ 0xc0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff81 	bl	8000a98 <lcd_write>
	while(lcd->s_line[i])
 8000b96:	e00f      	b.n	8000bb8 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7818      	ldrb	r0, [r3, #0]
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	7d19      	ldrb	r1, [r3, #20]
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f7ff ff73 	bl	8000a98 <lcd_write>
		i++;
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	7d1b      	ldrb	r3, [r3, #20]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1e9      	bne.n	8000b98 <lcd_display+0x74>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000be4:	2308      	movs	r3, #8
 8000be6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff51 	bl	8000a98 <lcd_write>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <DisplayMenu>:
    .bl = true
};

// Funkcja wyświetlania menu tylko przy zmianie
void DisplayMenu(bool forceUpdate)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]

    if (forceUpdate || currentIndex != lastIndex) { // Aktualizuj tylko jeśli się zmieniło
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <DisplayMenu+0x1c>
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <DisplayMenu+0x98>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <DisplayMenu+0x9c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d038      	beq.n	8000c8e <DisplayMenu+0x8e>
        sprintf((char*)disp.f_line, ">%s", currentMenu[currentIndex].name);
 8000c1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <DisplayMenu+0xa0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <DisplayMenu+0x98>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	440b      	add	r3, r1
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	491b      	ldr	r1, [pc, #108]	@ (8000ca4 <DisplayMenu+0xa4>)
 8000c36:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <DisplayMenu+0xa8>)
 8000c38:	f001 ff20 	bl	8002a7c <siprintf>
        if (currentMenu[currentIndex + 1].name) {
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <DisplayMenu+0xa0>)
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <DisplayMenu+0x98>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d010      	beq.n	8000c78 <DisplayMenu+0x78>
            sprintf((char*)disp.s_line, "%s", currentMenu[currentIndex + 1].name);
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <DisplayMenu+0xa0>)
 8000c58:	6819      	ldr	r1, [r3, #0]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <DisplayMenu+0x98>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	490f      	ldr	r1, [pc, #60]	@ (8000cac <DisplayMenu+0xac>)
 8000c70:	480f      	ldr	r0, [pc, #60]	@ (8000cb0 <DisplayMenu+0xb0>)
 8000c72:	f001 ff03 	bl	8002a7c <siprintf>
 8000c76:	e003      	b.n	8000c80 <DisplayMenu+0x80>
        } else {
            sprintf((char*)disp.s_line, " ");
 8000c78:	490e      	ldr	r1, [pc, #56]	@ (8000cb4 <DisplayMenu+0xb4>)
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <DisplayMenu+0xb0>)
 8000c7c:	f001 fefe 	bl	8002a7c <siprintf>
        }
        lcd_display(&disp);
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <DisplayMenu+0xb8>)
 8000c82:	f7ff ff4f 	bl	8000b24 <lcd_display>
        lastIndex = currentIndex; // Zapisz nową pozycję
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <DisplayMenu+0x98>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <DisplayMenu+0x9c>)
 8000c8c:	6013      	str	r3, [r2, #0]
    }
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000138 	.word	0x20000138
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	2000003c 	.word	0x2000003c
 8000ca4:	08003404 	.word	0x08003404
 8000ca8:	20000045 	.word	0x20000045
 8000cac:	08003408 	.word	0x08003408
 8000cb0:	20000058 	.word	0x20000058
 8000cb4:	0800340c 	.word	0x0800340c
 8000cb8:	20000044 	.word	0x20000044

08000cbc <HandleMenuInput>:

// Obsługa klawiszy
void HandleMenuInput(char input) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    bool updated = false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]

    if (input == '8' && currentMenu[currentIndex + 1].name) { // W dół
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b38      	cmp	r3, #56	@ 0x38
 8000cce:	d113      	bne.n	8000cf8 <HandleMenuInput+0x3c>
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HandleMenuInput+0x3c>
        currentIndex++;
 8000cea:	4b36      	ldr	r3, [pc, #216]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a34      	ldr	r2, [pc, #208]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000cf2:	6013      	str	r3, [r2, #0]
        updated = true;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
    }
    if (input == '2' && currentIndex > 0) { // W górę
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b32      	cmp	r3, #50	@ 0x32
 8000cfc:	d10a      	bne.n	8000d14 <HandleMenuInput+0x58>
 8000cfe:	4b31      	ldr	r3, [pc, #196]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd06      	ble.n	8000d14 <HandleMenuInput+0x58>
        currentIndex--;
 8000d06:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d0e:	6013      	str	r3, [r2, #0]
        updated = true;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
    if (input == '#') { // Wybór opcji
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b23      	cmp	r3, #35	@ 0x23
 8000d18:	d13e      	bne.n	8000d98 <HandleMenuInput+0xdc>
        if (currentMenu[currentIndex].subMenu) {
 8000d1a:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	440b      	add	r3, r1
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d012      	beq.n	8000d5a <HandleMenuInput+0x9e>
            currentMenu = currentMenu[currentIndex].subMenu;
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	460b      	mov	r3, r1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	440b      	add	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000d4c:	6013      	str	r3, [r2, #0]
            currentIndex = 0;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
            updated = true;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e01e      	b.n	8000d98 <HandleMenuInput+0xdc>
        } else if (currentMenu[currentIndex].action) {
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	460b      	mov	r3, r1
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	440b      	add	r3, r1
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d011      	beq.n	8000d98 <HandleMenuInput+0xdc>
            currentMenu[currentIndex].action();
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	440b      	add	r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4798      	blx	r3
            updated = true;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
            DisplayMenu(false);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff35 	bl	8000c00 <DisplayMenu>
            return;
 8000d96:	e010      	b.n	8000dba <HandleMenuInput+0xfe>

        }
    }
    if (input == '*') { // Powrót do menu głównego
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d9c:	d107      	bne.n	8000dae <HandleMenuInput+0xf2>
        currentMenu = mainMenu; // Resetujemy menu do głównego
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HandleMenuInput+0x104>)
 8000da0:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HandleMenuInput+0x10c>)
 8000da2:	601a      	str	r2, [r3, #0]
        currentIndex = 0;       // Resetujemy pozycję kursora
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HandleMenuInput+0x108>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
        updated = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
    }
    if (updated) {
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <HandleMenuInput+0xfe>
    	 DisplayMenu(false);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff23 	bl	8000c00 <DisplayMenu>
    }
}
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000003c 	.word	0x2000003c
 8000dc4:	20000138 	.word	0x20000138
 8000dc8:	20000000 	.word	0x20000000

08000dcc <actionSpeedSettings>:

// Funkcja ustawiania prędkości (przykład)
void actionSpeedSettings() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
    int speed = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
    int prevSpeed = -1;  // Zmienna do przechowywania poprzedniej prędkości
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	60bb      	str	r3, [r7, #8]
    DisplayMenu(true);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff ff0f 	bl	8000c00 <DisplayMenu>

    sprintf((char*)disp.f_line, "Speed: %d", speed);
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	491d      	ldr	r1, [pc, #116]	@ (8000e5c <actionSpeedSettings+0x90>)
 8000de6:	481e      	ldr	r0, [pc, #120]	@ (8000e60 <actionSpeedSettings+0x94>)
 8000de8:	f001 fe48 	bl	8002a7c <siprintf>
    sprintf((char*)disp.s_line, "Press # to exit");
 8000dec:	491d      	ldr	r1, [pc, #116]	@ (8000e64 <actionSpeedSettings+0x98>)
 8000dee:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <actionSpeedSettings+0x9c>)
 8000df0:	f001 fe44 	bl	8002a7c <siprintf>
    lcd_display(&disp);
 8000df4:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <actionSpeedSettings+0xa0>)
 8000df6:	f7ff fe95 	bl	8000b24 <lcd_display>

    while (1) {
        char key = read_keyboard();
 8000dfa:	f7ff fc29 	bl	8000650 <read_keyboard>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
        if (key == '#') break; // Wyjście z ustawień
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b23      	cmp	r3, #35	@ 0x23
 8000e06:	d024      	beq.n	8000e52 <actionSpeedSettings+0x86>

        if (key == '2') speed++;  // Zwiększ prędkość
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b32      	cmp	r3, #50	@ 0x32
 8000e0c:	d102      	bne.n	8000e14 <actionSpeedSettings+0x48>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
        if (key == '8' && speed > 0) speed--;  // Zmniejsz prędkość
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b38      	cmp	r3, #56	@ 0x38
 8000e18:	d105      	bne.n	8000e26 <actionSpeedSettings+0x5a>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd02      	ble.n	8000e26 <actionSpeedSettings+0x5a>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]

        if (speed != prevSpeed) {  // Tylko jeśli prędkość się zmieniła
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d00d      	beq.n	8000e4a <actionSpeedSettings+0x7e>
            sprintf((char*)disp.f_line, "Speed: %d", speed);
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	490a      	ldr	r1, [pc, #40]	@ (8000e5c <actionSpeedSettings+0x90>)
 8000e32:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <actionSpeedSettings+0x94>)
 8000e34:	f001 fe22 	bl	8002a7c <siprintf>
            sprintf((char*)disp.s_line, "Press # to exit");
 8000e38:	490a      	ldr	r1, [pc, #40]	@ (8000e64 <actionSpeedSettings+0x98>)
 8000e3a:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <actionSpeedSettings+0x9c>)
 8000e3c:	f001 fe1e 	bl	8002a7c <siprintf>
            lcd_display(&disp);
 8000e40:	480a      	ldr	r0, [pc, #40]	@ (8000e6c <actionSpeedSettings+0xa0>)
 8000e42:	f7ff fe6f 	bl	8000b24 <lcd_display>
            prevSpeed = speed;  // Aktualizujemy poprzednią prędkość
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
        }

        HAL_Delay(200);  // Krótkie opóźnienie
 8000e4a:	20c8      	movs	r0, #200	@ 0xc8
 8000e4c:	f000 fa34 	bl	80012b8 <HAL_Delay>
    while (1) {
 8000e50:	e7d3      	b.n	8000dfa <actionSpeedSettings+0x2e>
        if (key == '#') break; // Wyjście z ustawień
 8000e52:	bf00      	nop
    }
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08003410 	.word	0x08003410
 8000e60:	20000045 	.word	0x20000045
 8000e64:	0800341c 	.word	0x0800341c
 8000e68:	20000058 	.word	0x20000058
 8000e6c:	20000044 	.word	0x20000044

08000e70 <actionViewParameters>:

// Funkcja wyświetlania parametrów (przykład)
void actionViewParameters() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
    // Wyświetlamy wartości prędkości tylko raz
    sprintf((char*)disp.f_line, "Speed Left: %d", 10);// robot.MotorLeft.speed);
 8000e76:	220a      	movs	r2, #10
 8000e78:	4914      	ldr	r1, [pc, #80]	@ (8000ecc <actionViewParameters+0x5c>)
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <actionViewParameters+0x60>)
 8000e7c:	f001 fdfe 	bl	8002a7c <siprintf>
    sprintf((char*)disp.s_line, "Speed Right: %d", 15);//robot.MotorRight.speed);
 8000e80:	220f      	movs	r2, #15
 8000e82:	4914      	ldr	r1, [pc, #80]	@ (8000ed4 <actionViewParameters+0x64>)
 8000e84:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <actionViewParameters+0x68>)
 8000e86:	f001 fdf9 	bl	8002a7c <siprintf>
    lcd_display(&disp);
 8000e8a:	4814      	ldr	r0, [pc, #80]	@ (8000edc <actionViewParameters+0x6c>)
 8000e8c:	f7ff fe4a 	bl	8000b24 <lcd_display>

    while (1) {
            char key = read_keyboard();
 8000e90:	f7ff fbde 	bl	8000650 <read_keyboard>
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
            if (key == '*') {
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e9c:	d003      	beq.n	8000ea6 <actionViewParameters+0x36>
                break;  // Opuszczamy pętlę
            }
            HAL_Delay(50);  // Krótsze opóźnienie dla lepszej responsywności
 8000e9e:	2032      	movs	r0, #50	@ 0x32
 8000ea0:	f000 fa0a 	bl	80012b8 <HAL_Delay>
    while (1) {
 8000ea4:	e7f4      	b.n	8000e90 <actionViewParameters+0x20>
                break;  // Opuszczamy pętlę
 8000ea6:	bf00      	nop
        }

        // Resetujemy indeks, aby wymusić odświeżenie menu
        lastIndex = -1;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <actionViewParameters+0x70>)
 8000eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8000eae:	601a      	str	r2, [r3, #0]

        // Powrót do menu głównego
        currentMenu = mainMenu;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <actionViewParameters+0x74>)
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <actionViewParameters+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
        currentIndex = 0;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <actionViewParameters+0x7c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]

        // Wyświetlenie menu po powrocie
        DisplayMenu(true);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fe9f 	bl	8000c00 <DisplayMenu>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800342c 	.word	0x0800342c
 8000ed0:	20000045 	.word	0x20000045
 8000ed4:	0800343c 	.word	0x0800343c
 8000ed8:	20000058 	.word	0x20000058
 8000edc:	20000044 	.word	0x20000044
 8000ee0:	20000040 	.word	0x20000040
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000138 	.word	0x20000138

08000ef0 <main>:
void send_via_bluetooth(char* message) {
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 1000);
}

// Funkcja główna
int main(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
    HAL_Init();
 8000ef6:	f000 f96d 	bl	80011d4 <HAL_Init>
    //SystemClock_Config();
    MX_GPIO_Init();
 8000efa:	f7ff fb31 	bl	8000560 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000efe:	f7ff fd19 	bl	8000934 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000f02:	f000 f8c9 	bl	8001098 <MX_USART1_UART_Init>


    lcd_init(&disp);
 8000f06:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <main+0x40>)
 8000f08:	f7ff fd86 	bl	8000a18 <lcd_init>
    DisplayMenu(true); // Pierwsze wyświetlenie menu
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fe77 	bl	8000c00 <DisplayMenu>

    while (1) {
        char input = read_keyboard();
 8000f12:	f7ff fb9d 	bl	8000650 <read_keyboard>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
        if (input) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <main+0x38>
            HandleMenuInput(input);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff feca 	bl	8000cbc <HandleMenuInput>
        }
        HAL_Delay(10);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f000 f9c5 	bl	80012b8 <HAL_Delay>
    while (1) {
 8000f2e:	e7f0      	b.n	8000f12 <main+0x22>
 8000f30:	20000044 	.word	0x20000044

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f94d 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f001 fd52 	bl	8002abc <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20020000 	.word	0x20020000
 8001044:	00000400 	.word	0x00000400
 8001048:	2000013c 	.word	0x2000013c
 800104c:	200002d8 	.word	0x200002d8

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <UART_SendChar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

void UART_SendChar(char c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	2201      	movs	r2, #1
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <UART_SendChar+0x20>)
 8001088:	f001 f93c 	bl	8002304 <HAL_UART_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000140 	.word	0x20000140

08001098 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <MX_USART1_UART_Init+0x44>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <MX_USART1_UART_Init+0x40>)
 80010d0:	f001 f8c8 	bl	8002264 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000140 	.word	0x20000140
 80010dc:	40011000 	.word	0x40011000

080010e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <HAL_UART_MspInit+0x94>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d133      	bne.n	800116a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_UART_MspInit+0x98>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_UART_MspInit+0x98>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_UART_MspInit+0x98>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_UART_MspInit+0x98>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_UART_MspInit+0x98>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_UART_MspInit+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23c0      	movs	r3, #192	@ 0xc0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_UART_MspInit+0x9c>)
 8001156:	f000 f9e5 	bl	8001524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2025      	movs	r0, #37	@ 0x25
 8001160:	f000 f9a9 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001164:	2025      	movs	r0, #37	@ 0x25
 8001166:	f000 f9c2 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40011000 	.word	0x40011000
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001184:	f7ff ff64 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 fc8b 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fe9d 	bl	8000ef0 <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80011c4:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 80011c8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80011cc:	200002d4 	.word	0x200002d4

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_Init+0x40>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_Init+0x40>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_Init+0x40>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f94f 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fe94 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f967 	bl	800150a <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f92f 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000006c 	.word	0x2000006c
 8001270:	20000074 	.word	0x20000074
 8001274:	20000070 	.word	0x20000070

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000074 	.word	0x20000074
 800129c:	20000188 	.word	0x20000188

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000188 	.word	0x20000188

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000074 	.word	0x20000074

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e16b      	b.n	8001818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 815a 	bne.w	8001812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80b4 	beq.w	8001812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b60      	ldr	r3, [pc, #384]	@ (8001830 <HAL_GPIO_Init+0x30c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001830 <HAL_GPIO_Init+0x30c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <HAL_GPIO_Init+0x30c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_GPIO_Init+0x310>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	@ (8001838 <HAL_GPIO_Init+0x314>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	@ (800183c <HAL_GPIO_Init+0x318>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d025      	beq.n	8001746 <HAL_GPIO_Init+0x222>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	@ (8001840 <HAL_GPIO_Init+0x31c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01f      	beq.n	8001742 <HAL_GPIO_Init+0x21e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	@ (8001844 <HAL_GPIO_Init+0x320>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x21a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	@ (8001848 <HAL_GPIO_Init+0x324>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x216>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	@ (800184c <HAL_GPIO_Init+0x328>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x212>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	@ (8001850 <HAL_GPIO_Init+0x32c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <HAL_GPIO_Init+0x330>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x20a>
 800172a:	2307      	movs	r3, #7
 800172c:	e00e      	b.n	800174c <HAL_GPIO_Init+0x228>
 800172e:	2308      	movs	r3, #8
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001732:	2306      	movs	r3, #6
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x228>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	@ (8001834 <HAL_GPIO_Init+0x310>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_GPIO_Init+0x334>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_GPIO_Init+0x334>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_GPIO_Init+0x334>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	@ (8001858 <HAL_GPIO_Init+0x334>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x334>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_GPIO_Init+0x334>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_GPIO_Init+0x334>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_GPIO_Init+0x334>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae90 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e12b      	b.n	8001b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff f84e 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	@ 0x24
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001924:	f000 fc76 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a81      	ldr	r2, [pc, #516]	@ (8001b34 <HAL_I2C_Init+0x274>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d807      	bhi.n	8001944 <HAL_I2C_Init+0x84>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4a80      	ldr	r2, [pc, #512]	@ (8001b38 <HAL_I2C_Init+0x278>)
 8001938:	4293      	cmp	r3, r2
 800193a:	bf94      	ite	ls
 800193c:	2301      	movls	r3, #1
 800193e:	2300      	movhi	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e006      	b.n	8001952 <HAL_I2C_Init+0x92>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a7d      	ldr	r2, [pc, #500]	@ (8001b3c <HAL_I2C_Init+0x27c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	bf94      	ite	ls
 800194c:	2301      	movls	r3, #1
 800194e:	2300      	movhi	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e7      	b.n	8001b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4a78      	ldr	r2, [pc, #480]	@ (8001b40 <HAL_I2C_Init+0x280>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a6a      	ldr	r2, [pc, #424]	@ (8001b34 <HAL_I2C_Init+0x274>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d802      	bhi.n	8001994 <HAL_I2C_Init+0xd4>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	e009      	b.n	80019a8 <HAL_I2C_Init+0xe8>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a69      	ldr	r2, [pc, #420]	@ (8001b44 <HAL_I2C_Init+0x284>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	3301      	adds	r3, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	495c      	ldr	r1, [pc, #368]	@ (8001b34 <HAL_I2C_Init+0x274>)
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d819      	bhi.n	80019fc <HAL_I2C_Init+0x13c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e59      	subs	r1, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019dc:	400b      	ands	r3, r1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_I2C_Init+0x138>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e59      	subs	r1, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f6:	e051      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 80019f8:	2304      	movs	r3, #4
 80019fa:	e04f      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d111      	bne.n	8001a28 <HAL_I2C_Init+0x168>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1e58      	subs	r0, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e012      	b.n	8001a4e <HAL_I2C_Init+0x18e>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1e58      	subs	r0, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	0099      	lsls	r1, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Init+0x196>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e022      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10e      	bne.n	8001a7c <HAL_I2C_Init+0x1bc>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e58      	subs	r0, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7a:	e00f      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	0099      	lsls	r1, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	6809      	ldr	r1, [r1, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001aca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6911      	ldr	r1, [r2, #16]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68d2      	ldr	r2, [r2, #12]
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	000186a0 	.word	0x000186a0
 8001b38:	001e847f 	.word	0x001e847f
 8001b3c:	003d08ff 	.word	0x003d08ff
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	10624dd3 	.word	0x10624dd3

08001b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fba0 	bl	80012a0 <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	f040 80e0 	bne.w	8001d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2319      	movs	r3, #25
 8001b76:	2201      	movs	r2, #1
 8001b78:	4970      	ldr	r1, [pc, #448]	@ (8001d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f964 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0d3      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_I2C_Master_Transmit+0x50>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0cc      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	@ 0x21
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	893a      	ldrh	r2, [r7, #8]
 8001bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c00:	8979      	ldrh	r1, [r7, #10]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f89c 	bl	8001d44 <I2C_MasterRequestWrite>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e08d      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c2c:	e066      	b.n	8001cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fa22 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d107      	bne.n	8001c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e06b      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d11b      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x188>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fa19 	bl	800210c <I2C_WaitOnBTFFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d107      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e01a      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d194      	bne.n	8001c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	00100002 	.word	0x00100002
 8001d40:	ffff0000 	.word	0xffff0000

08001d44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d006      	beq.n	8001d6e <I2C_MasterRequestWrite+0x2a>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d003      	beq.n	8001d6e <I2C_MasterRequestWrite+0x2a>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d6c:	d108      	bne.n	8001d80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e00b      	b.n	8001d98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d107      	bne.n	8001d98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f84f 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00d      	beq.n	8001dcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dbe:	d103      	bne.n	8001dc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e035      	b.n	8001e38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dd4:	d108      	bne.n	8001de8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	e01b      	b.n	8001e20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001de8:	897b      	ldrh	r3, [r7, #10]
 8001dea:	11db      	asrs	r3, r3, #7
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f003 0306 	and.w	r3, r3, #6
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f063 030f 	orn	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	490e      	ldr	r1, [pc, #56]	@ (8001e40 <I2C_MasterRequestWrite+0xfc>)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f898 	bl	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e010      	b.n	8001e38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4907      	ldr	r1, [pc, #28]	@ (8001e44 <I2C_MasterRequestWrite+0x100>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f888 	bl	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	00010008 	.word	0x00010008
 8001e44:	00010002 	.word	0x00010002

08001e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e58:	e048      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d044      	beq.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff fa1d 	bl	80012a0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d139      	bne.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10d      	bne.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	e00c      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d116      	bne.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e023      	b.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10d      	bne.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	43da      	mvns	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	e00c      	b.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d093      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4a:	e071      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5a:	d123      	bne.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e067      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d041      	beq.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fac:	f7ff f978 	bl	80012a0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d302      	bcc.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d136      	bne.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10c      	bne.n	8001fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e00b      	b.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e021      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10c      	bne.n	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	43da      	mvns	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e00b      	b.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4013      	ands	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f af6d 	bne.w	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002088:	e034      	b.n	80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f886 	bl	800219c <I2C_IsAcknowledgeFailed>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e034      	b.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d028      	beq.n	80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7ff f8fd 	bl	80012a0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11d      	bne.n	80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c2:	2b80      	cmp	r3, #128	@ 0x80
 80020c4:	d016      	beq.n	80020f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e007      	b.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fe:	2b80      	cmp	r3, #128	@ 0x80
 8002100:	d1c3      	bne.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002118:	e034      	b.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f83e 	bl	800219c <I2C_IsAcknowledgeFailed>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e034      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d028      	beq.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7ff f8b5 	bl	80012a0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11d      	bne.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d016      	beq.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d1c3      	bne.n	800211a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b2:	d11b      	bne.n	80021ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000006c 	.word	0x2000006c

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	0800344c 	.word	0x0800344c

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	0800344c 	.word	0x0800344c

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe ff28 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	@ 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f973 	bl	8002594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d175      	bne.n	8002410 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_UART_Transmit+0x2c>
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	@ 0x21
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002342:	f7fe ffad 	bl	80012a0 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002378:	e02e      	b.n	80023d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f848 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03a      	b.n	8002412 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e007      	b.n	80023ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cb      	bne.n	800237a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	@ 0x40
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f814 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	e03b      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d037      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe ff34 	bl	80012a0 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e03a      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b80      	cmp	r3, #128	@ 0x80
 8002460:	d020      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d01d      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d116      	bne.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f81d 	bl	80024cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2208      	movs	r2, #8
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00f      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d0b4      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b095      	sub	sp, #84	@ 0x54
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	61fb      	str	r3, [r7, #28]
   return(result);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3314      	adds	r3, #20
 8002526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800252e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	60bb      	str	r3, [r7, #8]
   return(result);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002564:	61ba      	str	r2, [r7, #24]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	613b      	str	r3, [r7, #16]
   return(result);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002586:	bf00      	nop
 8002588:	3754      	adds	r7, #84	@ 0x54
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b0c0      	sub	sp, #256	@ 0x100
 800259a:	af00      	add	r7, sp, #0
 800259c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	68d9      	ldr	r1, [r3, #12]
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	ea40 0301 	orr.w	r3, r0, r1
 80025bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025ec:	f021 010c 	bic.w	r1, r1, #12
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025fa:	430b      	orrs	r3, r1
 80025fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260e:	6999      	ldr	r1, [r3, #24]
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	ea40 0301 	orr.w	r3, r0, r1
 800261a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b8f      	ldr	r3, [pc, #572]	@ (8002860 <UART_SetConfig+0x2cc>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d005      	beq.n	8002634 <UART_SetConfig+0xa0>
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <UART_SetConfig+0x2d0>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002634:	f7ff fe02 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800263c:	e003      	b.n	8002646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263e:	f7ff fde9 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002650:	f040 810c 	bne.w	800286c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800265e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	1891      	adds	r1, r2, r2
 800266c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800266e:	415b      	adcs	r3, r3
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002676:	4621      	mov	r1, r4
 8002678:	eb12 0801 	adds.w	r8, r2, r1
 800267c:	4629      	mov	r1, r5
 800267e:	eb43 0901 	adc.w	r9, r3, r1
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002696:	4690      	mov	r8, r2
 8002698:	4699      	mov	r9, r3
 800269a:	4623      	mov	r3, r4
 800269c:	eb18 0303 	adds.w	r3, r8, r3
 80026a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb49 0303 	adc.w	r3, r9, r3
 80026aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026c2:	460b      	mov	r3, r1
 80026c4:	18db      	adds	r3, r3, r3
 80026c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026c8:	4613      	mov	r3, r2
 80026ca:	eb42 0303 	adc.w	r3, r2, r3
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80026d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026d8:	f7fd fdca 	bl	8000270 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <UART_SetConfig+0x2d4>)
 80026e2:	fba3 2302 	umull	r2, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	011c      	lsls	r4, r3, #4
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	1891      	adds	r1, r2, r2
 8002702:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002704:	415b      	adcs	r3, r3
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800270c:	4641      	mov	r1, r8
 800270e:	eb12 0a01 	adds.w	sl, r2, r1
 8002712:	4649      	mov	r1, r9
 8002714:	eb43 0b01 	adc.w	fp, r3, r1
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800272c:	4692      	mov	sl, r2
 800272e:	469b      	mov	fp, r3
 8002730:	4643      	mov	r3, r8
 8002732:	eb1a 0303 	adds.w	r3, sl, r3
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800273a:	464b      	mov	r3, r9
 800273c:	eb4b 0303 	adc.w	r3, fp, r3
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002758:	460b      	mov	r3, r1
 800275a:	18db      	adds	r3, r3, r3
 800275c:	643b      	str	r3, [r7, #64]	@ 0x40
 800275e:	4613      	mov	r3, r2
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
 8002766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800276a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800276e:	f7fd fd7f 	bl	8000270 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4611      	mov	r1, r2
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <UART_SetConfig+0x2d4>)
 800277a:	fba3 2301 	umull	r2, r3, r3, r1
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	@ 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1acb      	subs	r3, r1, r3
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002790:	fba3 2302 	umull	r2, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800279c:	441c      	add	r4, r3
 800279e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b8:	415b      	adcs	r3, r3
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027c0:	4641      	mov	r1, r8
 80027c2:	1851      	adds	r1, r2, r1
 80027c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80027c6:	4649      	mov	r1, r9
 80027c8:	414b      	adcs	r3, r1
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027d8:	4659      	mov	r1, fp
 80027da:	00cb      	lsls	r3, r1, #3
 80027dc:	4651      	mov	r1, sl
 80027de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e2:	4651      	mov	r1, sl
 80027e4:	00ca      	lsls	r2, r1, #3
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	4642      	mov	r2, r8
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027f4:	464b      	mov	r3, r9
 80027f6:	460a      	mov	r2, r1
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800280c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002814:	460b      	mov	r3, r1
 8002816:	18db      	adds	r3, r3, r3
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281a:	4613      	mov	r3, r2
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800282a:	f7fd fd21 	bl	8000270 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	@ 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3332      	adds	r3, #50	@ 0x32
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4422      	add	r2, r4
 800285a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800285c:	e106      	b.n	8002a6c <UART_SetConfig+0x4d8>
 800285e:	bf00      	nop
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800286c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800287a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800287e:	4642      	mov	r2, r8
 8002880:	464b      	mov	r3, r9
 8002882:	1891      	adds	r1, r2, r2
 8002884:	6239      	str	r1, [r7, #32]
 8002886:	415b      	adcs	r3, r3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288e:	4641      	mov	r1, r8
 8002890:	1854      	adds	r4, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb43 0501 	adc.w	r5, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b4:	464b      	mov	r3, r9
 80028b6:	eb45 0303 	adc.w	r3, r5, r3
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028da:	4629      	mov	r1, r5
 80028dc:	008b      	lsls	r3, r1, #2
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e4:	4621      	mov	r1, r4
 80028e6:	008a      	lsls	r2, r1, #2
 80028e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028ec:	f7fd fcc0 	bl	8000270 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4b60      	ldr	r3, [pc, #384]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80028f6:	fba3 2302 	umull	r2, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	011c      	lsls	r4, r3, #4
 80028fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800290c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002910:	4642      	mov	r2, r8
 8002912:	464b      	mov	r3, r9
 8002914:	1891      	adds	r1, r2, r2
 8002916:	61b9      	str	r1, [r7, #24]
 8002918:	415b      	adcs	r3, r3
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002920:	4641      	mov	r1, r8
 8002922:	1851      	adds	r1, r2, r1
 8002924:	6139      	str	r1, [r7, #16]
 8002926:	4649      	mov	r1, r9
 8002928:	414b      	adcs	r3, r1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002938:	4659      	mov	r1, fp
 800293a:	00cb      	lsls	r3, r1, #3
 800293c:	4651      	mov	r1, sl
 800293e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002942:	4651      	mov	r1, sl
 8002944:	00ca      	lsls	r2, r1, #3
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4603      	mov	r3, r0
 800294c:	4642      	mov	r2, r8
 800294e:	189b      	adds	r3, r3, r2
 8002950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002954:	464b      	mov	r3, r9
 8002956:	460a      	mov	r2, r1
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800296a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002978:	4649      	mov	r1, r9
 800297a:	008b      	lsls	r3, r1, #2
 800297c:	4641      	mov	r1, r8
 800297e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002982:	4641      	mov	r1, r8
 8002984:	008a      	lsls	r2, r1, #2
 8002986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800298a:	f7fd fc71 	bl	8000270 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4611      	mov	r1, r2
 8002994:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002996:	fba3 2301 	umull	r2, r3, r3, r1
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2264      	movs	r2, #100	@ 0x64
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	@ 0x32
 80029a8:	4a33      	ldr	r2, [pc, #204]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b4:	441c      	add	r4, r3
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80029be:	677a      	str	r2, [r7, #116]	@ 0x74
 80029c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029c4:	4642      	mov	r2, r8
 80029c6:	464b      	mov	r3, r9
 80029c8:	1891      	adds	r1, r2, r2
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	415b      	adcs	r3, r3
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d4:	4641      	mov	r1, r8
 80029d6:	1851      	adds	r1, r2, r1
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	4649      	mov	r1, r9
 80029dc:	414b      	adcs	r3, r1
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029ec:	4659      	mov	r1, fp
 80029ee:	00cb      	lsls	r3, r1, #3
 80029f0:	4651      	mov	r1, sl
 80029f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f6:	4651      	mov	r1, sl
 80029f8:	00ca      	lsls	r2, r1, #3
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	4642      	mov	r2, r8
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a06:	464b      	mov	r3, r9
 8002a08:	460a      	mov	r2, r1
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a28:	4649      	mov	r1, r9
 8002a2a:	008b      	lsls	r3, r1, #2
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a32:	4641      	mov	r1, r8
 8002a34:	008a      	lsls	r2, r1, #2
 8002a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a3a:	f7fd fc19 	bl	8000270 <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2164      	movs	r1, #100	@ 0x64
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	3332      	adds	r3, #50	@ 0x32
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4422      	add	r2, r4
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a72:	46bd      	mov	sp, r7
 8002a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a78:	51eb851f 	.word	0x51eb851f

08002a7c <siprintf>:
 8002a7c:	b40e      	push	{r1, r2, r3}
 8002a7e:	b500      	push	{lr}
 8002a80:	b09c      	sub	sp, #112	@ 0x70
 8002a82:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a84:	9002      	str	r0, [sp, #8]
 8002a86:	9006      	str	r0, [sp, #24]
 8002a88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a8c:	4809      	ldr	r0, [pc, #36]	@ (8002ab4 <siprintf+0x38>)
 8002a8e:	9107      	str	r1, [sp, #28]
 8002a90:	9104      	str	r1, [sp, #16]
 8002a92:	4909      	ldr	r1, [pc, #36]	@ (8002ab8 <siprintf+0x3c>)
 8002a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a98:	9105      	str	r1, [sp, #20]
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	a902      	add	r1, sp, #8
 8002aa0:	f000 f98c 	bl	8002dbc <_svfiprintf_r>
 8002aa4:	9b02      	ldr	r3, [sp, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	b01c      	add	sp, #112	@ 0x70
 8002aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ab0:	b003      	add	sp, #12
 8002ab2:	4770      	bx	lr
 8002ab4:	20000078 	.word	0x20000078
 8002ab8:	ffff0208 	.word	0xffff0208

08002abc <__errno>:
 8002abc:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <__errno+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000078 	.word	0x20000078

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4d0d      	ldr	r5, [pc, #52]	@ (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	@ (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	@ (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 fc66 	bl	80033ac <_init>
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08003490 	.word	0x08003490
 8002b04:	08003490 	.word	0x08003490
 8002b08:	08003490 	.word	0x08003490
 8002b0c:	08003494 	.word	0x08003494

08002b10 <__retarget_lock_acquire_recursive>:
 8002b10:	4770      	bx	lr

08002b12 <__retarget_lock_release_recursive>:
 8002b12:	4770      	bx	lr

08002b14 <_free_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4605      	mov	r5, r0
 8002b18:	2900      	cmp	r1, #0
 8002b1a:	d041      	beq.n	8002ba0 <_free_r+0x8c>
 8002b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b20:	1f0c      	subs	r4, r1, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bfb8      	it	lt
 8002b26:	18e4      	addlt	r4, r4, r3
 8002b28:	f000 f8e0 	bl	8002cec <__malloc_lock>
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <_free_r+0x90>)
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	b933      	cbnz	r3, 8002b40 <_free_r+0x2c>
 8002b32:	6063      	str	r3, [r4, #4]
 8002b34:	6014      	str	r4, [r2, #0]
 8002b36:	4628      	mov	r0, r5
 8002b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b3c:	f000 b8dc 	b.w	8002cf8 <__malloc_unlock>
 8002b40:	42a3      	cmp	r3, r4
 8002b42:	d908      	bls.n	8002b56 <_free_r+0x42>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	bf01      	itttt	eq
 8002b4c:	6819      	ldreq	r1, [r3, #0]
 8002b4e:	685b      	ldreq	r3, [r3, #4]
 8002b50:	1809      	addeq	r1, r1, r0
 8002b52:	6021      	streq	r1, [r4, #0]
 8002b54:	e7ed      	b.n	8002b32 <_free_r+0x1e>
 8002b56:	461a      	mov	r2, r3
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	b10b      	cbz	r3, 8002b60 <_free_r+0x4c>
 8002b5c:	42a3      	cmp	r3, r4
 8002b5e:	d9fa      	bls.n	8002b56 <_free_r+0x42>
 8002b60:	6811      	ldr	r1, [r2, #0]
 8002b62:	1850      	adds	r0, r2, r1
 8002b64:	42a0      	cmp	r0, r4
 8002b66:	d10b      	bne.n	8002b80 <_free_r+0x6c>
 8002b68:	6820      	ldr	r0, [r4, #0]
 8002b6a:	4401      	add	r1, r0
 8002b6c:	1850      	adds	r0, r2, r1
 8002b6e:	4283      	cmp	r3, r0
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	d1e0      	bne.n	8002b36 <_free_r+0x22>
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	6053      	str	r3, [r2, #4]
 8002b7a:	4408      	add	r0, r1
 8002b7c:	6010      	str	r0, [r2, #0]
 8002b7e:	e7da      	b.n	8002b36 <_free_r+0x22>
 8002b80:	d902      	bls.n	8002b88 <_free_r+0x74>
 8002b82:	230c      	movs	r3, #12
 8002b84:	602b      	str	r3, [r5, #0]
 8002b86:	e7d6      	b.n	8002b36 <_free_r+0x22>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	1821      	adds	r1, r4, r0
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	bf04      	itt	eq
 8002b90:	6819      	ldreq	r1, [r3, #0]
 8002b92:	685b      	ldreq	r3, [r3, #4]
 8002b94:	6063      	str	r3, [r4, #4]
 8002b96:	bf04      	itt	eq
 8002b98:	1809      	addeq	r1, r1, r0
 8002b9a:	6021      	streq	r1, [r4, #0]
 8002b9c:	6054      	str	r4, [r2, #4]
 8002b9e:	e7ca      	b.n	8002b36 <_free_r+0x22>
 8002ba0:	bd38      	pop	{r3, r4, r5, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200002d0 	.word	0x200002d0

08002ba8 <sbrk_aligned>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	4e0f      	ldr	r6, [pc, #60]	@ (8002be8 <sbrk_aligned+0x40>)
 8002bac:	460c      	mov	r4, r1
 8002bae:	6831      	ldr	r1, [r6, #0]
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	b911      	cbnz	r1, 8002bba <sbrk_aligned+0x12>
 8002bb4:	f000 fba6 	bl	8003304 <_sbrk_r>
 8002bb8:	6030      	str	r0, [r6, #0]
 8002bba:	4621      	mov	r1, r4
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f000 fba1 	bl	8003304 <_sbrk_r>
 8002bc2:	1c43      	adds	r3, r0, #1
 8002bc4:	d103      	bne.n	8002bce <sbrk_aligned+0x26>
 8002bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8002bca:	4620      	mov	r0, r4
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	1cc4      	adds	r4, r0, #3
 8002bd0:	f024 0403 	bic.w	r4, r4, #3
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d0f8      	beq.n	8002bca <sbrk_aligned+0x22>
 8002bd8:	1a21      	subs	r1, r4, r0
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 fb92 	bl	8003304 <_sbrk_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d1f2      	bne.n	8002bca <sbrk_aligned+0x22>
 8002be4:	e7ef      	b.n	8002bc6 <sbrk_aligned+0x1e>
 8002be6:	bf00      	nop
 8002be8:	200002cc 	.word	0x200002cc

08002bec <_malloc_r>:
 8002bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf0:	1ccd      	adds	r5, r1, #3
 8002bf2:	f025 0503 	bic.w	r5, r5, #3
 8002bf6:	3508      	adds	r5, #8
 8002bf8:	2d0c      	cmp	r5, #12
 8002bfa:	bf38      	it	cc
 8002bfc:	250c      	movcc	r5, #12
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	4606      	mov	r6, r0
 8002c02:	db01      	blt.n	8002c08 <_malloc_r+0x1c>
 8002c04:	42a9      	cmp	r1, r5
 8002c06:	d904      	bls.n	8002c12 <_malloc_r+0x26>
 8002c08:	230c      	movs	r3, #12
 8002c0a:	6033      	str	r3, [r6, #0]
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ce8 <_malloc_r+0xfc>
 8002c16:	f000 f869 	bl	8002cec <__malloc_lock>
 8002c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c1e:	461c      	mov	r4, r3
 8002c20:	bb44      	cbnz	r4, 8002c74 <_malloc_r+0x88>
 8002c22:	4629      	mov	r1, r5
 8002c24:	4630      	mov	r0, r6
 8002c26:	f7ff ffbf 	bl	8002ba8 <sbrk_aligned>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	d158      	bne.n	8002ce2 <_malloc_r+0xf6>
 8002c30:	f8d8 4000 	ldr.w	r4, [r8]
 8002c34:	4627      	mov	r7, r4
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d143      	bne.n	8002cc2 <_malloc_r+0xd6>
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d04b      	beq.n	8002cd6 <_malloc_r+0xea>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	4639      	mov	r1, r7
 8002c42:	4630      	mov	r0, r6
 8002c44:	eb04 0903 	add.w	r9, r4, r3
 8002c48:	f000 fb5c 	bl	8003304 <_sbrk_r>
 8002c4c:	4581      	cmp	r9, r0
 8002c4e:	d142      	bne.n	8002cd6 <_malloc_r+0xea>
 8002c50:	6821      	ldr	r1, [r4, #0]
 8002c52:	1a6d      	subs	r5, r5, r1
 8002c54:	4629      	mov	r1, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	f7ff ffa6 	bl	8002ba8 <sbrk_aligned>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d03a      	beq.n	8002cd6 <_malloc_r+0xea>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	442b      	add	r3, r5
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	f8d8 3000 	ldr.w	r3, [r8]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	bb62      	cbnz	r2, 8002cc8 <_malloc_r+0xdc>
 8002c6e:	f8c8 7000 	str.w	r7, [r8]
 8002c72:	e00f      	b.n	8002c94 <_malloc_r+0xa8>
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	1b52      	subs	r2, r2, r5
 8002c78:	d420      	bmi.n	8002cbc <_malloc_r+0xd0>
 8002c7a:	2a0b      	cmp	r2, #11
 8002c7c:	d917      	bls.n	8002cae <_malloc_r+0xc2>
 8002c7e:	1961      	adds	r1, r4, r5
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	6025      	str	r5, [r4, #0]
 8002c84:	bf18      	it	ne
 8002c86:	6059      	strne	r1, [r3, #4]
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	bf08      	it	eq
 8002c8c:	f8c8 1000 	streq.w	r1, [r8]
 8002c90:	5162      	str	r2, [r4, r5]
 8002c92:	604b      	str	r3, [r1, #4]
 8002c94:	4630      	mov	r0, r6
 8002c96:	f000 f82f 	bl	8002cf8 <__malloc_unlock>
 8002c9a:	f104 000b 	add.w	r0, r4, #11
 8002c9e:	1d23      	adds	r3, r4, #4
 8002ca0:	f020 0007 	bic.w	r0, r0, #7
 8002ca4:	1ac2      	subs	r2, r0, r3
 8002ca6:	bf1c      	itt	ne
 8002ca8:	1a1b      	subne	r3, r3, r0
 8002caa:	50a3      	strne	r3, [r4, r2]
 8002cac:	e7af      	b.n	8002c0e <_malloc_r+0x22>
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	bf0c      	ite	eq
 8002cb4:	f8c8 2000 	streq.w	r2, [r8]
 8002cb8:	605a      	strne	r2, [r3, #4]
 8002cba:	e7eb      	b.n	8002c94 <_malloc_r+0xa8>
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	6864      	ldr	r4, [r4, #4]
 8002cc0:	e7ae      	b.n	8002c20 <_malloc_r+0x34>
 8002cc2:	463c      	mov	r4, r7
 8002cc4:	687f      	ldr	r7, [r7, #4]
 8002cc6:	e7b6      	b.n	8002c36 <_malloc_r+0x4a>
 8002cc8:	461a      	mov	r2, r3
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	d1fb      	bne.n	8002cc8 <_malloc_r+0xdc>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6053      	str	r3, [r2, #4]
 8002cd4:	e7de      	b.n	8002c94 <_malloc_r+0xa8>
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	6033      	str	r3, [r6, #0]
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f000 f80c 	bl	8002cf8 <__malloc_unlock>
 8002ce0:	e794      	b.n	8002c0c <_malloc_r+0x20>
 8002ce2:	6005      	str	r5, [r0, #0]
 8002ce4:	e7d6      	b.n	8002c94 <_malloc_r+0xa8>
 8002ce6:	bf00      	nop
 8002ce8:	200002d0 	.word	0x200002d0

08002cec <__malloc_lock>:
 8002cec:	4801      	ldr	r0, [pc, #4]	@ (8002cf4 <__malloc_lock+0x8>)
 8002cee:	f7ff bf0f 	b.w	8002b10 <__retarget_lock_acquire_recursive>
 8002cf2:	bf00      	nop
 8002cf4:	200002c8 	.word	0x200002c8

08002cf8 <__malloc_unlock>:
 8002cf8:	4801      	ldr	r0, [pc, #4]	@ (8002d00 <__malloc_unlock+0x8>)
 8002cfa:	f7ff bf0a 	b.w	8002b12 <__retarget_lock_release_recursive>
 8002cfe:	bf00      	nop
 8002d00:	200002c8 	.word	0x200002c8

08002d04 <__ssputs_r>:
 8002d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d08:	688e      	ldr	r6, [r1, #8]
 8002d0a:	461f      	mov	r7, r3
 8002d0c:	42be      	cmp	r6, r7
 8002d0e:	680b      	ldr	r3, [r1, #0]
 8002d10:	4682      	mov	sl, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	d82d      	bhi.n	8002d74 <__ssputs_r+0x70>
 8002d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d20:	d026      	beq.n	8002d70 <__ssputs_r+0x6c>
 8002d22:	6965      	ldr	r5, [r4, #20]
 8002d24:	6909      	ldr	r1, [r1, #16]
 8002d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d2a:	eba3 0901 	sub.w	r9, r3, r1
 8002d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d32:	1c7b      	adds	r3, r7, #1
 8002d34:	444b      	add	r3, r9
 8002d36:	106d      	asrs	r5, r5, #1
 8002d38:	429d      	cmp	r5, r3
 8002d3a:	bf38      	it	cc
 8002d3c:	461d      	movcc	r5, r3
 8002d3e:	0553      	lsls	r3, r2, #21
 8002d40:	d527      	bpl.n	8002d92 <__ssputs_r+0x8e>
 8002d42:	4629      	mov	r1, r5
 8002d44:	f7ff ff52 	bl	8002bec <_malloc_r>
 8002d48:	4606      	mov	r6, r0
 8002d4a:	b360      	cbz	r0, 8002da6 <__ssputs_r+0xa2>
 8002d4c:	6921      	ldr	r1, [r4, #16]
 8002d4e:	464a      	mov	r2, r9
 8002d50:	f000 fae8 	bl	8003324 <memcpy>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d5e:	81a3      	strh	r3, [r4, #12]
 8002d60:	6126      	str	r6, [r4, #16]
 8002d62:	6165      	str	r5, [r4, #20]
 8002d64:	444e      	add	r6, r9
 8002d66:	eba5 0509 	sub.w	r5, r5, r9
 8002d6a:	6026      	str	r6, [r4, #0]
 8002d6c:	60a5      	str	r5, [r4, #8]
 8002d6e:	463e      	mov	r6, r7
 8002d70:	42be      	cmp	r6, r7
 8002d72:	d900      	bls.n	8002d76 <__ssputs_r+0x72>
 8002d74:	463e      	mov	r6, r7
 8002d76:	6820      	ldr	r0, [r4, #0]
 8002d78:	4632      	mov	r2, r6
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	f000 faa8 	bl	80032d0 <memmove>
 8002d80:	68a3      	ldr	r3, [r4, #8]
 8002d82:	1b9b      	subs	r3, r3, r6
 8002d84:	60a3      	str	r3, [r4, #8]
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	4433      	add	r3, r6
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d92:	462a      	mov	r2, r5
 8002d94:	f000 fad4 	bl	8003340 <_realloc_r>
 8002d98:	4606      	mov	r6, r0
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d1e0      	bne.n	8002d60 <__ssputs_r+0x5c>
 8002d9e:	6921      	ldr	r1, [r4, #16]
 8002da0:	4650      	mov	r0, sl
 8002da2:	f7ff feb7 	bl	8002b14 <_free_r>
 8002da6:	230c      	movs	r3, #12
 8002da8:	f8ca 3000 	str.w	r3, [sl]
 8002dac:	89a3      	ldrh	r3, [r4, #12]
 8002dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	e7e9      	b.n	8002d8e <__ssputs_r+0x8a>
	...

08002dbc <_svfiprintf_r>:
 8002dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	898b      	ldrh	r3, [r1, #12]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	b09d      	sub	sp, #116	@ 0x74
 8002dc8:	4607      	mov	r7, r0
 8002dca:	460d      	mov	r5, r1
 8002dcc:	4614      	mov	r4, r2
 8002dce:	d510      	bpl.n	8002df2 <_svfiprintf_r+0x36>
 8002dd0:	690b      	ldr	r3, [r1, #16]
 8002dd2:	b973      	cbnz	r3, 8002df2 <_svfiprintf_r+0x36>
 8002dd4:	2140      	movs	r1, #64	@ 0x40
 8002dd6:	f7ff ff09 	bl	8002bec <_malloc_r>
 8002dda:	6028      	str	r0, [r5, #0]
 8002ddc:	6128      	str	r0, [r5, #16]
 8002dde:	b930      	cbnz	r0, 8002dee <_svfiprintf_r+0x32>
 8002de0:	230c      	movs	r3, #12
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	b01d      	add	sp, #116	@ 0x74
 8002dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dee:	2340      	movs	r3, #64	@ 0x40
 8002df0:	616b      	str	r3, [r5, #20]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002df6:	2320      	movs	r3, #32
 8002df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e00:	2330      	movs	r3, #48	@ 0x30
 8002e02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002fa0 <_svfiprintf_r+0x1e4>
 8002e06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e0a:	f04f 0901 	mov.w	r9, #1
 8002e0e:	4623      	mov	r3, r4
 8002e10:	469a      	mov	sl, r3
 8002e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e16:	b10a      	cbz	r2, 8002e1c <_svfiprintf_r+0x60>
 8002e18:	2a25      	cmp	r2, #37	@ 0x25
 8002e1a:	d1f9      	bne.n	8002e10 <_svfiprintf_r+0x54>
 8002e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e20:	d00b      	beq.n	8002e3a <_svfiprintf_r+0x7e>
 8002e22:	465b      	mov	r3, fp
 8002e24:	4622      	mov	r2, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	4638      	mov	r0, r7
 8002e2a:	f7ff ff6b 	bl	8002d04 <__ssputs_r>
 8002e2e:	3001      	adds	r0, #1
 8002e30:	f000 80a7 	beq.w	8002f82 <_svfiprintf_r+0x1c6>
 8002e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e36:	445a      	add	r2, fp
 8002e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 809f 	beq.w	8002f82 <_svfiprintf_r+0x1c6>
 8002e44:	2300      	movs	r3, #0
 8002e46:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e4e:	f10a 0a01 	add.w	sl, sl, #1
 8002e52:	9304      	str	r3, [sp, #16]
 8002e54:	9307      	str	r3, [sp, #28]
 8002e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e5c:	4654      	mov	r4, sl
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e64:	484e      	ldr	r0, [pc, #312]	@ (8002fa0 <_svfiprintf_r+0x1e4>)
 8002e66:	f7fd f9b3 	bl	80001d0 <memchr>
 8002e6a:	9a04      	ldr	r2, [sp, #16]
 8002e6c:	b9d8      	cbnz	r0, 8002ea6 <_svfiprintf_r+0xea>
 8002e6e:	06d0      	lsls	r0, r2, #27
 8002e70:	bf44      	itt	mi
 8002e72:	2320      	movmi	r3, #32
 8002e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e78:	0711      	lsls	r1, r2, #28
 8002e7a:	bf44      	itt	mi
 8002e7c:	232b      	movmi	r3, #43	@ 0x2b
 8002e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e82:	f89a 3000 	ldrb.w	r3, [sl]
 8002e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e88:	d015      	beq.n	8002eb6 <_svfiprintf_r+0xfa>
 8002e8a:	9a07      	ldr	r2, [sp, #28]
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f04f 0c0a 	mov.w	ip, #10
 8002e94:	4621      	mov	r1, r4
 8002e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e9a:	3b30      	subs	r3, #48	@ 0x30
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d94b      	bls.n	8002f38 <_svfiprintf_r+0x17c>
 8002ea0:	b1b0      	cbz	r0, 8002ed0 <_svfiprintf_r+0x114>
 8002ea2:	9207      	str	r2, [sp, #28]
 8002ea4:	e014      	b.n	8002ed0 <_svfiprintf_r+0x114>
 8002ea6:	eba0 0308 	sub.w	r3, r0, r8
 8002eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	46a2      	mov	sl, r4
 8002eb4:	e7d2      	b.n	8002e5c <_svfiprintf_r+0xa0>
 8002eb6:	9b03      	ldr	r3, [sp, #12]
 8002eb8:	1d19      	adds	r1, r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	9103      	str	r1, [sp, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bfbb      	ittet	lt
 8002ec2:	425b      	neglt	r3, r3
 8002ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ec8:	9307      	strge	r3, [sp, #28]
 8002eca:	9307      	strlt	r3, [sp, #28]
 8002ecc:	bfb8      	it	lt
 8002ece:	9204      	strlt	r2, [sp, #16]
 8002ed0:	7823      	ldrb	r3, [r4, #0]
 8002ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ed4:	d10a      	bne.n	8002eec <_svfiprintf_r+0x130>
 8002ed6:	7863      	ldrb	r3, [r4, #1]
 8002ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eda:	d132      	bne.n	8002f42 <_svfiprintf_r+0x186>
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	1d1a      	adds	r2, r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	9203      	str	r2, [sp, #12]
 8002ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ee8:	3402      	adds	r4, #2
 8002eea:	9305      	str	r3, [sp, #20]
 8002eec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002fb0 <_svfiprintf_r+0x1f4>
 8002ef0:	7821      	ldrb	r1, [r4, #0]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	f7fd f96b 	bl	80001d0 <memchr>
 8002efa:	b138      	cbz	r0, 8002f0c <_svfiprintf_r+0x150>
 8002efc:	9b04      	ldr	r3, [sp, #16]
 8002efe:	eba0 000a 	sub.w	r0, r0, sl
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	4082      	lsls	r2, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	3401      	adds	r4, #1
 8002f0a:	9304      	str	r3, [sp, #16]
 8002f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f10:	4824      	ldr	r0, [pc, #144]	@ (8002fa4 <_svfiprintf_r+0x1e8>)
 8002f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f16:	2206      	movs	r2, #6
 8002f18:	f7fd f95a 	bl	80001d0 <memchr>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d036      	beq.n	8002f8e <_svfiprintf_r+0x1d2>
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <_svfiprintf_r+0x1ec>)
 8002f22:	bb1b      	cbnz	r3, 8002f6c <_svfiprintf_r+0x1b0>
 8002f24:	9b03      	ldr	r3, [sp, #12]
 8002f26:	3307      	adds	r3, #7
 8002f28:	f023 0307 	bic.w	r3, r3, #7
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f32:	4433      	add	r3, r6
 8002f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f36:	e76a      	b.n	8002e0e <_svfiprintf_r+0x52>
 8002f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e7a8      	b.n	8002e94 <_svfiprintf_r+0xd8>
 8002f42:	2300      	movs	r3, #0
 8002f44:	3401      	adds	r4, #1
 8002f46:	9305      	str	r3, [sp, #20]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f04f 0c0a 	mov.w	ip, #10
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f54:	3a30      	subs	r2, #48	@ 0x30
 8002f56:	2a09      	cmp	r2, #9
 8002f58:	d903      	bls.n	8002f62 <_svfiprintf_r+0x1a6>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0c6      	beq.n	8002eec <_svfiprintf_r+0x130>
 8002f5e:	9105      	str	r1, [sp, #20]
 8002f60:	e7c4      	b.n	8002eec <_svfiprintf_r+0x130>
 8002f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f66:	4604      	mov	r4, r0
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e7f0      	b.n	8002f4e <_svfiprintf_r+0x192>
 8002f6c:	ab03      	add	r3, sp, #12
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	462a      	mov	r2, r5
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <_svfiprintf_r+0x1f0>)
 8002f74:	a904      	add	r1, sp, #16
 8002f76:	4638      	mov	r0, r7
 8002f78:	f3af 8000 	nop.w
 8002f7c:	1c42      	adds	r2, r0, #1
 8002f7e:	4606      	mov	r6, r0
 8002f80:	d1d6      	bne.n	8002f30 <_svfiprintf_r+0x174>
 8002f82:	89ab      	ldrh	r3, [r5, #12]
 8002f84:	065b      	lsls	r3, r3, #25
 8002f86:	f53f af2d 	bmi.w	8002de4 <_svfiprintf_r+0x28>
 8002f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f8c:	e72c      	b.n	8002de8 <_svfiprintf_r+0x2c>
 8002f8e:	ab03      	add	r3, sp, #12
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	462a      	mov	r2, r5
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <_svfiprintf_r+0x1f0>)
 8002f96:	a904      	add	r1, sp, #16
 8002f98:	4638      	mov	r0, r7
 8002f9a:	f000 f879 	bl	8003090 <_printf_i>
 8002f9e:	e7ed      	b.n	8002f7c <_svfiprintf_r+0x1c0>
 8002fa0:	08003454 	.word	0x08003454
 8002fa4:	0800345e 	.word	0x0800345e
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	08002d05 	.word	0x08002d05
 8002fb0:	0800345a 	.word	0x0800345a

08002fb4 <_printf_common>:
 8002fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb8:	4616      	mov	r6, r2
 8002fba:	4698      	mov	r8, r3
 8002fbc:	688a      	ldr	r2, [r1, #8]
 8002fbe:	690b      	ldr	r3, [r1, #16]
 8002fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bfb8      	it	lt
 8002fc8:	4613      	movlt	r3, r2
 8002fca:	6033      	str	r3, [r6, #0]
 8002fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	b10a      	cbz	r2, 8002fda <_printf_common+0x26>
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	6033      	str	r3, [r6, #0]
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	0699      	lsls	r1, r3, #26
 8002fde:	bf42      	ittt	mi
 8002fe0:	6833      	ldrmi	r3, [r6, #0]
 8002fe2:	3302      	addmi	r3, #2
 8002fe4:	6033      	strmi	r3, [r6, #0]
 8002fe6:	6825      	ldr	r5, [r4, #0]
 8002fe8:	f015 0506 	ands.w	r5, r5, #6
 8002fec:	d106      	bne.n	8002ffc <_printf_common+0x48>
 8002fee:	f104 0a19 	add.w	sl, r4, #25
 8002ff2:	68e3      	ldr	r3, [r4, #12]
 8002ff4:	6832      	ldr	r2, [r6, #0]
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	42ab      	cmp	r3, r5
 8002ffa:	dc26      	bgt.n	800304a <_printf_common+0x96>
 8002ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003000:	6822      	ldr	r2, [r4, #0]
 8003002:	3b00      	subs	r3, #0
 8003004:	bf18      	it	ne
 8003006:	2301      	movne	r3, #1
 8003008:	0692      	lsls	r2, r2, #26
 800300a:	d42b      	bmi.n	8003064 <_printf_common+0xb0>
 800300c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003010:	4641      	mov	r1, r8
 8003012:	4638      	mov	r0, r7
 8003014:	47c8      	blx	r9
 8003016:	3001      	adds	r0, #1
 8003018:	d01e      	beq.n	8003058 <_printf_common+0xa4>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	6922      	ldr	r2, [r4, #16]
 800301e:	f003 0306 	and.w	r3, r3, #6
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf02      	ittt	eq
 8003026:	68e5      	ldreq	r5, [r4, #12]
 8003028:	6833      	ldreq	r3, [r6, #0]
 800302a:	1aed      	subeq	r5, r5, r3
 800302c:	68a3      	ldr	r3, [r4, #8]
 800302e:	bf0c      	ite	eq
 8003030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003034:	2500      	movne	r5, #0
 8003036:	4293      	cmp	r3, r2
 8003038:	bfc4      	itt	gt
 800303a:	1a9b      	subgt	r3, r3, r2
 800303c:	18ed      	addgt	r5, r5, r3
 800303e:	2600      	movs	r6, #0
 8003040:	341a      	adds	r4, #26
 8003042:	42b5      	cmp	r5, r6
 8003044:	d11a      	bne.n	800307c <_printf_common+0xc8>
 8003046:	2000      	movs	r0, #0
 8003048:	e008      	b.n	800305c <_printf_common+0xa8>
 800304a:	2301      	movs	r3, #1
 800304c:	4652      	mov	r2, sl
 800304e:	4641      	mov	r1, r8
 8003050:	4638      	mov	r0, r7
 8003052:	47c8      	blx	r9
 8003054:	3001      	adds	r0, #1
 8003056:	d103      	bne.n	8003060 <_printf_common+0xac>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	3501      	adds	r5, #1
 8003062:	e7c6      	b.n	8002ff2 <_printf_common+0x3e>
 8003064:	18e1      	adds	r1, r4, r3
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	2030      	movs	r0, #48	@ 0x30
 800306a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800306e:	4422      	add	r2, r4
 8003070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003078:	3302      	adds	r3, #2
 800307a:	e7c7      	b.n	800300c <_printf_common+0x58>
 800307c:	2301      	movs	r3, #1
 800307e:	4622      	mov	r2, r4
 8003080:	4641      	mov	r1, r8
 8003082:	4638      	mov	r0, r7
 8003084:	47c8      	blx	r9
 8003086:	3001      	adds	r0, #1
 8003088:	d0e6      	beq.n	8003058 <_printf_common+0xa4>
 800308a:	3601      	adds	r6, #1
 800308c:	e7d9      	b.n	8003042 <_printf_common+0x8e>
	...

08003090 <_printf_i>:
 8003090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	7e0f      	ldrb	r7, [r1, #24]
 8003096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003098:	2f78      	cmp	r7, #120	@ 0x78
 800309a:	4691      	mov	r9, r2
 800309c:	4680      	mov	r8, r0
 800309e:	460c      	mov	r4, r1
 80030a0:	469a      	mov	sl, r3
 80030a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030a6:	d807      	bhi.n	80030b8 <_printf_i+0x28>
 80030a8:	2f62      	cmp	r7, #98	@ 0x62
 80030aa:	d80a      	bhi.n	80030c2 <_printf_i+0x32>
 80030ac:	2f00      	cmp	r7, #0
 80030ae:	f000 80d2 	beq.w	8003256 <_printf_i+0x1c6>
 80030b2:	2f58      	cmp	r7, #88	@ 0x58
 80030b4:	f000 80b9 	beq.w	800322a <_printf_i+0x19a>
 80030b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030c0:	e03a      	b.n	8003138 <_printf_i+0xa8>
 80030c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030c6:	2b15      	cmp	r3, #21
 80030c8:	d8f6      	bhi.n	80030b8 <_printf_i+0x28>
 80030ca:	a101      	add	r1, pc, #4	@ (adr r1, 80030d0 <_printf_i+0x40>)
 80030cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030d0:	08003129 	.word	0x08003129
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	080030b9 	.word	0x080030b9
 80030dc:	080030b9 	.word	0x080030b9
 80030e0:	080030b9 	.word	0x080030b9
 80030e4:	080030b9 	.word	0x080030b9
 80030e8:	0800313d 	.word	0x0800313d
 80030ec:	080030b9 	.word	0x080030b9
 80030f0:	080030b9 	.word	0x080030b9
 80030f4:	080030b9 	.word	0x080030b9
 80030f8:	080030b9 	.word	0x080030b9
 80030fc:	0800323d 	.word	0x0800323d
 8003100:	08003167 	.word	0x08003167
 8003104:	080031f7 	.word	0x080031f7
 8003108:	080030b9 	.word	0x080030b9
 800310c:	080030b9 	.word	0x080030b9
 8003110:	0800325f 	.word	0x0800325f
 8003114:	080030b9 	.word	0x080030b9
 8003118:	08003167 	.word	0x08003167
 800311c:	080030b9 	.word	0x080030b9
 8003120:	080030b9 	.word	0x080030b9
 8003124:	080031ff 	.word	0x080031ff
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6032      	str	r2, [r6, #0]
 8003130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003138:	2301      	movs	r3, #1
 800313a:	e09d      	b.n	8003278 <_printf_i+0x1e8>
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	1d19      	adds	r1, r3, #4
 8003142:	6031      	str	r1, [r6, #0]
 8003144:	0606      	lsls	r6, r0, #24
 8003146:	d501      	bpl.n	800314c <_printf_i+0xbc>
 8003148:	681d      	ldr	r5, [r3, #0]
 800314a:	e003      	b.n	8003154 <_printf_i+0xc4>
 800314c:	0645      	lsls	r5, r0, #25
 800314e:	d5fb      	bpl.n	8003148 <_printf_i+0xb8>
 8003150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003154:	2d00      	cmp	r5, #0
 8003156:	da03      	bge.n	8003160 <_printf_i+0xd0>
 8003158:	232d      	movs	r3, #45	@ 0x2d
 800315a:	426d      	negs	r5, r5
 800315c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003160:	4859      	ldr	r0, [pc, #356]	@ (80032c8 <_printf_i+0x238>)
 8003162:	230a      	movs	r3, #10
 8003164:	e011      	b.n	800318a <_printf_i+0xfa>
 8003166:	6821      	ldr	r1, [r4, #0]
 8003168:	6833      	ldr	r3, [r6, #0]
 800316a:	0608      	lsls	r0, r1, #24
 800316c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003170:	d402      	bmi.n	8003178 <_printf_i+0xe8>
 8003172:	0649      	lsls	r1, r1, #25
 8003174:	bf48      	it	mi
 8003176:	b2ad      	uxthmi	r5, r5
 8003178:	2f6f      	cmp	r7, #111	@ 0x6f
 800317a:	4853      	ldr	r0, [pc, #332]	@ (80032c8 <_printf_i+0x238>)
 800317c:	6033      	str	r3, [r6, #0]
 800317e:	bf14      	ite	ne
 8003180:	230a      	movne	r3, #10
 8003182:	2308      	moveq	r3, #8
 8003184:	2100      	movs	r1, #0
 8003186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800318a:	6866      	ldr	r6, [r4, #4]
 800318c:	60a6      	str	r6, [r4, #8]
 800318e:	2e00      	cmp	r6, #0
 8003190:	bfa2      	ittt	ge
 8003192:	6821      	ldrge	r1, [r4, #0]
 8003194:	f021 0104 	bicge.w	r1, r1, #4
 8003198:	6021      	strge	r1, [r4, #0]
 800319a:	b90d      	cbnz	r5, 80031a0 <_printf_i+0x110>
 800319c:	2e00      	cmp	r6, #0
 800319e:	d04b      	beq.n	8003238 <_printf_i+0x1a8>
 80031a0:	4616      	mov	r6, r2
 80031a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80031a6:	fb03 5711 	mls	r7, r3, r1, r5
 80031aa:	5dc7      	ldrb	r7, [r0, r7]
 80031ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031b0:	462f      	mov	r7, r5
 80031b2:	42bb      	cmp	r3, r7
 80031b4:	460d      	mov	r5, r1
 80031b6:	d9f4      	bls.n	80031a2 <_printf_i+0x112>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d10b      	bne.n	80031d4 <_printf_i+0x144>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	07df      	lsls	r7, r3, #31
 80031c0:	d508      	bpl.n	80031d4 <_printf_i+0x144>
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	6861      	ldr	r1, [r4, #4]
 80031c6:	4299      	cmp	r1, r3
 80031c8:	bfde      	ittt	le
 80031ca:	2330      	movle	r3, #48	@ 0x30
 80031cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031d4:	1b92      	subs	r2, r2, r6
 80031d6:	6122      	str	r2, [r4, #16]
 80031d8:	f8cd a000 	str.w	sl, [sp]
 80031dc:	464b      	mov	r3, r9
 80031de:	aa03      	add	r2, sp, #12
 80031e0:	4621      	mov	r1, r4
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7ff fee6 	bl	8002fb4 <_printf_common>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d14a      	bne.n	8003282 <_printf_i+0x1f2>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	b004      	add	sp, #16
 80031f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	4833      	ldr	r0, [pc, #204]	@ (80032cc <_printf_i+0x23c>)
 8003200:	2778      	movs	r7, #120	@ 0x78
 8003202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	6831      	ldr	r1, [r6, #0]
 800320a:	061f      	lsls	r7, r3, #24
 800320c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003210:	d402      	bmi.n	8003218 <_printf_i+0x188>
 8003212:	065f      	lsls	r7, r3, #25
 8003214:	bf48      	it	mi
 8003216:	b2ad      	uxthmi	r5, r5
 8003218:	6031      	str	r1, [r6, #0]
 800321a:	07d9      	lsls	r1, r3, #31
 800321c:	bf44      	itt	mi
 800321e:	f043 0320 	orrmi.w	r3, r3, #32
 8003222:	6023      	strmi	r3, [r4, #0]
 8003224:	b11d      	cbz	r5, 800322e <_printf_i+0x19e>
 8003226:	2310      	movs	r3, #16
 8003228:	e7ac      	b.n	8003184 <_printf_i+0xf4>
 800322a:	4827      	ldr	r0, [pc, #156]	@ (80032c8 <_printf_i+0x238>)
 800322c:	e7e9      	b.n	8003202 <_printf_i+0x172>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	f023 0320 	bic.w	r3, r3, #32
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	e7f6      	b.n	8003226 <_printf_i+0x196>
 8003238:	4616      	mov	r6, r2
 800323a:	e7bd      	b.n	80031b8 <_printf_i+0x128>
 800323c:	6833      	ldr	r3, [r6, #0]
 800323e:	6825      	ldr	r5, [r4, #0]
 8003240:	6961      	ldr	r1, [r4, #20]
 8003242:	1d18      	adds	r0, r3, #4
 8003244:	6030      	str	r0, [r6, #0]
 8003246:	062e      	lsls	r6, r5, #24
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	d501      	bpl.n	8003250 <_printf_i+0x1c0>
 800324c:	6019      	str	r1, [r3, #0]
 800324e:	e002      	b.n	8003256 <_printf_i+0x1c6>
 8003250:	0668      	lsls	r0, r5, #25
 8003252:	d5fb      	bpl.n	800324c <_printf_i+0x1bc>
 8003254:	8019      	strh	r1, [r3, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	6123      	str	r3, [r4, #16]
 800325a:	4616      	mov	r6, r2
 800325c:	e7bc      	b.n	80031d8 <_printf_i+0x148>
 800325e:	6833      	ldr	r3, [r6, #0]
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	6032      	str	r2, [r6, #0]
 8003264:	681e      	ldr	r6, [r3, #0]
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	2100      	movs	r1, #0
 800326a:	4630      	mov	r0, r6
 800326c:	f7fc ffb0 	bl	80001d0 <memchr>
 8003270:	b108      	cbz	r0, 8003276 <_printf_i+0x1e6>
 8003272:	1b80      	subs	r0, r0, r6
 8003274:	6060      	str	r0, [r4, #4]
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	2300      	movs	r3, #0
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003280:	e7aa      	b.n	80031d8 <_printf_i+0x148>
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	4632      	mov	r2, r6
 8003286:	4649      	mov	r1, r9
 8003288:	4640      	mov	r0, r8
 800328a:	47d0      	blx	sl
 800328c:	3001      	adds	r0, #1
 800328e:	d0ad      	beq.n	80031ec <_printf_i+0x15c>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	079b      	lsls	r3, r3, #30
 8003294:	d413      	bmi.n	80032be <_printf_i+0x22e>
 8003296:	68e0      	ldr	r0, [r4, #12]
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	4298      	cmp	r0, r3
 800329c:	bfb8      	it	lt
 800329e:	4618      	movlt	r0, r3
 80032a0:	e7a6      	b.n	80031f0 <_printf_i+0x160>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4632      	mov	r2, r6
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	47d0      	blx	sl
 80032ac:	3001      	adds	r0, #1
 80032ae:	d09d      	beq.n	80031ec <_printf_i+0x15c>
 80032b0:	3501      	adds	r5, #1
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	9903      	ldr	r1, [sp, #12]
 80032b6:	1a5b      	subs	r3, r3, r1
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	dcf2      	bgt.n	80032a2 <_printf_i+0x212>
 80032bc:	e7eb      	b.n	8003296 <_printf_i+0x206>
 80032be:	2500      	movs	r5, #0
 80032c0:	f104 0619 	add.w	r6, r4, #25
 80032c4:	e7f5      	b.n	80032b2 <_printf_i+0x222>
 80032c6:	bf00      	nop
 80032c8:	08003465 	.word	0x08003465
 80032cc:	08003476 	.word	0x08003476

080032d0 <memmove>:
 80032d0:	4288      	cmp	r0, r1
 80032d2:	b510      	push	{r4, lr}
 80032d4:	eb01 0402 	add.w	r4, r1, r2
 80032d8:	d902      	bls.n	80032e0 <memmove+0x10>
 80032da:	4284      	cmp	r4, r0
 80032dc:	4623      	mov	r3, r4
 80032de:	d807      	bhi.n	80032f0 <memmove+0x20>
 80032e0:	1e43      	subs	r3, r0, #1
 80032e2:	42a1      	cmp	r1, r4
 80032e4:	d008      	beq.n	80032f8 <memmove+0x28>
 80032e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ee:	e7f8      	b.n	80032e2 <memmove+0x12>
 80032f0:	4402      	add	r2, r0
 80032f2:	4601      	mov	r1, r0
 80032f4:	428a      	cmp	r2, r1
 80032f6:	d100      	bne.n	80032fa <memmove+0x2a>
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003302:	e7f7      	b.n	80032f4 <memmove+0x24>

08003304 <_sbrk_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d06      	ldr	r5, [pc, #24]	@ (8003320 <_sbrk_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fe68 	bl	8000fe4 <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_sbrk_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_sbrk_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	200002c4 	.word	0x200002c4

08003324 <memcpy>:
 8003324:	440a      	add	r2, r1
 8003326:	4291      	cmp	r1, r2
 8003328:	f100 33ff 	add.w	r3, r0, #4294967295
 800332c:	d100      	bne.n	8003330 <memcpy+0xc>
 800332e:	4770      	bx	lr
 8003330:	b510      	push	{r4, lr}
 8003332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800333a:	4291      	cmp	r1, r2
 800333c:	d1f9      	bne.n	8003332 <memcpy+0xe>
 800333e:	bd10      	pop	{r4, pc}

08003340 <_realloc_r>:
 8003340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003344:	4680      	mov	r8, r0
 8003346:	4615      	mov	r5, r2
 8003348:	460c      	mov	r4, r1
 800334a:	b921      	cbnz	r1, 8003356 <_realloc_r+0x16>
 800334c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003350:	4611      	mov	r1, r2
 8003352:	f7ff bc4b 	b.w	8002bec <_malloc_r>
 8003356:	b92a      	cbnz	r2, 8003364 <_realloc_r+0x24>
 8003358:	f7ff fbdc 	bl	8002b14 <_free_r>
 800335c:	2400      	movs	r4, #0
 800335e:	4620      	mov	r0, r4
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	f000 f81a 	bl	800339c <_malloc_usable_size_r>
 8003368:	4285      	cmp	r5, r0
 800336a:	4606      	mov	r6, r0
 800336c:	d802      	bhi.n	8003374 <_realloc_r+0x34>
 800336e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003372:	d8f4      	bhi.n	800335e <_realloc_r+0x1e>
 8003374:	4629      	mov	r1, r5
 8003376:	4640      	mov	r0, r8
 8003378:	f7ff fc38 	bl	8002bec <_malloc_r>
 800337c:	4607      	mov	r7, r0
 800337e:	2800      	cmp	r0, #0
 8003380:	d0ec      	beq.n	800335c <_realloc_r+0x1c>
 8003382:	42b5      	cmp	r5, r6
 8003384:	462a      	mov	r2, r5
 8003386:	4621      	mov	r1, r4
 8003388:	bf28      	it	cs
 800338a:	4632      	movcs	r2, r6
 800338c:	f7ff ffca 	bl	8003324 <memcpy>
 8003390:	4621      	mov	r1, r4
 8003392:	4640      	mov	r0, r8
 8003394:	f7ff fbbe 	bl	8002b14 <_free_r>
 8003398:	463c      	mov	r4, r7
 800339a:	e7e0      	b.n	800335e <_realloc_r+0x1e>

0800339c <_malloc_usable_size_r>:
 800339c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a0:	1f18      	subs	r0, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfbc      	itt	lt
 80033a6:	580b      	ldrlt	r3, [r1, r0]
 80033a8:	18c0      	addlt	r0, r0, r3
 80033aa:	4770      	bx	lr

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
