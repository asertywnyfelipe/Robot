
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004004  08004004  00005004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  0000609c  2**0
                  CONTENTS
  4 .ARM          00000008  0800419c  0800419c  0000519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a4  080041a4  0000609c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080041ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000609c  2**0
                  CONTENTS
 10 .bss          00000250  2000009c  2000009c  0000609c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  0000609c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3f5  00000000  00000000  000060cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f45  00000000  00000000  000124c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00014408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2a  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e47  00000000  00000000  00015b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108a0  00000000  00000000  00036981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a89  00000000  00000000  00047221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110caa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b60  00000000  00000000  00110cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00114850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fec 	.word	0x08003fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08003fec 	.word	0x08003fec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <MX_GPIO_Init+0xf8>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a36      	ldr	r2, [pc, #216]	@ (8000658 <MX_GPIO_Init+0xf8>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b34      	ldr	r3, [pc, #208]	@ (8000658 <MX_GPIO_Init+0xf8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b30      	ldr	r3, [pc, #192]	@ (8000658 <MX_GPIO_Init+0xf8>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a2f      	ldr	r2, [pc, #188]	@ (8000658 <MX_GPIO_Init+0xf8>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a28      	ldr	r2, [pc, #160]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_GPIO_Init+0xf8>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 41aa 	mov.w	r1, #21760	@ 0x5500
 80005ec:	481b      	ldr	r0, [pc, #108]	@ (800065c <MX_GPIO_Init+0xfc>)
 80005ee:	f001 fa89 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80005f8:	4819      	ldr	r0, [pc, #100]	@ (8000660 <MX_GPIO_Init+0x100>)
 80005fa:	f001 fa83 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C3_Keyboard_Pin|C2_Keyboard_Pin|C1_Keyboard_Pin;
 80005fe:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4814      	ldr	r0, [pc, #80]	@ (8000664 <MX_GPIO_Init+0x104>)
 8000614:	f001 f8c2 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin;
 8000618:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480a      	ldr	r0, [pc, #40]	@ (800065c <MX_GPIO_Init+0xfc>)
 8000632:	f001 f8b3 	bl	800179c <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//
//  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUTTON_Confirm_Pin|BUTTON_Up_Pin|BUTTON_Down_Pin;
 8000636:	2307      	movs	r3, #7
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_GPIO_Init+0xfc>)
 800064a:	f001 f8a7 	bl	800179c <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400

08000668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f001 fa47 	bl	8001b38 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 fd68 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000b8 	.word	0x200000b8
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <HAL_I2C_MspInit+0x84>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d12b      	bne.n	800073e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <HAL_I2C_MspInit+0x88>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <HAL_I2C_MspInit+0x88>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <HAL_I2C_MspInit+0x88>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000702:	23c0      	movs	r3, #192	@ 0xc0
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000712:	2304      	movs	r3, #4
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <HAL_I2C_MspInit+0x8c>)
 800071e:	f001 f83d 	bl	800179c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_I2C_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0x88>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6413      	str	r3, [r2, #64]	@ 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_I2C_MspInit+0x88>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800076a:	2308      	movs	r3, #8
 800076c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800076e:	2028      	movs	r0, #40	@ 0x28
 8000770:	f000 ff0a 	bl	8001588 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	2130      	movs	r1, #48	@ 0x30
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f829 	bl	80007d4 <lcd_write>
	HAL_Delay(5);
 8000782:	2005      	movs	r0, #5
 8000784:	f000 ff00 	bl	8001588 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	7bfa      	ldrb	r2, [r7, #15]
 800078e:	2130      	movs	r1, #48	@ 0x30
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f81f 	bl	80007d4 <lcd_write>
	HAL_Delay(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fef6 	bl	8001588 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	7bfa      	ldrb	r2, [r7, #15]
 80007a2:	2130      	movs	r1, #48	@ 0x30
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f815 	bl	80007d4 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f80e 	bl	80007d4 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	210c      	movs	r1, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f807 	bl	80007d4 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f89f 	bl	800090a <lcd_clear>

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	460b      	mov	r3, r1
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	4613      	mov	r3, r2
 80007e4:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	f023 030f 	bic.w	r3, r3, #15
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	797b      	ldrb	r3, [r7, #5]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80007fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000800:	f023 030f 	bic.w	r3, r3, #15
 8000804:	b25a      	sxtb	r2, r3
 8000806:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800080a:	4313      	orrs	r3, r2
 800080c:	b25b      	sxtb	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	b2da      	uxtb	r2, r3
 8000818:	797b      	ldrb	r3, [r7, #5]
 800081a:	4313      	orrs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	b25a      	sxtb	r2, r3
 800082c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	b299      	uxth	r1, r3
 800083c:	f107 020c 	add.w	r2, r7, #12
 8000840:	2364      	movs	r3, #100	@ 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2304      	movs	r3, #4
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <lcd_write+0x88>)
 8000848:	f001 faba 	bl	8001dc0 <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 800084c:	200a      	movs	r0, #10
 800084e:	f000 fe9b 	bl	8001588 <HAL_Delay>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b8 	.word	0x200000b8

08000860 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800087a:	2308      	movs	r3, #8
 800087c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f843 	bl	800090a <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ffa1 	bl	80007d4 <lcd_write>
	while(lcd->f_line[i])
 8000892:	e00f      	b.n	80008b4 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7818      	ldrb	r0, [r3, #0]
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	7859      	ldrb	r1, [r3, #1]
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	f7ff ff93 	bl	80007d4 <lcd_write>
		i++;
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	3301      	adds	r3, #1
 80008b2:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e9      	bne.n	8000894 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	21c0      	movs	r1, #192	@ 0xc0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff81 	bl	80007d4 <lcd_write>
	while(lcd->s_line[i])
 80008d2:	e00f      	b.n	80008f4 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7818      	ldrb	r0, [r3, #0]
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	7c99      	ldrb	r1, [r3, #18]
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	f7ff ff73 	bl	80007d4 <lcd_write>
		i++;
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	3301      	adds	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	7c9b      	ldrb	r3, [r3, #18]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e9      	bne.n	80008d4 <lcd_display+0x74>
	}
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000920:	2308      	movs	r3, #8
 8000922:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff51 	bl	80007d4 <lcd_write>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <init_motor>:
		.lcdIndexStart = 0 };

RobotComponents robot;

void init_motor(Motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		int speed, bool direction) {
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
	HAL_TIM_PWM_Start(motor->htim, motor->channel);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f002 fa22 	bl	8002d9c <HAL_TIM_PWM_Start>
	motor->htim = htim;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	601a      	str	r2, [r3, #0]
	motor->channel = channel;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
	motor->dir = 1;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	731a      	strb	r2, [r3, #12]
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <motor_set_speed>:

void motor_set_speed(Motor *motor, int speed) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	if (speed > 100) {
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b64      	cmp	r3, #100	@ 0x64
 8000986:	dd02      	ble.n	800098e <motor_set_speed+0x16>
		speed = 100;
 8000988:	2364      	movs	r3, #100	@ 0x64
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	e004      	b.n	8000998 <motor_set_speed+0x20>
	} else if (speed < 0) {
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da01      	bge.n	8000998 <motor_set_speed+0x20>
		speed = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
	}
	motor->speed = speed;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	609a      	str	r2, [r3, #8]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <read_keyboard>:
	}

	HAL_GPIO_WritePin(gpio_port, gpio_pinFW, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio_port, gpio_pinBW, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
char read_keyboard() {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_RESET); //Pull the R1 low
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b6:	48a2      	ldr	r0, [pc, #648]	@ (8000c40 <read_keyboard+0x294>)
 80009b8:	f001 f8a4 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c2:	489f      	ldr	r0, [pc, #636]	@ (8000c40 <read_keyboard+0x294>)
 80009c4:	f001 f89e 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ce:	489c      	ldr	r0, [pc, #624]	@ (8000c40 <read_keyboard+0x294>)
 80009d0:	f001 f898 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009da:	4899      	ldr	r0, [pc, #612]	@ (8000c40 <read_keyboard+0x294>)
 80009dc:	f001 f892 	bl	8001b04 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 80009e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e4:	4897      	ldr	r0, [pc, #604]	@ (8000c44 <read_keyboard+0x298>)
 80009e6:	f001 f875 	bl	8001ad4 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10a      	bne.n	8000a06 <read_keyboard+0x5a>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin))); // wait till the button is pressed
 80009f0:	bf00      	nop
 80009f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f6:	4893      	ldr	r0, [pc, #588]	@ (8000c44 <read_keyboard+0x298>)
 80009f8:	f001 f86c 	bl	8001ad4 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f7      	beq.n	80009f2 <read_keyboard+0x46>
		return '1';
 8000a02:	2331      	movs	r3, #49	@ 0x31
 8000a04:	e119      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 8000a06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0a:	488e      	ldr	r0, [pc, #568]	@ (8000c44 <read_keyboard+0x298>)
 8000a0c:	f001 f862 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10a      	bne.n	8000a2c <read_keyboard+0x80>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)));
 8000a16:	bf00      	nop
 8000a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1c:	4889      	ldr	r0, [pc, #548]	@ (8000c44 <read_keyboard+0x298>)
 8000a1e:	f001 f859 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f7      	beq.n	8000a18 <read_keyboard+0x6c>
			   // wait till the button is pressed
		return '2';
 8000a28:	2332      	movs	r3, #50	@ 0x32
 8000a2a:	e106      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000a2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a30:	4884      	ldr	r0, [pc, #528]	@ (8000c44 <read_keyboard+0x298>)
 8000a32:	f001 f84f 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10a      	bne.n	8000a52 <read_keyboard+0xa6>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)));
 8000a3c:	bf00      	nop
 8000a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a42:	4880      	ldr	r0, [pc, #512]	@ (8000c44 <read_keyboard+0x298>)
 8000a44:	f001 f846 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f7      	beq.n	8000a3e <read_keyboard+0x92>
			   // wait till the button is pressed
		return '3';
 8000a4e:	2333      	movs	r3, #51	@ 0x33
 8000a50:	e0f3      	b.n	8000c3a <read_keyboard+0x28e>
	}
	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a58:	4879      	ldr	r0, [pc, #484]	@ (8000c40 <read_keyboard+0x294>)
 8000a5a:	f001 f853 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R2 High
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a64:	4876      	ldr	r0, [pc, #472]	@ (8000c40 <read_keyboard+0x294>)
 8000a66:	f001 f84d 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a70:	4873      	ldr	r0, [pc, #460]	@ (8000c40 <read_keyboard+0x294>)
 8000a72:	f001 f847 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a7c:	4870      	ldr	r0, [pc, #448]	@ (8000c40 <read_keyboard+0x294>)
 8000a7e:	f001 f841 	bl	8001b04 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 8000a82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a86:	486f      	ldr	r0, [pc, #444]	@ (8000c44 <read_keyboard+0x298>)
 8000a88:	f001 f824 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10a      	bne.n	8000aa8 <read_keyboard+0xfc>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 8000a92:	bf00      	nop
 8000a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a98:	486a      	ldr	r0, [pc, #424]	@ (8000c44 <read_keyboard+0x298>)
 8000a9a:	f001 f81b 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f7      	beq.n	8000a94 <read_keyboard+0xe8>
			;   // wait till the button is pressed
		return '4';
 8000aa4:	2334      	movs	r3, #52	@ 0x34
 8000aa6:	e0c8      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 8000aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aac:	4865      	ldr	r0, [pc, #404]	@ (8000c44 <read_keyboard+0x298>)
 8000aae:	f001 f811 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10a      	bne.n	8000ace <read_keyboard+0x122>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 8000ab8:	bf00      	nop
 8000aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abe:	4861      	ldr	r0, [pc, #388]	@ (8000c44 <read_keyboard+0x298>)
 8000ac0:	f001 f808 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f7      	beq.n	8000aba <read_keyboard+0x10e>
			;   // wait till the button is pressed
		return '5';
 8000aca:	2335      	movs	r3, #53	@ 0x35
 8000acc:	e0b5      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad2:	485c      	ldr	r0, [pc, #368]	@ (8000c44 <read_keyboard+0x298>)
 8000ad4:	f000 fffe 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10a      	bne.n	8000af4 <read_keyboard+0x148>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 8000ade:	bf00      	nop
 8000ae0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae4:	4857      	ldr	r0, [pc, #348]	@ (8000c44 <read_keyboard+0x298>)
 8000ae6:	f000 fff5 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f7      	beq.n	8000ae0 <read_keyboard+0x134>
			;   // wait till the button is pressed
		return '6';
 8000af0:	2336      	movs	r3, #54	@ 0x36
 8000af2:	e0a2      	b.n	8000c3a <read_keyboard+0x28e>
	}

	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afa:	4851      	ldr	r0, [pc, #324]	@ (8000c40 <read_keyboard+0x294>)
 8000afc:	f001 f802 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b06:	484e      	ldr	r0, [pc, #312]	@ (8000c40 <read_keyboard+0x294>)
 8000b08:	f000 fffc 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R3 High
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b12:	484b      	ldr	r0, [pc, #300]	@ (8000c40 <read_keyboard+0x294>)
 8000b14:	f000 fff6 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1e:	4848      	ldr	r0, [pc, #288]	@ (8000c40 <read_keyboard+0x294>)
 8000b20:	f000 fff0 	bl	8001b04 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 8000b24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b28:	4846      	ldr	r0, [pc, #280]	@ (8000c44 <read_keyboard+0x298>)
 8000b2a:	f000 ffd3 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10a      	bne.n	8000b4a <read_keyboard+0x19e>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 8000b34:	bf00      	nop
 8000b36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b3a:	4842      	ldr	r0, [pc, #264]	@ (8000c44 <read_keyboard+0x298>)
 8000b3c:	f000 ffca 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f7      	beq.n	8000b36 <read_keyboard+0x18a>
			;   // wait till the button is pressed
		return '7';
 8000b46:	2337      	movs	r3, #55	@ 0x37
 8000b48:	e077      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 8000b4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b4e:	483d      	ldr	r0, [pc, #244]	@ (8000c44 <read_keyboard+0x298>)
 8000b50:	f000 ffc0 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10a      	bne.n	8000b70 <read_keyboard+0x1c4>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 8000b5a:	bf00      	nop
 8000b5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b60:	4838      	ldr	r0, [pc, #224]	@ (8000c44 <read_keyboard+0x298>)
 8000b62:	f000 ffb7 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f7      	beq.n	8000b5c <read_keyboard+0x1b0>
			;   // wait till the button is pressed
		return '8';
 8000b6c:	2338      	movs	r3, #56	@ 0x38
 8000b6e:	e064      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	4833      	ldr	r0, [pc, #204]	@ (8000c44 <read_keyboard+0x298>)
 8000b76:	f000 ffad 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10a      	bne.n	8000b96 <read_keyboard+0x1ea>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 8000b80:	bf00      	nop
 8000b82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b86:	482f      	ldr	r0, [pc, #188]	@ (8000c44 <read_keyboard+0x298>)
 8000b88:	f000 ffa4 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f7      	beq.n	8000b82 <read_keyboard+0x1d6>
			;   // wait till the button is pressed
		return '9';
 8000b92:	2339      	movs	r3, #57	@ 0x39
 8000b94:	e051      	b.n	8000c3a <read_keyboard+0x28e>
	}
	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9c:	4828      	ldr	r0, [pc, #160]	@ (8000c40 <read_keyboard+0x294>)
 8000b9e:	f000 ffb1 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba8:	4825      	ldr	r0, [pc, #148]	@ (8000c40 <read_keyboard+0x294>)
 8000baa:	f000 ffab 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb4:	4822      	ldr	r0, [pc, #136]	@ (8000c40 <read_keyboard+0x294>)
 8000bb6:	f000 ffa5 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R4 High
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc0:	481f      	ldr	r0, [pc, #124]	@ (8000c40 <read_keyboard+0x294>)
 8000bc2:	f000 ff9f 	bl	8001b04 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 8000bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bca:	481e      	ldr	r0, [pc, #120]	@ (8000c44 <read_keyboard+0x298>)
 8000bcc:	f000 ff82 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10a      	bne.n	8000bec <read_keyboard+0x240>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 8000bd6:	bf00      	nop
 8000bd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bdc:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <read_keyboard+0x298>)
 8000bde:	f000 ff79 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f7      	beq.n	8000bd8 <read_keyboard+0x22c>
			;   // wait till the button is pressed
		return '*';
 8000be8:	232a      	movs	r3, #42	@ 0x2a
 8000bea:	e026      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 8000bec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bf0:	4814      	ldr	r0, [pc, #80]	@ (8000c44 <read_keyboard+0x298>)
 8000bf2:	f000 ff6f 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10a      	bne.n	8000c12 <read_keyboard+0x266>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 8000bfc:	bf00      	nop
 8000bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c02:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <read_keyboard+0x298>)
 8000c04:	f000 ff66 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f7      	beq.n	8000bfe <read_keyboard+0x252>
			;   // wait till the button is pressed
		return '0';
 8000c0e:	2330      	movs	r3, #48	@ 0x30
 8000c10:	e013      	b.n	8000c3a <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000c12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <read_keyboard+0x298>)
 8000c18:	f000 ff5c 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10a      	bne.n	8000c38 <read_keyboard+0x28c>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 8000c22:	bf00      	nop
 8000c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c28:	4806      	ldr	r0, [pc, #24]	@ (8000c44 <read_keyboard+0x298>)
 8000c2a:	f000 ff53 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f7      	beq.n	8000c24 <read_keyboard+0x278>
			;   // wait till the button is pressed
		return '#';
 8000c34:	2323      	movs	r3, #35	@ 0x23
 8000c36:	e000      	b.n	8000c3a <read_keyboard+0x28e>
	}

	return 'X';
 8000c38:	2358      	movs	r3, #88	@ 0x58
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40020400 	.word	0x40020400

08000c48 <Display>:
void Display() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	if (menu.lcdDisplayStart % menuStep == 0) //beginning of menu
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <Display+0x98>)
 8000c4e:	6899      	ldr	r1, [r3, #8]
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <Display+0x9c>)
 8000c52:	fb83 2301 	smull	r2, r3, r3, r1
 8000c56:	109a      	asrs	r2, r3, #2
 8000c58:	17cb      	asrs	r3, r1, #31
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	1aca      	subs	r2, r1, r3
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d103      	bne.n	8000c72 <Display+0x2a>
			{
		menu.lcdDisplayStart = menu.index;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <Display+0x98>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <Display+0x98>)
 8000c70:	6093      	str	r3, [r2, #8]
	}
	if (menuItem[(menu.index) + 1].subMenu == -2) //end of menu
 8000c72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <Display+0x98>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <Display+0xa0>)
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f113 0f02 	cmn.w	r3, #2
 8000c84:	d105      	bne.n	8000c92 <Display+0x4a>
			{
		menu.lcdDisplayStart = menu.index - 2;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <Display+0x98>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <Display+0x98>)
 8000c8e:	6093      	str	r3, [r2, #8]
 8000c90:	e004      	b.n	8000c9c <Display+0x54>
	} else //middle of menu
	{
		menu.lcdDisplayStart = menu.index - 1;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <Display+0x98>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <Display+0x98>)
 8000c9a:	6093      	str	r3, [r2, #8]
	}
	menu.lcdDisplayStart = menu.index;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <Display+0x98>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <Display+0x98>)
 8000ca2:	6093      	str	r3, [r2, #8]


		sprintf((char *)disp.f_line, ">%s", menuItem[menu.lcdDisplayStart].name);
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <Display+0x98>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <Display+0xa0>)
 8000caa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	490e      	ldr	r1, [pc, #56]	@ (8000cec <Display+0xa4>)
 8000cb2:	480f      	ldr	r0, [pc, #60]	@ (8000cf0 <Display+0xa8>)
 8000cb4:	f002 fcfa 	bl	80036ac <siprintf>
		sprintf((char *)disp.s_line, menuItem[menu.lcdDisplayStart+1].name);
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <Display+0x98>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <Display+0xa0>)
 8000cc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <Display+0xac>)
 8000cc8:	f002 fcf0 	bl	80036ac <siprintf>
		lcd_display(&disp);
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <Display+0xb0>)
 8000cce:	f7ff fdc7 	bl	8000860 <lcd_display>
		HAL_Delay(500);
 8000cd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cd6:	f000 fc57 	bl	8001588 <HAL_Delay>

	}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	080040e0 	.word	0x080040e0
 8000cec:	08004078 	.word	0x08004078
 8000cf0:	20000111 	.word	0x20000111
 8000cf4:	20000122 	.word	0x20000122
 8000cf8:	20000110 	.word	0x20000110

08000cfc <GetButtonInput>:


void GetButtonInput() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	char temp =read_keyboard();
 8000d02:	f7ff fe53 	bl	80009ac <read_keyboard>
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	if (temp == '8' && menuItem[(menu.index) + 1].subMenu > -2) {
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b38      	cmp	r3, #56	@ 0x38
 8000d0e:	d11c      	bne.n	8000d4a <GetButtonInput+0x4e>
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <GetButtonInput+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <GetButtonInput+0x8c>)
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d22:	db12      	blt.n	8000d4a <GetButtonInput+0x4e>
		menu.index++;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <GetButtonInput+0x88>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <GetButtonInput+0x88>)
 8000d2c:	6013      	str	r3, [r2, #0]
		if (menu.index > menu.lcdIndexStart + menuStep) {
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <GetButtonInput+0x88>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <GetButtonInput+0x88>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	330a      	adds	r3, #10
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dd04      	ble.n	8000d46 <GetButtonInput+0x4a>
			menu.index = menu.lcdIndexStart + menuStep;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <GetButtonInput+0x88>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	330a      	adds	r3, #10
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <GetButtonInput+0x88>)
 8000d44:	6013      	str	r3, [r2, #0]
		}
		Display();
 8000d46:	f7ff ff7f 	bl	8000c48 <Display>
	}
	if (temp == '2') {
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b32      	cmp	r3, #50	@ 0x32
 8000d4e:	d110      	bne.n	8000d72 <GetButtonInput+0x76>
		menu.index--;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <GetButtonInput+0x88>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <GetButtonInput+0x88>)
 8000d58:	6013      	str	r3, [r2, #0]
		if (menu.index < menu.lcdIndexStart) {
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <GetButtonInput+0x88>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <GetButtonInput+0x88>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	da03      	bge.n	8000d6e <GetButtonInput+0x72>
			menu.index = menu.lcdIndexStart;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <GetButtonInput+0x88>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <GetButtonInput+0x88>)
 8000d6c:	6013      	str	r3, [r2, #0]
		}
		Display();
 8000d6e:	f7ff ff6b 	bl	8000c48 <Display>
	}
	if (temp == '#') {
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b23      	cmp	r3, #35	@ 0x23
 8000d76:	d101      	bne.n	8000d7c <GetButtonInput+0x80>
		MenuOk();
 8000d78:	f000 f81c 	bl	8000db4 <MenuOk>
	if (temp=='X')
	{
		//Display();

	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000004 	.word	0x20000004
 8000d88:	080040e0 	.word	0x080040e0

08000d8c <Tick>:



int Tick() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	GetButtonInput();
 8000d92:	f7ff ffb3 	bl	8000cfc <GetButtonInput>
	int _indexResult = menu.indexResult;
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <Tick+0x24>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	607b      	str	r3, [r7, #4]
	menu.indexResult = -1;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <Tick+0x24>)
 8000d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000da2:	605a      	str	r2, [r3, #4]
	return _indexResult;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000004 	.word	0x20000004

08000db4 <MenuOk>:

void MenuOk() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	if (menuItem[menu.index].subMenu > 0) //jezeli istnieje submenu
 8000db8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <MenuOk+0xb4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8000e6c <MenuOk+0xb8>)
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dd49      	ble.n	8000e5c <MenuOk+0xa8>
			{
		if (menuItem[menu.index].subMenu > menu.index) //jezeli submenu jest wieksze niz obecne menu (idziemy w gore)
 8000dc8:	4b27      	ldr	r3, [pc, #156]	@ (8000e68 <MenuOk+0xb4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a27      	ldr	r2, [pc, #156]	@ (8000e6c <MenuOk+0xb8>)
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <MenuOk+0xb4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dd11      	ble.n	8000e00 <MenuOk+0x4c>
				{
			menu.lcdIndexStart = menuItem[menu.index].subMenu;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <MenuOk+0xb4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a22      	ldr	r2, [pc, #136]	@ (8000e6c <MenuOk+0xb8>)
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4413      	add	r3, r2
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <MenuOk+0xb4>)
 8000dea:	60d3      	str	r3, [r2, #12]
			menu.index = menu.lcdIndexStart + 1;  //jestesmy na 1 nizej niz menu
 8000dec:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <MenuOk+0xb4>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <MenuOk+0xb4>)
 8000df4:	6013      	str	r3, [r2, #0]
			menu.lcdDisplayStart = menu.lcdIndexStart;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <MenuOk+0xb4>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <MenuOk+0xb4>)
 8000dfc:	6093      	str	r3, [r2, #8]
 8000dfe:	e02a      	b.n	8000e56 <MenuOk+0xa2>
		} else //jezeli submenu jest mniejsze
		{

			menu.lcdIndexStart = menuItem[menu.index].subMenu / menuStep;
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <MenuOk+0xb4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <MenuOk+0xb8>)
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <MenuOk+0xbc>)
 8000e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e12:	1092      	asrs	r2, r2, #2
 8000e14:	17db      	asrs	r3, r3, #31
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4a13      	ldr	r2, [pc, #76]	@ (8000e68 <MenuOk+0xb4>)
 8000e1a:	60d3      	str	r3, [r2, #12]
			menu.lcdIndexStart *= menuStep;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MenuOk+0xb4>)
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MenuOk+0xb4>)
 8000e2c:	60da      	str	r2, [r3, #12]
			menu.index = menuItem[menu.index].subMenu;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MenuOk+0xb4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <MenuOk+0xb8>)
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4413      	add	r3, r2
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <MenuOk+0xb4>)
 8000e3c:	6013      	str	r3, [r2, #0]
			menu.lcdDisplayStart = menu.index - 1;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <MenuOk+0xb4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <MenuOk+0xb4>)
 8000e46:	6093      	str	r3, [r2, #8]
			if (menu.lcdDisplayStart < 0)
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <MenuOk+0xb4>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	da02      	bge.n	8000e56 <MenuOk+0xa2>
				menu.lcdDisplayStart = 0;
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <MenuOk+0xb4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
		}
		Display();
 8000e56:	f7ff fef7 	bl	8000c48 <Display>
	} else //nie ma submenu
	{
		menu.indexResult = menu.index;
	}
}
 8000e5a:	e003      	b.n	8000e64 <MenuOk+0xb0>
		menu.indexResult = menu.index;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <MenuOk+0xb4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a01      	ldr	r2, [pc, #4]	@ (8000e68 <MenuOk+0xb4>)
 8000e62:	6053      	str	r3, [r2, #4]
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	080040e0 	.word	0x080040e0
 8000e70:	66666667 	.word	0x66666667

08000e74 <DisplayParameters>:

void DisplayParameters()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	while(read_keyboard() != '#')
 8000e78:	e029      	b.n	8000ece <DisplayParameters+0x5a>
	{
	sprintf((char *)disp.f_line, "SPEED LEFT:%d", robot.MotorLeft.speed);
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <DisplayParameters+0x6c>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4918      	ldr	r1, [pc, #96]	@ (8000ee4 <DisplayParameters+0x70>)
 8000e82:	4819      	ldr	r0, [pc, #100]	@ (8000ee8 <DisplayParameters+0x74>)
 8000e84:	f002 fc12 	bl	80036ac <siprintf>
	sprintf((char *)disp.s_line, "SPEED RIGHT:%d", robot.MotorRight.speed);
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <DisplayParameters+0x6c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4917      	ldr	r1, [pc, #92]	@ (8000eec <DisplayParameters+0x78>)
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <DisplayParameters+0x7c>)
 8000e92:	f002 fc0b 	bl	80036ac <siprintf>
	lcd_display(&disp);
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <DisplayParameters+0x80>)
 8000e98:	f7ff fce2 	bl	8000860 <lcd_display>
	HAL_Delay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea0:	f000 fb72 	bl	8001588 <HAL_Delay>

	sprintf((char *)disp.f_line, "SPEED DIR:%d", robot.MotorLeft.dir);
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <DisplayParameters+0x6c>)
 8000ea6:	7b1b      	ldrb	r3, [r3, #12]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4913      	ldr	r1, [pc, #76]	@ (8000ef8 <DisplayParameters+0x84>)
 8000eac:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <DisplayParameters+0x74>)
 8000eae:	f002 fbfd 	bl	80036ac <siprintf>
	sprintf((char *)disp.s_line, "SPEED DIR:%d", robot.MotorRight.dir);
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <DisplayParameters+0x6c>)
 8000eb4:	7f1b      	ldrb	r3, [r3, #28]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	490f      	ldr	r1, [pc, #60]	@ (8000ef8 <DisplayParameters+0x84>)
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <DisplayParameters+0x7c>)
 8000ebc:	f002 fbf6 	bl	80036ac <siprintf>
	lcd_display(&disp);
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <DisplayParameters+0x80>)
 8000ec2:	f7ff fccd 	bl	8000860 <lcd_display>
	HAL_Delay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eca:	f000 fb5d 	bl	8001588 <HAL_Delay>
	while(read_keyboard() != '#')
 8000ece:	f7ff fd6d 	bl	80009ac <read_keyboard>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b23      	cmp	r3, #35	@ 0x23
 8000ed6:	d1d0      	bne.n	8000e7a <DisplayParameters+0x6>
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000134 	.word	0x20000134
 8000ee4:	0800407c 	.word	0x0800407c
 8000ee8:	20000111 	.word	0x20000111
 8000eec:	0800408c 	.word	0x0800408c
 8000ef0:	20000122 	.word	0x20000122
 8000ef4:	20000110 	.word	0x20000110
 8000ef8:	0800409c 	.word	0x0800409c

08000efc <MenuDecode>:

void MenuDecode()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  switch (menuSelected)
 8000f02:	4b3e      	ldr	r3, [pc, #248]	@ (8000ffc <MenuDecode+0x100>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d05a      	beq.n	8000fc0 <MenuDecode+0xc4>
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	dc6f      	bgt.n	8000fee <MenuDecode+0xf2>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06f      	beq.n	8000ff2 <MenuDecode+0xf6>
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d000      	beq.n	8000f18 <MenuDecode+0x1c>

  }
  default:
  {

    break;
 8000f16:	e06a      	b.n	8000fee <MenuDecode+0xf2>
    if (!isMenuLock)
 8000f18:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <MenuDecode+0x104>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <MenuDecode+0x32>
      isMenuLock = true;
 8000f26:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <MenuDecode+0x104>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
      break;
 8000f2c:	e062      	b.n	8000ff4 <MenuDecode+0xf8>
    	int temp_speed=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
    	sprintf((char *)disp.f_line, "SPEED:%d", temp_speed);
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4933      	ldr	r1, [pc, #204]	@ (8001004 <MenuDecode+0x108>)
 8000f36:	4834      	ldr	r0, [pc, #208]	@ (8001008 <MenuDecode+0x10c>)
 8000f38:	f002 fbb8 	bl	80036ac <siprintf>
    	sprintf((char *)disp.s_line, "");
 8000f3c:	4933      	ldr	r1, [pc, #204]	@ (800100c <MenuDecode+0x110>)
 8000f3e:	4834      	ldr	r0, [pc, #208]	@ (8001010 <MenuDecode+0x114>)
 8000f40:	f002 fbb4 	bl	80036ac <siprintf>
    	lcd_display(&disp);
 8000f44:	4833      	ldr	r0, [pc, #204]	@ (8001014 <MenuDecode+0x118>)
 8000f46:	f7ff fc8b 	bl	8000860 <lcd_display>
    	while(read_keyboard() != '#')
 8000f4a:	e022      	b.n	8000f92 <MenuDecode+0x96>
    		if (read_keyboard() == '2')
 8000f4c:	f7ff fd2e 	bl	80009ac <read_keyboard>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b32      	cmp	r3, #50	@ 0x32
 8000f54:	d10a      	bne.n	8000f6c <MenuDecode+0x70>
    		temp_speed++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
    		sprintf((char *)disp.f_line, "SPEED:%d", temp_speed);
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4929      	ldr	r1, [pc, #164]	@ (8001004 <MenuDecode+0x108>)
 8000f60:	4829      	ldr	r0, [pc, #164]	@ (8001008 <MenuDecode+0x10c>)
 8000f62:	f002 fba3 	bl	80036ac <siprintf>
    		lcd_display(&disp);
 8000f66:	482b      	ldr	r0, [pc, #172]	@ (8001014 <MenuDecode+0x118>)
 8000f68:	f7ff fc7a 	bl	8000860 <lcd_display>
    		if (read_keyboard() == '8' && temp_speed>=0)
 8000f6c:	f7ff fd1e 	bl	80009ac <read_keyboard>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b38      	cmp	r3, #56	@ 0x38
 8000f74:	d10d      	bne.n	8000f92 <MenuDecode+0x96>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <MenuDecode+0x96>
    		temp_speed--;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
    		sprintf((char *)disp.f_line, "SPEED:%d", temp_speed);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	491f      	ldr	r1, [pc, #124]	@ (8001004 <MenuDecode+0x108>)
 8000f86:	4820      	ldr	r0, [pc, #128]	@ (8001008 <MenuDecode+0x10c>)
 8000f88:	f002 fb90 	bl	80036ac <siprintf>
    		lcd_display(&disp);
 8000f8c:	4821      	ldr	r0, [pc, #132]	@ (8001014 <MenuDecode+0x118>)
 8000f8e:	f7ff fc67 	bl	8000860 <lcd_display>
    	while(read_keyboard() != '#')
 8000f92:	f7ff fd0b 	bl	80009ac <read_keyboard>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b23      	cmp	r3, #35	@ 0x23
 8000f9a:	d1d7      	bne.n	8000f4c <MenuDecode+0x50>
    	isMenuLock = false;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MenuDecode+0x104>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
    	menuSelected = -1;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MenuDecode+0x100>)
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	601a      	str	r2, [r3, #0]
    	motor_set_speed(&(robot.MotorLeft), temp_speed);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	481a      	ldr	r0, [pc, #104]	@ (8001018 <MenuDecode+0x11c>)
 8000fae:	f7ff fce3 	bl	8000978 <motor_set_speed>
    	motor_set_speed(&(robot.MotorRight), temp_speed);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4819      	ldr	r0, [pc, #100]	@ (800101c <MenuDecode+0x120>)
 8000fb6:	f7ff fcdf 	bl	8000978 <motor_set_speed>
    	Display();
 8000fba:	f7ff fe45 	bl	8000c48 <Display>
    	break;
 8000fbe:	e019      	b.n	8000ff4 <MenuDecode+0xf8>
	  if (!isMenuLock)
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MenuDecode+0x104>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <MenuDecode+0xda>
	  isMenuLock = true;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MenuDecode+0x104>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
    break;
 8000fd4:	e00b      	b.n	8000fee <MenuDecode+0xf2>
	  DisplayParameters();
 8000fd6:	f7ff ff4d 	bl	8000e74 <DisplayParameters>
	  isMenuLock = false;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MenuDecode+0x104>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	  menuSelected = -1;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MenuDecode+0x100>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	601a      	str	r2, [r3, #0]
	  Display();
 8000fe8:	f7ff fe2e 	bl	8000c48 <Display>
	  break;
 8000fec:	e002      	b.n	8000ff4 <MenuDecode+0xf8>
    break;
 8000fee:	bf00      	nop
 8000ff0:	e000      	b.n	8000ff4 <MenuDecode+0xf8>
    break;
 8000ff2:	bf00      	nop
  }
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	2000010c 	.word	0x2000010c
 8001004:	080040ac 	.word	0x080040ac
 8001008:	20000111 	.word	0x20000111
 800100c:	0800405c 	.word	0x0800405c
 8001010:	20000122 	.word	0x20000122
 8001014:	20000110 	.word	0x20000110
 8001018:	20000134 	.word	0x20000134
 800101c:	20000144 	.word	0x20000144

08001020 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	@ 0x50
 8001024:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001026:	f000 fa3d 	bl	80014a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800102a:	f000 f84d 	bl	80010c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102e:	f7ff fa97 	bl	8000560 <MX_GPIO_Init>
	MX_TIM3_Init();
 8001032:	f000 f94d 	bl	80012d0 <MX_TIM3_Init>
	MX_I2C1_Init();
 8001036:	f7ff fb17 	bl	8000668 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

 init_motor(&(robot.MotorLeft), &htim3, TIM_CHANNEL_3, 0, 1);
 800103a:	2301      	movs	r3, #1
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2208      	movs	r2, #8
 8001042:	491b      	ldr	r1, [pc, #108]	@ (80010b0 <main+0x90>)
 8001044:	481b      	ldr	r0, [pc, #108]	@ (80010b4 <main+0x94>)
 8001046:	f7ff fc78 	bl	800093a <init_motor>
 init_motor(&(robot.MotorRight), &htim3, TIM_CHANNEL_4, 0, 1);
 800104a:	2301      	movs	r3, #1
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	220c      	movs	r2, #12
 8001052:	4917      	ldr	r1, [pc, #92]	@ (80010b0 <main+0x90>)
 8001054:	4818      	ldr	r0, [pc, #96]	@ (80010b8 <main+0x98>)
 8001056:	f7ff fc70 	bl	800093a <init_motor>

	int current_mode = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	647b      	str	r3, [r7, #68]	@ 0x44
	int mode_change = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	643b      	str	r3, [r7, #64]	@ 0x40



	disp.addr = (0x27 << 1);
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <main+0x9c>)
 8001064:	224e      	movs	r2, #78	@ 0x4e
 8001066:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <main+0x9c>)
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 8001070:	4812      	ldr	r0, [pc, #72]	@ (80010bc <main+0x9c>)
 8001072:	f7ff fb6f 	bl	8000754 <lcd_init>

	Menu menu;

	menu.index = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
	menu.indexResult = -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	607b      	str	r3, [r7, #4]
	menu.lcdDisplayStart = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
	menu.lcdIndexStart = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
	char temp = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	Display();
 800108e:	f7ff fddb 	bl	8000c48 <Display>





		  if (isMenuLock == false)
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <main+0xa0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <main+0x8a>
		  {

		    menuSelected = Tick();
 80010a0:	f7ff fe74 	bl	8000d8c <Tick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <main+0xa4>)
 80010a8:	6013      	str	r3, [r2, #0]

		  }
		  MenuDecode();
 80010aa:	f7ff ff27 	bl	8000efc <MenuDecode>
		  if (isMenuLock == false)
 80010ae:	e7f0      	b.n	8001092 <main+0x72>
 80010b0:	20000158 	.word	0x20000158
 80010b4:	20000134 	.word	0x20000134
 80010b8:	20000144 	.word	0x20000144
 80010bc:	20000110 	.word	0x20000110
 80010c0:	2000010c 	.word	0x2000010c
 80010c4:	20000000 	.word	0x20000000

080010c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	@ 0x50
 80010cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	@ 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fb08 	bl	80036ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b22      	ldr	r3, [pc, #136]	@ (800117c <SystemClock_Config+0xb4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <SystemClock_Config+0xb4>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <SystemClock_Config+0xb4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <SystemClock_Config+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <SystemClock_Config+0xb8>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <SystemClock_Config+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f001 f99b 	bl	8002474 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x80>
		Error_Handler();
 8001144:	f000 f81e 	bl	8001184 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fbfe 	bl	8002964 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xaa>
		Error_Handler();
 800116e:	f000 f809 	bl	8001184 <Error_Handler>
	}
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	@ 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f987 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	@ (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f002 fa44 	bl	80036fc <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20020000 	.word	0x20020000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	20000154 	.word	0x20000154
 80012a8:	200002f0 	.word	0x200002f0

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <MX_TIM3_Init+0xc0>)
 80012f4:	4a27      	ldr	r2, [pc, #156]	@ (8001394 <MX_TIM3_Init+0xc4>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <MX_TIM3_Init+0xc0>)
 80012fa:	220f      	movs	r2, #15
 80012fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001306:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800130a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_TIM3_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001318:	481d      	ldr	r0, [pc, #116]	@ (8001390 <MX_TIM3_Init+0xc0>)
 800131a:	f001 fcef 	bl	8002cfc <HAL_TIM_PWM_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001324:	f7ff ff2e 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4619      	mov	r1, r3
 8001336:	4816      	ldr	r0, [pc, #88]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001338:	f002 f93c 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001342:	f7ff ff1f 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2360      	movs	r3, #96	@ 0x60
 8001348:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_TIM3_Init+0xc0>)
 800135e:	f001 fde5 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001368:	f7ff ff0c 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	220c      	movs	r2, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001374:	f001 fdda 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137e:	f7ff ff01 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <MX_TIM3_Init+0xc0>)
 8001384:	f000 f82a 	bl	80013dc <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000158 	.word	0x20000158
 8001394:	40000400 	.word	0x40000400

08001398 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10d      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x40>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x40>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x40>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_TIM_MspPostInit+0x68>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11e      	bne.n	800143c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_TIM_MspPostInit+0x6c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_TIM_MspPostInit+0x6c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_TIM_MspPostInit+0x70>)
 8001438:	f000 f9b0 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40000400 	.word	0x40000400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020800 	.word	0x40020800

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001454:	f7ff ff2a 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f002 f943 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff fdcd 	bl	8001020 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001494:	080041ac 	.word	0x080041ac
  ldr r2, =_sbss
 8001498:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800149c:	200002ec 	.word	0x200002ec

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f931 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fe5a 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f93b 	bl	8001782 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f911 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000040 	.word	0x20000040
 8001540:	20000048 	.word	0x20000048
 8001544:	20000044 	.word	0x20000044

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000048 	.word	0x20000048
 800156c:	200001a0 	.word	0x200001a0

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200001a0 	.word	0x200001a0

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000048 	.word	0x20000048

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff5c 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffb0 	bl	80016f0 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e16b      	b.n	8001a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 815a 	bne.w	8001a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d005      	beq.n	80017ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d130      	bne.n	8001850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 0201 	and.w	r2, r3, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b03      	cmp	r3, #3
 800185a:	d017      	beq.n	800188c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d123      	bne.n	80018e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	69b9      	ldr	r1, [r7, #24]
 80018dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0203 	and.w	r2, r3, #3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80b4 	beq.w	8001a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b60      	ldr	r3, [pc, #384]	@ (8001aa8 <HAL_GPIO_Init+0x30c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa8 <HAL_GPIO_Init+0x30c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa8 <HAL_GPIO_Init+0x30c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193e:	4a5b      	ldr	r2, [pc, #364]	@ (8001aac <HAL_GPIO_Init+0x310>)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_GPIO_Init+0x314>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d02b      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a51      	ldr	r2, [pc, #324]	@ (8001ab4 <HAL_GPIO_Init+0x318>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d025      	beq.n	80019be <HAL_GPIO_Init+0x222>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a50      	ldr	r2, [pc, #320]	@ (8001ab8 <HAL_GPIO_Init+0x31c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01f      	beq.n	80019ba <HAL_GPIO_Init+0x21e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4f      	ldr	r2, [pc, #316]	@ (8001abc <HAL_GPIO_Init+0x320>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac0 <HAL_GPIO_Init+0x324>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x216>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac4 <HAL_GPIO_Init+0x328>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x212>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac8 <HAL_GPIO_Init+0x32c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x20e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4b      	ldr	r2, [pc, #300]	@ (8001acc <HAL_GPIO_Init+0x330>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x20a>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e00e      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019a6:	2308      	movs	r3, #8
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x228>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	@ (8001aac <HAL_GPIO_Init+0x310>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a32      	ldr	r2, [pc, #200]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae90 	bls.w	80017b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e12b      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe fdb0 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f001 f89a 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a81      	ldr	r2, [pc, #516]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a80      	ldr	r2, [pc, #512]	@ (8001db0 <HAL_I2C_Init+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001db4 <HAL_I2C_Init+0x27c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e7      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a78      	ldr	r2, [pc, #480]	@ (8001db8 <HAL_I2C_Init+0x280>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_I2C_Init+0x284>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	495c      	ldr	r1, [pc, #368]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d819      	bhi.n	8001c74 <HAL_I2C_Init+0x13c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c54:	400b      	ands	r3, r1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_I2C_Init+0x138>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e59      	subs	r1, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6e:	e051      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e04f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_I2C_Init+0x168>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_I2C_Init+0x18e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x196>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e022      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_I2C_Init+0x1bc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e58      	subs	r0, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	440b      	add	r3, r1
 8001ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6911      	ldr	r1, [r2, #16]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	003d08ff 	.word	0x003d08ff
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fbcc 	bl	8001570 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	f040 80e0 	bne.w	8001fa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	4970      	ldr	r1, [pc, #448]	@ (8001fb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f964 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0d3      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x50>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e0cc      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d007      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2221      	movs	r2, #33	@ 0x21
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2210      	movs	r2, #16
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f89c 	bl	8001fbc <I2C_MasterRequestWrite>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e08d      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ea4:	e066      	b.n	8001f74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fa22 	bl	80022f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d107      	bne.n	8001ece <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06b      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d11b      	bne.n	8001f48 <HAL_I2C_Master_Transmit+0x188>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d017      	beq.n	8001f48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6a39      	ldr	r1, [r7, #32]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fa19 	bl	8002384 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d107      	bne.n	8001f70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e01a      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d194      	bne.n	8001ea6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	00100002 	.word	0x00100002
 8001fb8:	ffff0000 	.word	0xffff0000

08001fbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d006      	beq.n	8001fe6 <I2C_MasterRequestWrite+0x2a>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <I2C_MasterRequestWrite+0x2a>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e00b      	b.n	8002010 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d107      	bne.n	8002010 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f84f 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002036:	d103      	bne.n	8002040 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e035      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800204c:	d108      	bne.n	8002060 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204e:	897b      	ldrh	r3, [r7, #10]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	e01b      	b.n	8002098 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002060:	897b      	ldrh	r3, [r7, #10]
 8002062:	11db      	asrs	r3, r3, #7
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 0306 	and.w	r3, r3, #6
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f063 030f 	orn	r3, r3, #15
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <I2C_MasterRequestWrite+0xfc>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f898 	bl	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e010      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4907      	ldr	r1, [pc, #28]	@ (80020bc <I2C_MasterRequestWrite+0x100>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f888 	bl	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	00010008 	.word	0x00010008
 80020bc:	00010002 	.word	0x00010002

080020c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	e048      	b.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d044      	beq.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff fa49 	bl	8001570 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d139      	bne.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10d      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	43da      	mvns	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4013      	ands	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	e00c      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	429a      	cmp	r2, r3
 8002134:	d116      	bne.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e023      	b.n	80021ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	0c1b      	lsrs	r3, r3, #16
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <I2C_WaitOnFlagUntilTimeout+0xca>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	43da      	mvns	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	e00c      	b.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	43da      	mvns	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d093      	beq.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c2:	e071      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d123      	bne.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f043 0204 	orr.w	r2, r3, #4
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e067      	b.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002222:	d041      	beq.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002224:	f7ff f9a4 	bl	8001570 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d302      	bcc.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d136      	bne.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10c      	bne.n	800225e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e00b      	b.n	8002276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	43da      	mvns	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4013      	ands	r3, r2
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e021      	b.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10c      	bne.n	80022cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e00b      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f af6d 	bne.w	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002300:	e034      	b.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f886 	bl	8002414 <I2C_IsAcknowledgeFailed>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e034      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d028      	beq.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7ff f929 	bl	8001570 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11d      	bne.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d016      	beq.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e007      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	2b80      	cmp	r3, #128	@ 0x80
 8002378:	d1c3      	bne.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002390:	e034      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f83e 	bl	8002414 <I2C_IsAcknowledgeFailed>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e034      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d028      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7ff f8e1 	bl	8001570 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11d      	bne.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d016      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d1c3      	bne.n	8002392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242a:	d11b      	bne.n	8002464 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002434:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e267      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b82      	ldr	r3, [pc, #520]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e242      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x74>
 80024da:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6f      	ldr	r2, [pc, #444]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6c      	ldr	r2, [pc, #432]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 800250c:	4b69      	ldr	r3, [pc, #420]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff f820 	bl	8001570 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f81c 	bl	8001570 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e207      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5b      	ldr	r3, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xc0>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f80c 	bl	8001570 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f808 	bl	8001570 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1f3      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b51      	ldr	r3, [pc, #324]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0xe8>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	4b4a      	ldr	r3, [pc, #296]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b44      	ldr	r3, [pc, #272]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c7      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4937      	ldr	r1, [pc, #220]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCC_OscConfig+0x244>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe ffc1 	bl	8001570 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe ffbd 	bl	8001570 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a8      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4925      	ldr	r1, [pc, #148]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCC_OscConfig+0x244>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ffa0 	bl	8001570 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe ff9c 	bl	8001570 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e187      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <HAL_RCC_OscConfig+0x248>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe ff80 	bl	8001570 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe ff7c 	bl	8001570 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e167      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x200>
 8002692:	e01b      	b.n	80026cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x248>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe ff69 	bl	8001570 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe ff65 	bl	8001570 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d907      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e150      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ea      	bne.n	80026a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8097 	beq.w	8002808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b7d      	ldr	r3, [pc, #500]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	4a7c      	ldr	r2, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fa:	4b7a      	ldr	r3, [pc, #488]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b77      	ldr	r3, [pc, #476]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b74      	ldr	r3, [pc, #464]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe ff25 	bl	8001570 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe ff21 	bl	8001570 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e10c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b6a      	ldr	r3, [pc, #424]	@ (80028e8 <HAL_RCC_OscConfig+0x474>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x2ea>
 8002750:	4b64      	ldr	r3, [pc, #400]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002754:	4a63      	ldr	r2, [pc, #396]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	@ 0x70
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5e      	ldr	r2, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	4b5c      	ldr	r3, [pc, #368]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 8002780:	4b58      	ldr	r3, [pc, #352]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
 800278c:	4b55      	ldr	r3, [pc, #340]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a54      	ldr	r2, [pc, #336]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fee6 	bl	8001570 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fee2 	bl	8001570 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0cb      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ee      	beq.n	80027a8 <HAL_RCC_OscConfig+0x334>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7fe fed0 	bl	8001570 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fecc 	bl	8001570 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b5      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	4b3e      	ldr	r3, [pc, #248]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	4a38      	ldr	r2, [pc, #224]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a1 	beq.w	8002954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d05c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d141      	bne.n	80028aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fea0 	bl	8001570 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fe9c 	bl	8001570 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e087      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	491b      	ldr	r1, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fe75 	bl	8001570 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fe71 	bl	8001570 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x416>
 80028a8:	e054      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe5e 	bl	8001570 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fe5a 	bl	8001570 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e045      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
 80028d6:	e03d      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x4ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d121      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11a      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd8c 	bl	8001570 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fd88 	bl	8001570 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fcec 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08004150 	.word	0x08004150
 8002b28:	20000040 	.word	0x20000040
 8002b2c:	20000044 	.word	0x20000044

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b090      	sub	sp, #64	@ 0x40
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b40:	2300      	movs	r3, #0
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b59      	ldr	r3, [pc, #356]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80a1 	bhi.w	8002c9c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e09b      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b66:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002b68:	e09b      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b53      	ldr	r3, [pc, #332]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b6e:	e098      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b4f      	ldr	r3, [pc, #316]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d028      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b9c:	fb03 f201 	mul.w	r2, r3, r1
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	fb00 f303 	mul.w	r3, r0, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a43      	ldr	r2, [pc, #268]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002baa:	fba0 1202 	umull	r1, r2, r0, r2
 8002bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb6:	4413      	add	r3, r2
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	61fa      	str	r2, [r7, #28]
 8002bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bca:	f7fd fb51 	bl	8000270 <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd6:	e053      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd8:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	2200      	movs	r2, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	617a      	str	r2, [r7, #20]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bea:	f04f 0b00 	mov.w	fp, #0
 8002bee:	4652      	mov	r2, sl
 8002bf0:	465b      	mov	r3, fp
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c00:	0150      	lsls	r0, r2, #5
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	ebb2 080a 	subs.w	r8, r2, sl
 8002c0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c22:	ebb2 0408 	subs.w	r4, r2, r8
 8002c26:	eb63 0509 	sbc.w	r5, r3, r9
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	00eb      	lsls	r3, r5, #3
 8002c34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c38:	00e2      	lsls	r2, r4, #3
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	eb14 030a 	adds.w	r3, r4, sl
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	eb45 030b 	adc.w	r3, r5, fp
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c56:	4629      	mov	r1, r5
 8002c58:	028b      	lsls	r3, r1, #10
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c60:	4621      	mov	r1, r4
 8002c62:	028a      	lsls	r2, r1, #10
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	60fa      	str	r2, [r7, #12]
 8002c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c74:	f7fd fafc 	bl	8000270 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3740      	adds	r7, #64	@ 0x40
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	017d7840 	.word	0x017d7840

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000040 	.word	0x20000040

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08004160 	.word	0x08004160

08002cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fb38 	bl	8001398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 f9b8 	bl	80030b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0x24>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e022      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d109      	bne.n	8002dda <HAL_TIM_PWM_Start+0x3e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e015      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x58>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_TIM_PWM_Start+0x6a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07c      	b.n	8002f08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x82>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	e013      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x92>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xa2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	e003      	b.n	8002e46 <HAL_TIM_PWM_Start+0xaa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fb8a 	bl	8003568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2d      	ldr	r2, [pc, #180]	@ (8002f10 <HAL_TIM_PWM_Start+0x174>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_PWM_Start+0xcc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2c      	ldr	r2, [pc, #176]	@ (8002f14 <HAL_TIM_PWM_Start+0x178>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_PWM_Start+0xd0>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_TIM_PWM_Start+0xd2>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a22      	ldr	r2, [pc, #136]	@ (8002f10 <HAL_TIM_PWM_Start+0x174>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d01d      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <HAL_TIM_PWM_Start+0x17c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f1c <HAL_TIM_PWM_Start+0x180>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	@ (8002f20 <HAL_TIM_PWM_Start+0x184>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <HAL_TIM_PWM_Start+0x178>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <HAL_TIM_PWM_Start+0x188>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x136>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <HAL_TIM_PWM_Start+0x18c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d111      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d010      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef4:	e007      	b.n	8002f06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010400 	.word	0x40010400
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40001800 	.word	0x40001800

08002f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ae      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f200 809f 	bhi.w	8003098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08003099 	.word	0x08003099
 8002f68:	08003099 	.word	0x08003099
 8002f6c:	08003099 	.word	0x08003099
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003099 	.word	0x08003099
 8002f78:	08003099 	.word	0x08003099
 8002f7c:	08003099 	.word	0x08003099
 8002f80:	08003017 	.word	0x08003017
 8002f84:	08003099 	.word	0x08003099
 8002f88:	08003099 	.word	0x08003099
 8002f8c:	08003099 	.word	0x08003099
 8002f90:	08003057 	.word	0x08003057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f934 	bl	8003208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
      break;
 8002fd2:	e064      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f984 	bl	80032e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
      break;
 8003014:	e043      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f9d9 	bl	80033d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0208 	orr.w	r2, r2, #8
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      break;
 8003054:	e023      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fa2d 	bl	80034bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69d9      	ldr	r1, [r3, #28]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	61da      	str	r2, [r3, #28]
      break;
 8003096:	e002      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
      break;
 800309c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a46      	ldr	r2, [pc, #280]	@ (80031dc <TIM_Base_SetConfig+0x12c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ce:	d00f      	beq.n	80030f0 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a43      	ldr	r2, [pc, #268]	@ (80031e0 <TIM_Base_SetConfig+0x130>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <TIM_Base_SetConfig+0x134>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a41      	ldr	r2, [pc, #260]	@ (80031e8 <TIM_Base_SetConfig+0x138>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <TIM_Base_SetConfig+0x13c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <TIM_Base_SetConfig+0x12c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d027      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a32      	ldr	r2, [pc, #200]	@ (80031e0 <TIM_Base_SetConfig+0x130>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d023      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a31      	ldr	r2, [pc, #196]	@ (80031e4 <TIM_Base_SetConfig+0x134>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01f      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a30      	ldr	r2, [pc, #192]	@ (80031e8 <TIM_Base_SetConfig+0x138>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01b      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2f      	ldr	r2, [pc, #188]	@ (80031ec <TIM_Base_SetConfig+0x13c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d017      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2e      	ldr	r2, [pc, #184]	@ (80031f0 <TIM_Base_SetConfig+0x140>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2d      	ldr	r2, [pc, #180]	@ (80031f4 <TIM_Base_SetConfig+0x144>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00f      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <TIM_Base_SetConfig+0x148>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2b      	ldr	r2, [pc, #172]	@ (80031fc <TIM_Base_SetConfig+0x14c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2a      	ldr	r2, [pc, #168]	@ (8003200 <TIM_Base_SetConfig+0x150>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a29      	ldr	r2, [pc, #164]	@ (8003204 <TIM_Base_SetConfig+0x154>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a10      	ldr	r2, [pc, #64]	@ (80031dc <TIM_Base_SetConfig+0x12c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0xf8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <TIM_Base_SetConfig+0x13c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f023 0201 	bic.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]
  }
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40010400 	.word	0x40010400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800
 80031fc:	40001800 	.word	0x40001800
 8003200:	40001c00 	.word	0x40001c00
 8003204:	40002000 	.word	0x40002000

08003208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 0201 	bic.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a20      	ldr	r2, [pc, #128]	@ (80032e0 <TIM_OC1_SetConfig+0xd8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC1_SetConfig+0x64>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1f      	ldr	r2, [pc, #124]	@ (80032e4 <TIM_OC1_SetConfig+0xdc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10c      	bne.n	8003286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0308 	bic.w	r3, r3, #8
 8003272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	@ (80032e0 <TIM_OC1_SetConfig+0xd8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC1_SetConfig+0x8e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a14      	ldr	r2, [pc, #80]	@ (80032e4 <TIM_OC1_SetConfig+0xdc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800329c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	621a      	str	r2, [r3, #32]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40010400 	.word	0x40010400

080032e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0210 	bic.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0320 	bic.w	r3, r3, #32
 8003332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a22      	ldr	r2, [pc, #136]	@ (80033cc <TIM_OC2_SetConfig+0xe4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_OC2_SetConfig+0x68>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a21      	ldr	r2, [pc, #132]	@ (80033d0 <TIM_OC2_SetConfig+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10d      	bne.n	800336c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <TIM_OC2_SetConfig+0xe4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_OC2_SetConfig+0x94>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <TIM_OC2_SetConfig+0xe8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d113      	bne.n	80033a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40010400 	.word	0x40010400

080033d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <TIM_OC3_SetConfig+0xe0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_OC3_SetConfig+0x66>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <TIM_OC3_SetConfig+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10d      	bne.n	8003456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <TIM_OC3_SetConfig+0xe0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_OC3_SetConfig+0x92>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <TIM_OC3_SetConfig+0xe4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d113      	bne.n	800348e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800346c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40010400 	.word	0x40010400

080034bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <TIM_OC4_SetConfig+0xa4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_OC4_SetConfig+0x68>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a11      	ldr	r2, [pc, #68]	@ (8003564 <TIM_OC4_SetConfig+0xa8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d109      	bne.n	8003538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400

08003568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e05a      	b.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003618:	d01d      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1a      	ldr	r2, [pc, #104]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10c      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800365c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40010400 	.word	0x40010400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40001800 	.word	0x40001800

080036ac <siprintf>:
 80036ac:	b40e      	push	{r1, r2, r3}
 80036ae:	b500      	push	{lr}
 80036b0:	b09c      	sub	sp, #112	@ 0x70
 80036b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80036b4:	9002      	str	r0, [sp, #8]
 80036b6:	9006      	str	r0, [sp, #24]
 80036b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036bc:	4809      	ldr	r0, [pc, #36]	@ (80036e4 <siprintf+0x38>)
 80036be:	9107      	str	r1, [sp, #28]
 80036c0:	9104      	str	r1, [sp, #16]
 80036c2:	4909      	ldr	r1, [pc, #36]	@ (80036e8 <siprintf+0x3c>)
 80036c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c8:	9105      	str	r1, [sp, #20]
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	a902      	add	r1, sp, #8
 80036d0:	f000 f994 	bl	80039fc <_svfiprintf_r>
 80036d4:	9b02      	ldr	r3, [sp, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	b01c      	add	sp, #112	@ 0x70
 80036dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e0:	b003      	add	sp, #12
 80036e2:	4770      	bx	lr
 80036e4:	2000004c 	.word	0x2000004c
 80036e8:	ffff0208 	.word	0xffff0208

080036ec <memset>:
 80036ec:	4402      	add	r2, r0
 80036ee:	4603      	mov	r3, r0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d100      	bne.n	80036f6 <memset+0xa>
 80036f4:	4770      	bx	lr
 80036f6:	f803 1b01 	strb.w	r1, [r3], #1
 80036fa:	e7f9      	b.n	80036f0 <memset+0x4>

080036fc <__errno>:
 80036fc:	4b01      	ldr	r3, [pc, #4]	@ (8003704 <__errno+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000004c 	.word	0x2000004c

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	@ (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	@ (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	@ (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	@ (800374c <__libc_init_array+0x44>)
 800371c:	f000 fc66 	bl	8003fec <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	080041a4 	.word	0x080041a4
 8003744:	080041a4 	.word	0x080041a4
 8003748:	080041a4 	.word	0x080041a4
 800374c:	080041a8 	.word	0x080041a8

08003750 <__retarget_lock_acquire_recursive>:
 8003750:	4770      	bx	lr

08003752 <__retarget_lock_release_recursive>:
 8003752:	4770      	bx	lr

08003754 <_free_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4605      	mov	r5, r0
 8003758:	2900      	cmp	r1, #0
 800375a:	d041      	beq.n	80037e0 <_free_r+0x8c>
 800375c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003760:	1f0c      	subs	r4, r1, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	bfb8      	it	lt
 8003766:	18e4      	addlt	r4, r4, r3
 8003768:	f000 f8e0 	bl	800392c <__malloc_lock>
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <_free_r+0x90>)
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	b933      	cbnz	r3, 8003780 <_free_r+0x2c>
 8003772:	6063      	str	r3, [r4, #4]
 8003774:	6014      	str	r4, [r2, #0]
 8003776:	4628      	mov	r0, r5
 8003778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800377c:	f000 b8dc 	b.w	8003938 <__malloc_unlock>
 8003780:	42a3      	cmp	r3, r4
 8003782:	d908      	bls.n	8003796 <_free_r+0x42>
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	1821      	adds	r1, r4, r0
 8003788:	428b      	cmp	r3, r1
 800378a:	bf01      	itttt	eq
 800378c:	6819      	ldreq	r1, [r3, #0]
 800378e:	685b      	ldreq	r3, [r3, #4]
 8003790:	1809      	addeq	r1, r1, r0
 8003792:	6021      	streq	r1, [r4, #0]
 8003794:	e7ed      	b.n	8003772 <_free_r+0x1e>
 8003796:	461a      	mov	r2, r3
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b10b      	cbz	r3, 80037a0 <_free_r+0x4c>
 800379c:	42a3      	cmp	r3, r4
 800379e:	d9fa      	bls.n	8003796 <_free_r+0x42>
 80037a0:	6811      	ldr	r1, [r2, #0]
 80037a2:	1850      	adds	r0, r2, r1
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d10b      	bne.n	80037c0 <_free_r+0x6c>
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	4401      	add	r1, r0
 80037ac:	1850      	adds	r0, r2, r1
 80037ae:	4283      	cmp	r3, r0
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	d1e0      	bne.n	8003776 <_free_r+0x22>
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	6053      	str	r3, [r2, #4]
 80037ba:	4408      	add	r0, r1
 80037bc:	6010      	str	r0, [r2, #0]
 80037be:	e7da      	b.n	8003776 <_free_r+0x22>
 80037c0:	d902      	bls.n	80037c8 <_free_r+0x74>
 80037c2:	230c      	movs	r3, #12
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	e7d6      	b.n	8003776 <_free_r+0x22>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	1821      	adds	r1, r4, r0
 80037cc:	428b      	cmp	r3, r1
 80037ce:	bf04      	itt	eq
 80037d0:	6819      	ldreq	r1, [r3, #0]
 80037d2:	685b      	ldreq	r3, [r3, #4]
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	bf04      	itt	eq
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	6054      	str	r4, [r2, #4]
 80037de:	e7ca      	b.n	8003776 <_free_r+0x22>
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	200002e8 	.word	0x200002e8

080037e8 <sbrk_aligned>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003828 <sbrk_aligned+0x40>)
 80037ec:	460c      	mov	r4, r1
 80037ee:	6831      	ldr	r1, [r6, #0]
 80037f0:	4605      	mov	r5, r0
 80037f2:	b911      	cbnz	r1, 80037fa <sbrk_aligned+0x12>
 80037f4:	f000 fba6 	bl	8003f44 <_sbrk_r>
 80037f8:	6030      	str	r0, [r6, #0]
 80037fa:	4621      	mov	r1, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 fba1 	bl	8003f44 <_sbrk_r>
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d103      	bne.n	800380e <sbrk_aligned+0x26>
 8003806:	f04f 34ff 	mov.w	r4, #4294967295
 800380a:	4620      	mov	r0, r4
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d0f8      	beq.n	800380a <sbrk_aligned+0x22>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fb92 	bl	8003f44 <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d1f2      	bne.n	800380a <sbrk_aligned+0x22>
 8003824:	e7ef      	b.n	8003806 <sbrk_aligned+0x1e>
 8003826:	bf00      	nop
 8003828:	200002e4 	.word	0x200002e4

0800382c <_malloc_r>:
 800382c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003830:	1ccd      	adds	r5, r1, #3
 8003832:	f025 0503 	bic.w	r5, r5, #3
 8003836:	3508      	adds	r5, #8
 8003838:	2d0c      	cmp	r5, #12
 800383a:	bf38      	it	cc
 800383c:	250c      	movcc	r5, #12
 800383e:	2d00      	cmp	r5, #0
 8003840:	4606      	mov	r6, r0
 8003842:	db01      	blt.n	8003848 <_malloc_r+0x1c>
 8003844:	42a9      	cmp	r1, r5
 8003846:	d904      	bls.n	8003852 <_malloc_r+0x26>
 8003848:	230c      	movs	r3, #12
 800384a:	6033      	str	r3, [r6, #0]
 800384c:	2000      	movs	r0, #0
 800384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003928 <_malloc_r+0xfc>
 8003856:	f000 f869 	bl	800392c <__malloc_lock>
 800385a:	f8d8 3000 	ldr.w	r3, [r8]
 800385e:	461c      	mov	r4, r3
 8003860:	bb44      	cbnz	r4, 80038b4 <_malloc_r+0x88>
 8003862:	4629      	mov	r1, r5
 8003864:	4630      	mov	r0, r6
 8003866:	f7ff ffbf 	bl	80037e8 <sbrk_aligned>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	4604      	mov	r4, r0
 800386e:	d158      	bne.n	8003922 <_malloc_r+0xf6>
 8003870:	f8d8 4000 	ldr.w	r4, [r8]
 8003874:	4627      	mov	r7, r4
 8003876:	2f00      	cmp	r7, #0
 8003878:	d143      	bne.n	8003902 <_malloc_r+0xd6>
 800387a:	2c00      	cmp	r4, #0
 800387c:	d04b      	beq.n	8003916 <_malloc_r+0xea>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	4639      	mov	r1, r7
 8003882:	4630      	mov	r0, r6
 8003884:	eb04 0903 	add.w	r9, r4, r3
 8003888:	f000 fb5c 	bl	8003f44 <_sbrk_r>
 800388c:	4581      	cmp	r9, r0
 800388e:	d142      	bne.n	8003916 <_malloc_r+0xea>
 8003890:	6821      	ldr	r1, [r4, #0]
 8003892:	1a6d      	subs	r5, r5, r1
 8003894:	4629      	mov	r1, r5
 8003896:	4630      	mov	r0, r6
 8003898:	f7ff ffa6 	bl	80037e8 <sbrk_aligned>
 800389c:	3001      	adds	r0, #1
 800389e:	d03a      	beq.n	8003916 <_malloc_r+0xea>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	442b      	add	r3, r5
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	f8d8 3000 	ldr.w	r3, [r8]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	bb62      	cbnz	r2, 8003908 <_malloc_r+0xdc>
 80038ae:	f8c8 7000 	str.w	r7, [r8]
 80038b2:	e00f      	b.n	80038d4 <_malloc_r+0xa8>
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	1b52      	subs	r2, r2, r5
 80038b8:	d420      	bmi.n	80038fc <_malloc_r+0xd0>
 80038ba:	2a0b      	cmp	r2, #11
 80038bc:	d917      	bls.n	80038ee <_malloc_r+0xc2>
 80038be:	1961      	adds	r1, r4, r5
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	6025      	str	r5, [r4, #0]
 80038c4:	bf18      	it	ne
 80038c6:	6059      	strne	r1, [r3, #4]
 80038c8:	6863      	ldr	r3, [r4, #4]
 80038ca:	bf08      	it	eq
 80038cc:	f8c8 1000 	streq.w	r1, [r8]
 80038d0:	5162      	str	r2, [r4, r5]
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f82f 	bl	8003938 <__malloc_unlock>
 80038da:	f104 000b 	add.w	r0, r4, #11
 80038de:	1d23      	adds	r3, r4, #4
 80038e0:	f020 0007 	bic.w	r0, r0, #7
 80038e4:	1ac2      	subs	r2, r0, r3
 80038e6:	bf1c      	itt	ne
 80038e8:	1a1b      	subne	r3, r3, r0
 80038ea:	50a3      	strne	r3, [r4, r2]
 80038ec:	e7af      	b.n	800384e <_malloc_r+0x22>
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	bf0c      	ite	eq
 80038f4:	f8c8 2000 	streq.w	r2, [r8]
 80038f8:	605a      	strne	r2, [r3, #4]
 80038fa:	e7eb      	b.n	80038d4 <_malloc_r+0xa8>
 80038fc:	4623      	mov	r3, r4
 80038fe:	6864      	ldr	r4, [r4, #4]
 8003900:	e7ae      	b.n	8003860 <_malloc_r+0x34>
 8003902:	463c      	mov	r4, r7
 8003904:	687f      	ldr	r7, [r7, #4]
 8003906:	e7b6      	b.n	8003876 <_malloc_r+0x4a>
 8003908:	461a      	mov	r2, r3
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	42a3      	cmp	r3, r4
 800390e:	d1fb      	bne.n	8003908 <_malloc_r+0xdc>
 8003910:	2300      	movs	r3, #0
 8003912:	6053      	str	r3, [r2, #4]
 8003914:	e7de      	b.n	80038d4 <_malloc_r+0xa8>
 8003916:	230c      	movs	r3, #12
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	4630      	mov	r0, r6
 800391c:	f000 f80c 	bl	8003938 <__malloc_unlock>
 8003920:	e794      	b.n	800384c <_malloc_r+0x20>
 8003922:	6005      	str	r5, [r0, #0]
 8003924:	e7d6      	b.n	80038d4 <_malloc_r+0xa8>
 8003926:	bf00      	nop
 8003928:	200002e8 	.word	0x200002e8

0800392c <__malloc_lock>:
 800392c:	4801      	ldr	r0, [pc, #4]	@ (8003934 <__malloc_lock+0x8>)
 800392e:	f7ff bf0f 	b.w	8003750 <__retarget_lock_acquire_recursive>
 8003932:	bf00      	nop
 8003934:	200002e0 	.word	0x200002e0

08003938 <__malloc_unlock>:
 8003938:	4801      	ldr	r0, [pc, #4]	@ (8003940 <__malloc_unlock+0x8>)
 800393a:	f7ff bf0a 	b.w	8003752 <__retarget_lock_release_recursive>
 800393e:	bf00      	nop
 8003940:	200002e0 	.word	0x200002e0

08003944 <__ssputs_r>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	688e      	ldr	r6, [r1, #8]
 800394a:	461f      	mov	r7, r3
 800394c:	42be      	cmp	r6, r7
 800394e:	680b      	ldr	r3, [r1, #0]
 8003950:	4682      	mov	sl, r0
 8003952:	460c      	mov	r4, r1
 8003954:	4690      	mov	r8, r2
 8003956:	d82d      	bhi.n	80039b4 <__ssputs_r+0x70>
 8003958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800395c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003960:	d026      	beq.n	80039b0 <__ssputs_r+0x6c>
 8003962:	6965      	ldr	r5, [r4, #20]
 8003964:	6909      	ldr	r1, [r1, #16]
 8003966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800396a:	eba3 0901 	sub.w	r9, r3, r1
 800396e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003972:	1c7b      	adds	r3, r7, #1
 8003974:	444b      	add	r3, r9
 8003976:	106d      	asrs	r5, r5, #1
 8003978:	429d      	cmp	r5, r3
 800397a:	bf38      	it	cc
 800397c:	461d      	movcc	r5, r3
 800397e:	0553      	lsls	r3, r2, #21
 8003980:	d527      	bpl.n	80039d2 <__ssputs_r+0x8e>
 8003982:	4629      	mov	r1, r5
 8003984:	f7ff ff52 	bl	800382c <_malloc_r>
 8003988:	4606      	mov	r6, r0
 800398a:	b360      	cbz	r0, 80039e6 <__ssputs_r+0xa2>
 800398c:	6921      	ldr	r1, [r4, #16]
 800398e:	464a      	mov	r2, r9
 8003990:	f000 fae8 	bl	8003f64 <memcpy>
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800399a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	6126      	str	r6, [r4, #16]
 80039a2:	6165      	str	r5, [r4, #20]
 80039a4:	444e      	add	r6, r9
 80039a6:	eba5 0509 	sub.w	r5, r5, r9
 80039aa:	6026      	str	r6, [r4, #0]
 80039ac:	60a5      	str	r5, [r4, #8]
 80039ae:	463e      	mov	r6, r7
 80039b0:	42be      	cmp	r6, r7
 80039b2:	d900      	bls.n	80039b6 <__ssputs_r+0x72>
 80039b4:	463e      	mov	r6, r7
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	4632      	mov	r2, r6
 80039ba:	4641      	mov	r1, r8
 80039bc:	f000 faa8 	bl	8003f10 <memmove>
 80039c0:	68a3      	ldr	r3, [r4, #8]
 80039c2:	1b9b      	subs	r3, r3, r6
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	4433      	add	r3, r6
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	2000      	movs	r0, #0
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d2:	462a      	mov	r2, r5
 80039d4:	f000 fad4 	bl	8003f80 <_realloc_r>
 80039d8:	4606      	mov	r6, r0
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1e0      	bne.n	80039a0 <__ssputs_r+0x5c>
 80039de:	6921      	ldr	r1, [r4, #16]
 80039e0:	4650      	mov	r0, sl
 80039e2:	f7ff feb7 	bl	8003754 <_free_r>
 80039e6:	230c      	movs	r3, #12
 80039e8:	f8ca 3000 	str.w	r3, [sl]
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e7e9      	b.n	80039ce <__ssputs_r+0x8a>
	...

080039fc <_svfiprintf_r>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	4698      	mov	r8, r3
 8003a02:	898b      	ldrh	r3, [r1, #12]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	b09d      	sub	sp, #116	@ 0x74
 8003a08:	4607      	mov	r7, r0
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	d510      	bpl.n	8003a32 <_svfiprintf_r+0x36>
 8003a10:	690b      	ldr	r3, [r1, #16]
 8003a12:	b973      	cbnz	r3, 8003a32 <_svfiprintf_r+0x36>
 8003a14:	2140      	movs	r1, #64	@ 0x40
 8003a16:	f7ff ff09 	bl	800382c <_malloc_r>
 8003a1a:	6028      	str	r0, [r5, #0]
 8003a1c:	6128      	str	r0, [r5, #16]
 8003a1e:	b930      	cbnz	r0, 8003a2e <_svfiprintf_r+0x32>
 8003a20:	230c      	movs	r3, #12
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	b01d      	add	sp, #116	@ 0x74
 8003a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2e:	2340      	movs	r3, #64	@ 0x40
 8003a30:	616b      	str	r3, [r5, #20]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a36:	2320      	movs	r3, #32
 8003a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a40:	2330      	movs	r3, #48	@ 0x30
 8003a42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003be0 <_svfiprintf_r+0x1e4>
 8003a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a4a:	f04f 0901 	mov.w	r9, #1
 8003a4e:	4623      	mov	r3, r4
 8003a50:	469a      	mov	sl, r3
 8003a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a56:	b10a      	cbz	r2, 8003a5c <_svfiprintf_r+0x60>
 8003a58:	2a25      	cmp	r2, #37	@ 0x25
 8003a5a:	d1f9      	bne.n	8003a50 <_svfiprintf_r+0x54>
 8003a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a60:	d00b      	beq.n	8003a7a <_svfiprintf_r+0x7e>
 8003a62:	465b      	mov	r3, fp
 8003a64:	4622      	mov	r2, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7ff ff6b 	bl	8003944 <__ssputs_r>
 8003a6e:	3001      	adds	r0, #1
 8003a70:	f000 80a7 	beq.w	8003bc2 <_svfiprintf_r+0x1c6>
 8003a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a76:	445a      	add	r2, fp
 8003a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809f 	beq.w	8003bc2 <_svfiprintf_r+0x1c6>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a8e:	f10a 0a01 	add.w	sl, sl, #1
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a9c:	4654      	mov	r4, sl
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	484e      	ldr	r0, [pc, #312]	@ (8003be0 <_svfiprintf_r+0x1e4>)
 8003aa6:	f7fc fb93 	bl	80001d0 <memchr>
 8003aaa:	9a04      	ldr	r2, [sp, #16]
 8003aac:	b9d8      	cbnz	r0, 8003ae6 <_svfiprintf_r+0xea>
 8003aae:	06d0      	lsls	r0, r2, #27
 8003ab0:	bf44      	itt	mi
 8003ab2:	2320      	movmi	r3, #32
 8003ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ab8:	0711      	lsls	r1, r2, #28
 8003aba:	bf44      	itt	mi
 8003abc:	232b      	movmi	r3, #43	@ 0x2b
 8003abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ac8:	d015      	beq.n	8003af6 <_svfiprintf_r+0xfa>
 8003aca:	9a07      	ldr	r2, [sp, #28]
 8003acc:	4654      	mov	r4, sl
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f04f 0c0a 	mov.w	ip, #10
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ada:	3b30      	subs	r3, #48	@ 0x30
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d94b      	bls.n	8003b78 <_svfiprintf_r+0x17c>
 8003ae0:	b1b0      	cbz	r0, 8003b10 <_svfiprintf_r+0x114>
 8003ae2:	9207      	str	r2, [sp, #28]
 8003ae4:	e014      	b.n	8003b10 <_svfiprintf_r+0x114>
 8003ae6:	eba0 0308 	sub.w	r3, r0, r8
 8003aea:	fa09 f303 	lsl.w	r3, r9, r3
 8003aee:	4313      	orrs	r3, r2
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	46a2      	mov	sl, r4
 8003af4:	e7d2      	b.n	8003a9c <_svfiprintf_r+0xa0>
 8003af6:	9b03      	ldr	r3, [sp, #12]
 8003af8:	1d19      	adds	r1, r3, #4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	9103      	str	r1, [sp, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfbb      	ittet	lt
 8003b02:	425b      	neglt	r3, r3
 8003b04:	f042 0202 	orrlt.w	r2, r2, #2
 8003b08:	9307      	strge	r3, [sp, #28]
 8003b0a:	9307      	strlt	r3, [sp, #28]
 8003b0c:	bfb8      	it	lt
 8003b0e:	9204      	strlt	r2, [sp, #16]
 8003b10:	7823      	ldrb	r3, [r4, #0]
 8003b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b14:	d10a      	bne.n	8003b2c <_svfiprintf_r+0x130>
 8003b16:	7863      	ldrb	r3, [r4, #1]
 8003b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b1a:	d132      	bne.n	8003b82 <_svfiprintf_r+0x186>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9203      	str	r2, [sp, #12]
 8003b24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b28:	3402      	adds	r4, #2
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bf0 <_svfiprintf_r+0x1f4>
 8003b30:	7821      	ldrb	r1, [r4, #0]
 8003b32:	2203      	movs	r2, #3
 8003b34:	4650      	mov	r0, sl
 8003b36:	f7fc fb4b 	bl	80001d0 <memchr>
 8003b3a:	b138      	cbz	r0, 8003b4c <_svfiprintf_r+0x150>
 8003b3c:	9b04      	ldr	r3, [sp, #16]
 8003b3e:	eba0 000a 	sub.w	r0, r0, sl
 8003b42:	2240      	movs	r2, #64	@ 0x40
 8003b44:	4082      	lsls	r2, r0
 8003b46:	4313      	orrs	r3, r2
 8003b48:	3401      	adds	r4, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b50:	4824      	ldr	r0, [pc, #144]	@ (8003be4 <_svfiprintf_r+0x1e8>)
 8003b52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b56:	2206      	movs	r2, #6
 8003b58:	f7fc fb3a 	bl	80001d0 <memchr>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d036      	beq.n	8003bce <_svfiprintf_r+0x1d2>
 8003b60:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <_svfiprintf_r+0x1ec>)
 8003b62:	bb1b      	cbnz	r3, 8003bac <_svfiprintf_r+0x1b0>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	3307      	adds	r3, #7
 8003b68:	f023 0307 	bic.w	r3, r3, #7
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b72:	4433      	add	r3, r6
 8003b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b76:	e76a      	b.n	8003a4e <_svfiprintf_r+0x52>
 8003b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e7a8      	b.n	8003ad4 <_svfiprintf_r+0xd8>
 8003b82:	2300      	movs	r3, #0
 8003b84:	3401      	adds	r4, #1
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f04f 0c0a 	mov.w	ip, #10
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b94:	3a30      	subs	r2, #48	@ 0x30
 8003b96:	2a09      	cmp	r2, #9
 8003b98:	d903      	bls.n	8003ba2 <_svfiprintf_r+0x1a6>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0c6      	beq.n	8003b2c <_svfiprintf_r+0x130>
 8003b9e:	9105      	str	r1, [sp, #20]
 8003ba0:	e7c4      	b.n	8003b2c <_svfiprintf_r+0x130>
 8003ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e7f0      	b.n	8003b8e <_svfiprintf_r+0x192>
 8003bac:	ab03      	add	r3, sp, #12
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <_svfiprintf_r+0x1f0>)
 8003bb4:	a904      	add	r1, sp, #16
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f3af 8000 	nop.w
 8003bbc:	1c42      	adds	r2, r0, #1
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	d1d6      	bne.n	8003b70 <_svfiprintf_r+0x174>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	065b      	lsls	r3, r3, #25
 8003bc6:	f53f af2d 	bmi.w	8003a24 <_svfiprintf_r+0x28>
 8003bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bcc:	e72c      	b.n	8003a28 <_svfiprintf_r+0x2c>
 8003bce:	ab03      	add	r3, sp, #12
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <_svfiprintf_r+0x1f0>)
 8003bd6:	a904      	add	r1, sp, #16
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f000 f879 	bl	8003cd0 <_printf_i>
 8003bde:	e7ed      	b.n	8003bbc <_svfiprintf_r+0x1c0>
 8003be0:	08004168 	.word	0x08004168
 8003be4:	08004172 	.word	0x08004172
 8003be8:	00000000 	.word	0x00000000
 8003bec:	08003945 	.word	0x08003945
 8003bf0:	0800416e 	.word	0x0800416e

08003bf4 <_printf_common>:
 8003bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	4616      	mov	r6, r2
 8003bfa:	4698      	mov	r8, r3
 8003bfc:	688a      	ldr	r2, [r1, #8]
 8003bfe:	690b      	ldr	r3, [r1, #16]
 8003c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bfb8      	it	lt
 8003c08:	4613      	movlt	r3, r2
 8003c0a:	6033      	str	r3, [r6, #0]
 8003c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c10:	4607      	mov	r7, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	b10a      	cbz	r2, 8003c1a <_printf_common+0x26>
 8003c16:	3301      	adds	r3, #1
 8003c18:	6033      	str	r3, [r6, #0]
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	0699      	lsls	r1, r3, #26
 8003c1e:	bf42      	ittt	mi
 8003c20:	6833      	ldrmi	r3, [r6, #0]
 8003c22:	3302      	addmi	r3, #2
 8003c24:	6033      	strmi	r3, [r6, #0]
 8003c26:	6825      	ldr	r5, [r4, #0]
 8003c28:	f015 0506 	ands.w	r5, r5, #6
 8003c2c:	d106      	bne.n	8003c3c <_printf_common+0x48>
 8003c2e:	f104 0a19 	add.w	sl, r4, #25
 8003c32:	68e3      	ldr	r3, [r4, #12]
 8003c34:	6832      	ldr	r2, [r6, #0]
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	42ab      	cmp	r3, r5
 8003c3a:	dc26      	bgt.n	8003c8a <_printf_common+0x96>
 8003c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	3b00      	subs	r3, #0
 8003c44:	bf18      	it	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	0692      	lsls	r2, r2, #26
 8003c4a:	d42b      	bmi.n	8003ca4 <_printf_common+0xb0>
 8003c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c50:	4641      	mov	r1, r8
 8003c52:	4638      	mov	r0, r7
 8003c54:	47c8      	blx	r9
 8003c56:	3001      	adds	r0, #1
 8003c58:	d01e      	beq.n	8003c98 <_printf_common+0xa4>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	6922      	ldr	r2, [r4, #16]
 8003c5e:	f003 0306 	and.w	r3, r3, #6
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	bf02      	ittt	eq
 8003c66:	68e5      	ldreq	r5, [r4, #12]
 8003c68:	6833      	ldreq	r3, [r6, #0]
 8003c6a:	1aed      	subeq	r5, r5, r3
 8003c6c:	68a3      	ldr	r3, [r4, #8]
 8003c6e:	bf0c      	ite	eq
 8003c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c74:	2500      	movne	r5, #0
 8003c76:	4293      	cmp	r3, r2
 8003c78:	bfc4      	itt	gt
 8003c7a:	1a9b      	subgt	r3, r3, r2
 8003c7c:	18ed      	addgt	r5, r5, r3
 8003c7e:	2600      	movs	r6, #0
 8003c80:	341a      	adds	r4, #26
 8003c82:	42b5      	cmp	r5, r6
 8003c84:	d11a      	bne.n	8003cbc <_printf_common+0xc8>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e008      	b.n	8003c9c <_printf_common+0xa8>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4641      	mov	r1, r8
 8003c90:	4638      	mov	r0, r7
 8003c92:	47c8      	blx	r9
 8003c94:	3001      	adds	r0, #1
 8003c96:	d103      	bne.n	8003ca0 <_printf_common+0xac>
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca0:	3501      	adds	r5, #1
 8003ca2:	e7c6      	b.n	8003c32 <_printf_common+0x3e>
 8003ca4:	18e1      	adds	r1, r4, r3
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	2030      	movs	r0, #48	@ 0x30
 8003caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cae:	4422      	add	r2, r4
 8003cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cb8:	3302      	adds	r3, #2
 8003cba:	e7c7      	b.n	8003c4c <_printf_common+0x58>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	47c8      	blx	r9
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d0e6      	beq.n	8003c98 <_printf_common+0xa4>
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7d9      	b.n	8003c82 <_printf_common+0x8e>
	...

08003cd0 <_printf_i>:
 8003cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	7e0f      	ldrb	r7, [r1, #24]
 8003cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cd8:	2f78      	cmp	r7, #120	@ 0x78
 8003cda:	4691      	mov	r9, r2
 8003cdc:	4680      	mov	r8, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ce6:	d807      	bhi.n	8003cf8 <_printf_i+0x28>
 8003ce8:	2f62      	cmp	r7, #98	@ 0x62
 8003cea:	d80a      	bhi.n	8003d02 <_printf_i+0x32>
 8003cec:	2f00      	cmp	r7, #0
 8003cee:	f000 80d2 	beq.w	8003e96 <_printf_i+0x1c6>
 8003cf2:	2f58      	cmp	r7, #88	@ 0x58
 8003cf4:	f000 80b9 	beq.w	8003e6a <_printf_i+0x19a>
 8003cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d00:	e03a      	b.n	8003d78 <_printf_i+0xa8>
 8003d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d06:	2b15      	cmp	r3, #21
 8003d08:	d8f6      	bhi.n	8003cf8 <_printf_i+0x28>
 8003d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d10 <_printf_i+0x40>)
 8003d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d7d 	.word	0x08003d7d
 8003d18:	08003cf9 	.word	0x08003cf9
 8003d1c:	08003cf9 	.word	0x08003cf9
 8003d20:	08003cf9 	.word	0x08003cf9
 8003d24:	08003cf9 	.word	0x08003cf9
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003cf9 	.word	0x08003cf9
 8003d30:	08003cf9 	.word	0x08003cf9
 8003d34:	08003cf9 	.word	0x08003cf9
 8003d38:	08003cf9 	.word	0x08003cf9
 8003d3c:	08003e7d 	.word	0x08003e7d
 8003d40:	08003da7 	.word	0x08003da7
 8003d44:	08003e37 	.word	0x08003e37
 8003d48:	08003cf9 	.word	0x08003cf9
 8003d4c:	08003cf9 	.word	0x08003cf9
 8003d50:	08003e9f 	.word	0x08003e9f
 8003d54:	08003cf9 	.word	0x08003cf9
 8003d58:	08003da7 	.word	0x08003da7
 8003d5c:	08003cf9 	.word	0x08003cf9
 8003d60:	08003cf9 	.word	0x08003cf9
 8003d64:	08003e3f 	.word	0x08003e3f
 8003d68:	6833      	ldr	r3, [r6, #0]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6032      	str	r2, [r6, #0]
 8003d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e09d      	b.n	8003eb8 <_printf_i+0x1e8>
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	6820      	ldr	r0, [r4, #0]
 8003d80:	1d19      	adds	r1, r3, #4
 8003d82:	6031      	str	r1, [r6, #0]
 8003d84:	0606      	lsls	r6, r0, #24
 8003d86:	d501      	bpl.n	8003d8c <_printf_i+0xbc>
 8003d88:	681d      	ldr	r5, [r3, #0]
 8003d8a:	e003      	b.n	8003d94 <_printf_i+0xc4>
 8003d8c:	0645      	lsls	r5, r0, #25
 8003d8e:	d5fb      	bpl.n	8003d88 <_printf_i+0xb8>
 8003d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	da03      	bge.n	8003da0 <_printf_i+0xd0>
 8003d98:	232d      	movs	r3, #45	@ 0x2d
 8003d9a:	426d      	negs	r5, r5
 8003d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003da0:	4859      	ldr	r0, [pc, #356]	@ (8003f08 <_printf_i+0x238>)
 8003da2:	230a      	movs	r3, #10
 8003da4:	e011      	b.n	8003dca <_printf_i+0xfa>
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	0608      	lsls	r0, r1, #24
 8003dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003db0:	d402      	bmi.n	8003db8 <_printf_i+0xe8>
 8003db2:	0649      	lsls	r1, r1, #25
 8003db4:	bf48      	it	mi
 8003db6:	b2ad      	uxthmi	r5, r5
 8003db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dba:	4853      	ldr	r0, [pc, #332]	@ (8003f08 <_printf_i+0x238>)
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	bf14      	ite	ne
 8003dc0:	230a      	movne	r3, #10
 8003dc2:	2308      	moveq	r3, #8
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dca:	6866      	ldr	r6, [r4, #4]
 8003dcc:	60a6      	str	r6, [r4, #8]
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	bfa2      	ittt	ge
 8003dd2:	6821      	ldrge	r1, [r4, #0]
 8003dd4:	f021 0104 	bicge.w	r1, r1, #4
 8003dd8:	6021      	strge	r1, [r4, #0]
 8003dda:	b90d      	cbnz	r5, 8003de0 <_printf_i+0x110>
 8003ddc:	2e00      	cmp	r6, #0
 8003dde:	d04b      	beq.n	8003e78 <_printf_i+0x1a8>
 8003de0:	4616      	mov	r6, r2
 8003de2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de6:	fb03 5711 	mls	r7, r3, r1, r5
 8003dea:	5dc7      	ldrb	r7, [r0, r7]
 8003dec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003df0:	462f      	mov	r7, r5
 8003df2:	42bb      	cmp	r3, r7
 8003df4:	460d      	mov	r5, r1
 8003df6:	d9f4      	bls.n	8003de2 <_printf_i+0x112>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d10b      	bne.n	8003e14 <_printf_i+0x144>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	07df      	lsls	r7, r3, #31
 8003e00:	d508      	bpl.n	8003e14 <_printf_i+0x144>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	6861      	ldr	r1, [r4, #4]
 8003e06:	4299      	cmp	r1, r3
 8003e08:	bfde      	ittt	le
 8003e0a:	2330      	movle	r3, #48	@ 0x30
 8003e0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e14:	1b92      	subs	r2, r2, r6
 8003e16:	6122      	str	r2, [r4, #16]
 8003e18:	f8cd a000 	str.w	sl, [sp]
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	aa03      	add	r2, sp, #12
 8003e20:	4621      	mov	r1, r4
 8003e22:	4640      	mov	r0, r8
 8003e24:	f7ff fee6 	bl	8003bf4 <_printf_common>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d14a      	bne.n	8003ec2 <_printf_i+0x1f2>
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	b004      	add	sp, #16
 8003e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f043 0320 	orr.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	4833      	ldr	r0, [pc, #204]	@ (8003f0c <_printf_i+0x23c>)
 8003e40:	2778      	movs	r7, #120	@ 0x78
 8003e42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6831      	ldr	r1, [r6, #0]
 8003e4a:	061f      	lsls	r7, r3, #24
 8003e4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e50:	d402      	bmi.n	8003e58 <_printf_i+0x188>
 8003e52:	065f      	lsls	r7, r3, #25
 8003e54:	bf48      	it	mi
 8003e56:	b2ad      	uxthmi	r5, r5
 8003e58:	6031      	str	r1, [r6, #0]
 8003e5a:	07d9      	lsls	r1, r3, #31
 8003e5c:	bf44      	itt	mi
 8003e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e62:	6023      	strmi	r3, [r4, #0]
 8003e64:	b11d      	cbz	r5, 8003e6e <_printf_i+0x19e>
 8003e66:	2310      	movs	r3, #16
 8003e68:	e7ac      	b.n	8003dc4 <_printf_i+0xf4>
 8003e6a:	4827      	ldr	r0, [pc, #156]	@ (8003f08 <_printf_i+0x238>)
 8003e6c:	e7e9      	b.n	8003e42 <_printf_i+0x172>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f023 0320 	bic.w	r3, r3, #32
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	e7f6      	b.n	8003e66 <_printf_i+0x196>
 8003e78:	4616      	mov	r6, r2
 8003e7a:	e7bd      	b.n	8003df8 <_printf_i+0x128>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	6825      	ldr	r5, [r4, #0]
 8003e80:	6961      	ldr	r1, [r4, #20]
 8003e82:	1d18      	adds	r0, r3, #4
 8003e84:	6030      	str	r0, [r6, #0]
 8003e86:	062e      	lsls	r6, r5, #24
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	d501      	bpl.n	8003e90 <_printf_i+0x1c0>
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <_printf_i+0x1c6>
 8003e90:	0668      	lsls	r0, r5, #25
 8003e92:	d5fb      	bpl.n	8003e8c <_printf_i+0x1bc>
 8003e94:	8019      	strh	r1, [r3, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	e7bc      	b.n	8003e18 <_printf_i+0x148>
 8003e9e:	6833      	ldr	r3, [r6, #0]
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	6032      	str	r2, [r6, #0]
 8003ea4:	681e      	ldr	r6, [r3, #0]
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7fc f990 	bl	80001d0 <memchr>
 8003eb0:	b108      	cbz	r0, 8003eb6 <_printf_i+0x1e6>
 8003eb2:	1b80      	subs	r0, r0, r6
 8003eb4:	6060      	str	r0, [r4, #4]
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec0:	e7aa      	b.n	8003e18 <_printf_i+0x148>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	47d0      	blx	sl
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d0ad      	beq.n	8003e2c <_printf_i+0x15c>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	079b      	lsls	r3, r3, #30
 8003ed4:	d413      	bmi.n	8003efe <_printf_i+0x22e>
 8003ed6:	68e0      	ldr	r0, [r4, #12]
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	4298      	cmp	r0, r3
 8003edc:	bfb8      	it	lt
 8003ede:	4618      	movlt	r0, r3
 8003ee0:	e7a6      	b.n	8003e30 <_printf_i+0x160>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d09d      	beq.n	8003e2c <_printf_i+0x15c>
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	9903      	ldr	r1, [sp, #12]
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dcf2      	bgt.n	8003ee2 <_printf_i+0x212>
 8003efc:	e7eb      	b.n	8003ed6 <_printf_i+0x206>
 8003efe:	2500      	movs	r5, #0
 8003f00:	f104 0619 	add.w	r6, r4, #25
 8003f04:	e7f5      	b.n	8003ef2 <_printf_i+0x222>
 8003f06:	bf00      	nop
 8003f08:	08004179 	.word	0x08004179
 8003f0c:	0800418a 	.word	0x0800418a

08003f10 <memmove>:
 8003f10:	4288      	cmp	r0, r1
 8003f12:	b510      	push	{r4, lr}
 8003f14:	eb01 0402 	add.w	r4, r1, r2
 8003f18:	d902      	bls.n	8003f20 <memmove+0x10>
 8003f1a:	4284      	cmp	r4, r0
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	d807      	bhi.n	8003f30 <memmove+0x20>
 8003f20:	1e43      	subs	r3, r0, #1
 8003f22:	42a1      	cmp	r1, r4
 8003f24:	d008      	beq.n	8003f38 <memmove+0x28>
 8003f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f2e:	e7f8      	b.n	8003f22 <memmove+0x12>
 8003f30:	4402      	add	r2, r0
 8003f32:	4601      	mov	r1, r0
 8003f34:	428a      	cmp	r2, r1
 8003f36:	d100      	bne.n	8003f3a <memmove+0x2a>
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f42:	e7f7      	b.n	8003f34 <memmove+0x24>

08003f44 <_sbrk_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d06      	ldr	r5, [pc, #24]	@ (8003f60 <_sbrk_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fd f976 	bl	8001240 <_sbrk>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_sbrk_r+0x1a>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_sbrk_r+0x1a>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200002dc 	.word	0x200002dc

08003f64 <memcpy>:
 8003f64:	440a      	add	r2, r1
 8003f66:	4291      	cmp	r1, r2
 8003f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f6c:	d100      	bne.n	8003f70 <memcpy+0xc>
 8003f6e:	4770      	bx	lr
 8003f70:	b510      	push	{r4, lr}
 8003f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	d1f9      	bne.n	8003f72 <memcpy+0xe>
 8003f7e:	bd10      	pop	{r4, pc}

08003f80 <_realloc_r>:
 8003f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f84:	4680      	mov	r8, r0
 8003f86:	4615      	mov	r5, r2
 8003f88:	460c      	mov	r4, r1
 8003f8a:	b921      	cbnz	r1, 8003f96 <_realloc_r+0x16>
 8003f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f90:	4611      	mov	r1, r2
 8003f92:	f7ff bc4b 	b.w	800382c <_malloc_r>
 8003f96:	b92a      	cbnz	r2, 8003fa4 <_realloc_r+0x24>
 8003f98:	f7ff fbdc 	bl	8003754 <_free_r>
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	f000 f81a 	bl	8003fdc <_malloc_usable_size_r>
 8003fa8:	4285      	cmp	r5, r0
 8003faa:	4606      	mov	r6, r0
 8003fac:	d802      	bhi.n	8003fb4 <_realloc_r+0x34>
 8003fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003fb2:	d8f4      	bhi.n	8003f9e <_realloc_r+0x1e>
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f7ff fc38 	bl	800382c <_malloc_r>
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d0ec      	beq.n	8003f9c <_realloc_r+0x1c>
 8003fc2:	42b5      	cmp	r5, r6
 8003fc4:	462a      	mov	r2, r5
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	bf28      	it	cs
 8003fca:	4632      	movcs	r2, r6
 8003fcc:	f7ff ffca 	bl	8003f64 <memcpy>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	f7ff fbbe 	bl	8003754 <_free_r>
 8003fd8:	463c      	mov	r4, r7
 8003fda:	e7e0      	b.n	8003f9e <_realloc_r+0x1e>

08003fdc <_malloc_usable_size_r>:
 8003fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe0:	1f18      	subs	r0, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfbc      	itt	lt
 8003fe6:	580b      	ldrlt	r3, [r1, r0]
 8003fe8:	18c0      	addlt	r0, r0, r3
 8003fea:	4770      	bx	lr

08003fec <_init>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr

08003ff8 <_fini>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	bf00      	nop
 8003ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffe:	bc08      	pop	{r3}
 8004000:	469e      	mov	lr, r3
 8004002:	4770      	bx	lr
