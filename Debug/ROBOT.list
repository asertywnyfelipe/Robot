
ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c60  08004c60  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c68  08004c68  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004c70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006084  2**0
                  CONTENTS
 10 .bss          0000032c  20000084  20000084  00006084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  00006084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105f9  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f3  00000000  00000000  000166ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00018ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1a  00000000  00000000  00019c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002218b  00000000  00000000  0001a81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144cd  00000000  00000000  0003c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdbf7  00000000  00000000  00050e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ea69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000454c  00000000  00000000  0011eaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00122ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ae0 	.word	0x08004ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08004ae0 	.word	0x08004ae0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <MX_GPIO_Init+0xe0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a30      	ldr	r2, [pc, #192]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b2e      	ldr	r3, [pc, #184]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xe0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <MX_GPIO_Init+0xe0>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 41aa 	mov.w	r1, #21760	@ 0x5500
 80005ec:	4815      	ldr	r0, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xe4>)
 80005ee:	f001 fbe3 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT1_Forward_Pin|MOT1_Backward_Pin|MOT2_Forward_Pin|MOT2_Backward_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_GPIO_Init+0xe8>)
 80005fa:	f001 fbdd 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C3_Keyboard_Pin|C2_Keyboard_Pin|C1_Keyboard_Pin;
 80005fe:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <MX_GPIO_Init+0xec>)
 8000614:	f001 fa1c 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = R4_Keyboard_Pin|R3_Keyboard_Pin|R2_Keyboard_Pin|R1_Keyboard_Pin;
 8000618:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4804      	ldr	r0, [pc, #16]	@ (8000644 <MX_GPIO_Init+0xe4>)
 8000632:	f001 fa0d 	bl	8001a50 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400

08000650 <read_keyboard>:

/* USER CODE BEGIN 2 */
char read_keyboard() {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_RESET); //Pull the R1 low
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800065a:	48a2      	ldr	r0, [pc, #648]	@ (80008e4 <read_keyboard+0x294>)
 800065c:	f001 fbac 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000666:	489f      	ldr	r0, [pc, #636]	@ (80008e4 <read_keyboard+0x294>)
 8000668:	f001 fba6 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000672:	489c      	ldr	r0, [pc, #624]	@ (80008e4 <read_keyboard+0x294>)
 8000674:	f001 fba0 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	4899      	ldr	r0, [pc, #612]	@ (80008e4 <read_keyboard+0x294>)
 8000680:	f001 fb9a 	bl	8001db8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 8000684:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000688:	4897      	ldr	r0, [pc, #604]	@ (80008e8 <read_keyboard+0x298>)
 800068a:	f001 fb7d 	bl	8001d88 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10a      	bne.n	80006aa <read_keyboard+0x5a>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 8000694:	bf00      	nop
 8000696:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800069a:	4893      	ldr	r0, [pc, #588]	@ (80008e8 <read_keyboard+0x298>)
 800069c:	f001 fb74 	bl	8001d88 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0f7      	beq.n	8000696 <read_keyboard+0x46>
			; // wait till the button is pressed
		return '1';
 80006a6:	2331      	movs	r3, #49	@ 0x31
 80006a8:	e119      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 80006aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ae:	488e      	ldr	r0, [pc, #568]	@ (80008e8 <read_keyboard+0x298>)
 80006b0:	f001 fb6a 	bl	8001d88 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10a      	bne.n	80006d0 <read_keyboard+0x80>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 80006ba:	bf00      	nop
 80006bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c0:	4889      	ldr	r0, [pc, #548]	@ (80008e8 <read_keyboard+0x298>)
 80006c2:	f001 fb61 	bl	8001d88 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f7      	beq.n	80006bc <read_keyboard+0x6c>
			;
		// wait till the button is pressed
		return '2';
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	e106      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 80006d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d4:	4884      	ldr	r0, [pc, #528]	@ (80008e8 <read_keyboard+0x298>)
 80006d6:	f001 fb57 	bl	8001d88 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10a      	bne.n	80006f6 <read_keyboard+0xa6>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 80006e0:	bf00      	nop
 80006e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e6:	4880      	ldr	r0, [pc, #512]	@ (80008e8 <read_keyboard+0x298>)
 80006e8:	f001 fb4e 	bl	8001d88 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f7      	beq.n	80006e2 <read_keyboard+0x92>
			;
		// wait till the button is pressed
		return '3';
 80006f2:	2333      	movs	r3, #51	@ 0x33
 80006f4:	e0f3      	b.n	80008de <read_keyboard+0x28e>
	}
	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fc:	4879      	ldr	r0, [pc, #484]	@ (80008e4 <read_keyboard+0x294>)
 80006fe:	f001 fb5b 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R2 High
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000708:	4876      	ldr	r0, [pc, #472]	@ (80008e4 <read_keyboard+0x294>)
 800070a:	f001 fb55 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000714:	4873      	ldr	r0, [pc, #460]	@ (80008e4 <read_keyboard+0x294>)
 8000716:	f001 fb4f 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000720:	4870      	ldr	r0, [pc, #448]	@ (80008e4 <read_keyboard+0x294>)
 8000722:	f001 fb49 	bl	8001db8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	486f      	ldr	r0, [pc, #444]	@ (80008e8 <read_keyboard+0x298>)
 800072c:	f001 fb2c 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d10a      	bne.n	800074c <read_keyboard+0xfc>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 8000736:	bf00      	nop
 8000738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073c:	486a      	ldr	r0, [pc, #424]	@ (80008e8 <read_keyboard+0x298>)
 800073e:	f001 fb23 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0f7      	beq.n	8000738 <read_keyboard+0xe8>
			;   // wait till the button is pressed
		return '4';
 8000748:	2334      	movs	r3, #52	@ 0x34
 800074a:	e0c8      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 800074c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000750:	4865      	ldr	r0, [pc, #404]	@ (80008e8 <read_keyboard+0x298>)
 8000752:	f001 fb19 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10a      	bne.n	8000772 <read_keyboard+0x122>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 800075c:	bf00      	nop
 800075e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000762:	4861      	ldr	r0, [pc, #388]	@ (80008e8 <read_keyboard+0x298>)
 8000764:	f001 fb10 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f7      	beq.n	800075e <read_keyboard+0x10e>
			;   // wait till the button is pressed
		return '5';
 800076e:	2335      	movs	r3, #53	@ 0x35
 8000770:	e0b5      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	485c      	ldr	r0, [pc, #368]	@ (80008e8 <read_keyboard+0x298>)
 8000778:	f001 fb06 	bl	8001d88 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10a      	bne.n	8000798 <read_keyboard+0x148>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 8000782:	bf00      	nop
 8000784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000788:	4857      	ldr	r0, [pc, #348]	@ (80008e8 <read_keyboard+0x298>)
 800078a:	f001 fafd 	bl	8001d88 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f7      	beq.n	8000784 <read_keyboard+0x134>
			;   // wait till the button is pressed
		return '6';
 8000794:	2336      	movs	r3, #54	@ 0x36
 8000796:	e0a2      	b.n	80008de <read_keyboard+0x28e>
	}

	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079e:	4851      	ldr	r0, [pc, #324]	@ (80008e4 <read_keyboard+0x294>)
 80007a0:	f001 fb0a 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007aa:	484e      	ldr	r0, [pc, #312]	@ (80008e4 <read_keyboard+0x294>)
 80007ac:	f001 fb04 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R3 High
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b6:	484b      	ldr	r0, [pc, #300]	@ (80008e4 <read_keyboard+0x294>)
 80007b8:	f001 fafe 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_SET); // Pull the R4 High
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c2:	4848      	ldr	r0, [pc, #288]	@ (80008e4 <read_keyboard+0x294>)
 80007c4:	f001 faf8 	bl	8001db8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 80007c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007cc:	4846      	ldr	r0, [pc, #280]	@ (80008e8 <read_keyboard+0x298>)
 80007ce:	f001 fadb 	bl	8001d88 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10a      	bne.n	80007ee <read_keyboard+0x19e>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 80007d8:	bf00      	nop
 80007da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007de:	4842      	ldr	r0, [pc, #264]	@ (80008e8 <read_keyboard+0x298>)
 80007e0:	f001 fad2 	bl	8001d88 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f7      	beq.n	80007da <read_keyboard+0x18a>
			;   // wait till the button is pressed
		return '7';
 80007ea:	2337      	movs	r3, #55	@ 0x37
 80007ec:	e077      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 80007ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f2:	483d      	ldr	r0, [pc, #244]	@ (80008e8 <read_keyboard+0x298>)
 80007f4:	f001 fac8 	bl	8001d88 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10a      	bne.n	8000814 <read_keyboard+0x1c4>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 80007fe:	bf00      	nop
 8000800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000804:	4838      	ldr	r0, [pc, #224]	@ (80008e8 <read_keyboard+0x298>)
 8000806:	f001 fabf 	bl	8001d88 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f7      	beq.n	8000800 <read_keyboard+0x1b0>
			;   // wait till the button is pressed
		return '8';
 8000810:	2338      	movs	r3, #56	@ 0x38
 8000812:	e064      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 8000814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000818:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <read_keyboard+0x298>)
 800081a:	f001 fab5 	bl	8001d88 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d10a      	bne.n	800083a <read_keyboard+0x1ea>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 8000824:	bf00      	nop
 8000826:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082a:	482f      	ldr	r0, [pc, #188]	@ (80008e8 <read_keyboard+0x298>)
 800082c:	f001 faac 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f7      	beq.n	8000826 <read_keyboard+0x1d6>
			;   // wait till the button is pressed
		return '9';
 8000836:	2339      	movs	r3, #57	@ 0x39
 8000838:	e051      	b.n	80008de <read_keyboard+0x28e>
	}
	HAL_GPIO_WritePin(GPIOD, R1_Keyboard_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000840:	4828      	ldr	r0, [pc, #160]	@ (80008e4 <read_keyboard+0x294>)
 8000842:	f001 fab9 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R2_Keyboard_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <read_keyboard+0x294>)
 800084e:	f001 fab3 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R3_Keyboard_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000858:	4822      	ldr	r0, [pc, #136]	@ (80008e4 <read_keyboard+0x294>)
 800085a:	f001 faad 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, R4_Keyboard_Pin, GPIO_PIN_RESET); // Pull the R4 High
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000864:	481f      	ldr	r0, [pc, #124]	@ (80008e4 <read_keyboard+0x294>)
 8000866:	f001 faa7 	bl	8001db8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))   // if the Col 1 is low
 800086a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086e:	481e      	ldr	r0, [pc, #120]	@ (80008e8 <read_keyboard+0x298>)
 8000870:	f001 fa8a 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10a      	bne.n	8000890 <read_keyboard+0x240>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C1_Keyboard_Pin)))
 800087a:	bf00      	nop
 800087c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000880:	4819      	ldr	r0, [pc, #100]	@ (80008e8 <read_keyboard+0x298>)
 8000882:	f001 fa81 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f7      	beq.n	800087c <read_keyboard+0x22c>
			;   // wait till the button is pressed
		return '*';
 800088c:	232a      	movs	r3, #42	@ 0x2a
 800088e:	e026      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))   // if the Col 2 is low
 8000890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000894:	4814      	ldr	r0, [pc, #80]	@ (80008e8 <read_keyboard+0x298>)
 8000896:	f001 fa77 	bl	8001d88 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10a      	bne.n	80008b6 <read_keyboard+0x266>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C2_Keyboard_Pin)))
 80008a0:	bf00      	nop
 80008a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a6:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <read_keyboard+0x298>)
 80008a8:	f001 fa6e 	bl	8001d88 <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f7      	beq.n	80008a2 <read_keyboard+0x252>
			;   // wait till the button is pressed
		return '0';
 80008b2:	2330      	movs	r3, #48	@ 0x30
 80008b4:	e013      	b.n	80008de <read_keyboard+0x28e>
	}

	if (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))   // if the Col 3 is low
 80008b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <read_keyboard+0x298>)
 80008bc:	f001 fa64 	bl	8001d88 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10a      	bne.n	80008dc <read_keyboard+0x28c>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, C3_Keyboard_Pin)))
 80008c6:	bf00      	nop
 80008c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <read_keyboard+0x298>)
 80008ce:	f001 fa5b 	bl	8001d88 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0f7      	beq.n	80008c8 <read_keyboard+0x278>
			;   // wait till the button is pressed
		return '#';
 80008d8:	2323      	movs	r3, #35	@ 0x23
 80008da:	e000      	b.n	80008de <read_keyboard+0x28e>
	}

	return 'X';
 80008dc:	2358      	movs	r3, #88	@ 0x58
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020400 	.word	0x40020400

080008ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C1_Init+0x50>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <MX_I2C1_Init+0x54>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_I2C1_Init+0x50>)
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <MX_I2C1_Init+0x58>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_I2C1_Init+0x50>)
 800090a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800090e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_I2C1_Init+0x50>)
 800092a:	f001 fa5f 	bl	8001dec <HAL_I2C_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 fc16 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000a0 	.word	0x200000a0
 8000940:	40005400 	.word	0x40005400
 8000944:	000186a0 	.word	0x000186a0

08000948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_I2C_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12c      	bne.n	80009c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <HAL_I2C_MspInit+0x8c>)
 80009a4:	f001 f854 	bl	8001a50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_I2C_MspInit+0x88>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80009ee:	2308      	movs	r3, #8
 80009f0:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80009f2:	2028      	movs	r0, #40	@ 0x28
 80009f4:	f000 ff22 	bl	800183c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	2130      	movs	r1, #48	@ 0x30
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f829 	bl	8000a58 <lcd_write>
	HAL_Delay(5);
 8000a06:	2005      	movs	r0, #5
 8000a08:	f000 ff18 	bl	800183c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	2130      	movs	r1, #48	@ 0x30
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f81f 	bl	8000a58 <lcd_write>
	HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 ff0e 	bl	800183c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	2130      	movs	r1, #48	@ 0x30
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f815 	bl	8000a58 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f80e 	bl	8000a58 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	210c      	movs	r1, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f807 	bl	8000a58 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f89f 	bl	8000b8e <lcd_clear>

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	460b      	mov	r3, r1
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000a80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a84:	f023 030f 	bic.w	r3, r3, #15
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	797b      	ldrb	r3, [r7, #5]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	f107 020c 	add.w	r2, r7, #12
 8000ac4:	2364      	movs	r3, #100	@ 0x64
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2304      	movs	r3, #4
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <lcd_write+0x88>)
 8000acc:	f001 fad2 	bl	8002074 <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f000 feb3 	bl	800183c <HAL_Delay>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000a0 	.word	0x200000a0

08000ae4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	2300      	movs	r3, #0
 8000af2:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000afe:	2308      	movs	r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f843 	bl	8000b8e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	2180      	movs	r1, #128	@ 0x80
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ffa1 	bl	8000a58 <lcd_write>
	while(lcd->f_line[i])
 8000b16:	e00f      	b.n	8000b38 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7818      	ldrb	r0, [r3, #0]
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	7859      	ldrb	r1, [r3, #1]
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f7ff ff93 	bl	8000a58 <lcd_write>
		i++;
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	3301      	adds	r3, #1
 8000b36:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e9      	bne.n	8000b18 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	21c0      	movs	r1, #192	@ 0xc0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff81 	bl	8000a58 <lcd_write>
	while(lcd->s_line[i])
 8000b56:	e00f      	b.n	8000b78 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7818      	ldrb	r0, [r3, #0]
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	7d19      	ldrb	r1, [r3, #20]
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f7ff ff73 	bl	8000a58 <lcd_write>
		i++;
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	3301      	adds	r3, #1
 8000b76:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	7d1b      	ldrb	r3, [r3, #20]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <lcd_display+0x74>
	}
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff51 	bl	8000a58 <lcd_write>
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <Display>:
Menu menu = { .index = 1, .indexResult = -1, .lcdDisplayStart = 0,
		.lcdIndexStart = 0 };

RobotComponents robot;

void Display() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if (menu.lcdDisplayStart % menuStep == 0) //beginning of menu
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <Display+0x98>)
 8000bc6:	6899      	ldr	r1, [r3, #8]
 8000bc8:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <Display+0x9c>)
 8000bca:	fb83 2301 	smull	r2, r3, r3, r1
 8000bce:	109a      	asrs	r2, r3, #2
 8000bd0:	17cb      	asrs	r3, r1, #31
 8000bd2:	1ad2      	subs	r2, r2, r3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	1aca      	subs	r2, r1, r3
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d103      	bne.n	8000bea <Display+0x2a>
			{
		menu.lcdDisplayStart = menu.index;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <Display+0x98>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <Display+0x98>)
 8000be8:	6093      	str	r3, [r2, #8]
	}
	if (menuItem[(menu.index) + 1].subMenu == -2) //end of menu
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <Display+0x98>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c60 <Display+0xa0>)
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f113 0f02 	cmn.w	r3, #2
 8000bfc:	d105      	bne.n	8000c0a <Display+0x4a>
			{
		menu.lcdDisplayStart = menu.index - 2;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <Display+0x98>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b02      	subs	r3, #2
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <Display+0x98>)
 8000c06:	6093      	str	r3, [r2, #8]
 8000c08:	e004      	b.n	8000c14 <Display+0x54>
	} else //middle of menu
	{
		menu.lcdDisplayStart = menu.index - 1;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <Display+0x98>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <Display+0x98>)
 8000c12:	6093      	str	r3, [r2, #8]
	}
	menu.lcdDisplayStart = menu.index;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <Display+0x98>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <Display+0x98>)
 8000c1a:	6093      	str	r3, [r2, #8]

	sprintf((char*) disp.f_line, ">%s", menuItem[menu.lcdDisplayStart].name);
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <Display+0x98>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <Display+0xa0>)
 8000c22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c26:	461a      	mov	r2, r3
 8000c28:	490e      	ldr	r1, [pc, #56]	@ (8000c64 <Display+0xa4>)
 8000c2a:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <Display+0xa8>)
 8000c2c:	f003 fab8 	bl	80041a0 <siprintf>
	sprintf((char*) disp.s_line, menuItem[menu.lcdDisplayStart + 1].name);
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <Display+0x98>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <Display+0xa0>)
 8000c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <Display+0xac>)
 8000c40:	f003 faae 	bl	80041a0 <siprintf>
	lcd_display(&disp);
 8000c44:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <Display+0xb0>)
 8000c46:	f7ff ff4d 	bl	8000ae4 <lcd_display>
	HAL_Delay(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4e:	f000 fdf5 	bl	800183c <HAL_Delay>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000018 	.word	0x20000018
 8000c5c:	66666667 	.word	0x66666667
 8000c60:	08004ba4 	.word	0x08004ba4
 8000c64:	08004b60 	.word	0x08004b60
 8000c68:	200000f9 	.word	0x200000f9
 8000c6c:	2000010c 	.word	0x2000010c
 8000c70:	200000f8 	.word	0x200000f8

08000c74 <MenuOk>:

void MenuOk() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	if (menuItem[menu.index].subMenu > 0) //jezeli istnieje submenu
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <MenuOk+0xb4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8000d2c <MenuOk+0xb8>)
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4413      	add	r3, r2
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dd49      	ble.n	8000d1c <MenuOk+0xa8>
			{
		if (menuItem[menu.index].subMenu > menu.index) //jezeli submenu jest wieksze niz obecne menu (idziemy w gore)
 8000c88:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <MenuOk+0xb4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <MenuOk+0xb8>)
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4413      	add	r3, r2
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <MenuOk+0xb4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dd11      	ble.n	8000cc0 <MenuOk+0x4c>
				{
			menu.lcdIndexStart = menuItem[menu.index].subMenu;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MenuOk+0xb4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a22      	ldr	r2, [pc, #136]	@ (8000d2c <MenuOk+0xb8>)
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <MenuOk+0xb4>)
 8000caa:	60d3      	str	r3, [r2, #12]
			menu.index = menu.lcdIndexStart + 1;  //jestesmy na 1 nizej niz menu
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MenuOk+0xb4>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <MenuOk+0xb4>)
 8000cb4:	6013      	str	r3, [r2, #0]
			menu.lcdDisplayStart = menu.lcdIndexStart;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MenuOk+0xb4>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <MenuOk+0xb4>)
 8000cbc:	6093      	str	r3, [r2, #8]
 8000cbe:	e02a      	b.n	8000d16 <MenuOk+0xa2>
		} else //jezeli submenu jest mniejsze
		{

			menu.lcdIndexStart = menuItem[menu.index].subMenu / menuStep;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MenuOk+0xb4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <MenuOk+0xb8>)
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <MenuOk+0xbc>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	1092      	asrs	r2, r2, #2
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	4a13      	ldr	r2, [pc, #76]	@ (8000d28 <MenuOk+0xb4>)
 8000cda:	60d3      	str	r3, [r2, #12]
			menu.lcdIndexStart *= menuStep;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MenuOk+0xb4>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MenuOk+0xb4>)
 8000cec:	60da      	str	r2, [r3, #12]
			menu.index = menuItem[menu.index].subMenu;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MenuOk+0xb4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <MenuOk+0xb8>)
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <MenuOk+0xb4>)
 8000cfc:	6013      	str	r3, [r2, #0]
			menu.lcdDisplayStart = menu.index - 1;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <MenuOk+0xb4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <MenuOk+0xb4>)
 8000d06:	6093      	str	r3, [r2, #8]
			if (menu.lcdDisplayStart < 0)
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <MenuOk+0xb4>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da02      	bge.n	8000d16 <MenuOk+0xa2>
				menu.lcdDisplayStart = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <MenuOk+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
		}
		Display();
 8000d16:	f7ff ff53 	bl	8000bc0 <Display>

	} else //nie ma submenu
	{
		menu.indexResult = menu.index;
	}
}
 8000d1a:	e003      	b.n	8000d24 <MenuOk+0xb0>
		menu.indexResult = menu.index;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <MenuOk+0xb4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a01      	ldr	r2, [pc, #4]	@ (8000d28 <MenuOk+0xb4>)
 8000d22:	6053      	str	r3, [r2, #4]
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	08004ba4 	.word	0x08004ba4
 8000d30:	66666667 	.word	0x66666667

08000d34 <GetButtonInput>:

void GetButtonInput() {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	char temp = read_keyboard();
 8000d3a:	f7ff fc89 	bl	8000650 <read_keyboard>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	if (temp == '8' && menuItem[(menu.index) + 1].subMenu > -2) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b38      	cmp	r3, #56	@ 0x38
 8000d46:	d11c      	bne.n	8000d82 <GetButtonInput+0x4e>
 8000d48:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <GetButtonInput+0x88>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <GetButtonInput+0x8c>)
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	db12      	blt.n	8000d82 <GetButtonInput+0x4e>
		menu.index++;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <GetButtonInput+0x88>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a16      	ldr	r2, [pc, #88]	@ (8000dbc <GetButtonInput+0x88>)
 8000d64:	6013      	str	r3, [r2, #0]
		if (menu.index > menu.lcdIndexStart + menuStep) {
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <GetButtonInput+0x88>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <GetButtonInput+0x88>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	330a      	adds	r3, #10
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dd04      	ble.n	8000d7e <GetButtonInput+0x4a>
			menu.index = menu.lcdIndexStart + menuStep;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <GetButtonInput+0x88>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	330a      	adds	r3, #10
 8000d7a:	4a10      	ldr	r2, [pc, #64]	@ (8000dbc <GetButtonInput+0x88>)
 8000d7c:	6013      	str	r3, [r2, #0]
		}
		Display();
 8000d7e:	f7ff ff1f 	bl	8000bc0 <Display>
	}
	if (temp == '2') {
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b32      	cmp	r3, #50	@ 0x32
 8000d86:	d110      	bne.n	8000daa <GetButtonInput+0x76>
		menu.index--;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <GetButtonInput+0x88>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <GetButtonInput+0x88>)
 8000d90:	6013      	str	r3, [r2, #0]
		if (menu.index < menu.lcdIndexStart) {
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <GetButtonInput+0x88>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <GetButtonInput+0x88>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da03      	bge.n	8000da6 <GetButtonInput+0x72>
			menu.index = menu.lcdIndexStart;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <GetButtonInput+0x88>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <GetButtonInput+0x88>)
 8000da4:	6013      	str	r3, [r2, #0]
		}
		Display();
 8000da6:	f7ff ff0b 	bl	8000bc0 <Display>
	}
	if (temp == '#') {
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b23      	cmp	r3, #35	@ 0x23
 8000dae:	d101      	bne.n	8000db4 <GetButtonInput+0x80>
		MenuOk();
 8000db0:	f7ff ff60 	bl	8000c74 <MenuOk>

	}
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	08004ba4 	.word	0x08004ba4

08000dc4 <Tick>:

int Tick() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	GetButtonInput();
 8000dca:	f7ff ffb3 	bl	8000d34 <GetButtonInput>
	int _indexResult = menu.indexResult;
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <Tick+0x24>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	607b      	str	r3, [r7, #4]
	menu.indexResult = -1;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <Tick+0x24>)
 8000dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dda:	605a      	str	r2, [r3, #4]
	return _indexResult;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000018 	.word	0x20000018

08000dec <DisplayParameters>:

void DisplayParameters() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	while (read_keyboard() != '#') {
 8000df0:	e029      	b.n	8000e46 <DisplayParameters+0x5a>
		sprintf((char*) disp.f_line, "SPEED LEFT:%d", robot.MotorLeft.speed);
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <DisplayParameters+0x6c>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4918      	ldr	r1, [pc, #96]	@ (8000e5c <DisplayParameters+0x70>)
 8000dfa:	4819      	ldr	r0, [pc, #100]	@ (8000e60 <DisplayParameters+0x74>)
 8000dfc:	f003 f9d0 	bl	80041a0 <siprintf>
		sprintf((char*) disp.s_line, "SPEED RIGHT:%d", robot.MotorRight.speed);
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <DisplayParameters+0x6c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4917      	ldr	r1, [pc, #92]	@ (8000e64 <DisplayParameters+0x78>)
 8000e08:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <DisplayParameters+0x7c>)
 8000e0a:	f003 f9c9 	bl	80041a0 <siprintf>
		lcd_display(&disp);
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <DisplayParameters+0x80>)
 8000e10:	f7ff fe68 	bl	8000ae4 <lcd_display>
		HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e18:	f000 fd10 	bl	800183c <HAL_Delay>

		sprintf((char*) disp.f_line, "SPEED DIR:%d", robot.MotorLeft.dir);
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <DisplayParameters+0x6c>)
 8000e1e:	7b1b      	ldrb	r3, [r3, #12]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4913      	ldr	r1, [pc, #76]	@ (8000e70 <DisplayParameters+0x84>)
 8000e24:	480e      	ldr	r0, [pc, #56]	@ (8000e60 <DisplayParameters+0x74>)
 8000e26:	f003 f9bb 	bl	80041a0 <siprintf>
		sprintf((char*) disp.s_line, "SPEED DIR:%d", robot.MotorRight.dir);
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <DisplayParameters+0x6c>)
 8000e2c:	7f1b      	ldrb	r3, [r3, #28]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	490f      	ldr	r1, [pc, #60]	@ (8000e70 <DisplayParameters+0x84>)
 8000e32:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <DisplayParameters+0x7c>)
 8000e34:	f003 f9b4 	bl	80041a0 <siprintf>
		lcd_display(&disp);
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <DisplayParameters+0x80>)
 8000e3a:	f7ff fe53 	bl	8000ae4 <lcd_display>
		HAL_Delay(1000);
 8000e3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e42:	f000 fcfb 	bl	800183c <HAL_Delay>
	while (read_keyboard() != '#') {
 8000e46:	f7ff fc03 	bl	8000650 <read_keyboard>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b23      	cmp	r3, #35	@ 0x23
 8000e4e:	d1d0      	bne.n	8000df2 <DisplayParameters+0x6>
	}
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000120 	.word	0x20000120
 8000e5c:	08004b64 	.word	0x08004b64
 8000e60:	200000f9 	.word	0x200000f9
 8000e64:	08004b74 	.word	0x08004b74
 8000e68:	2000010c 	.word	0x2000010c
 8000e6c:	200000f8 	.word	0x200000f8
 8000e70:	08004b84 	.word	0x08004b84

08000e74 <MenuDecode>:

void MenuDecode() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	switch (menuSelected) {
 8000e7a:	4b54      	ldr	r3, [pc, #336]	@ (8000fcc <MenuDecode+0x158>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	f200 809f 	bhi.w	8000fc2 <MenuDecode+0x14e>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <MenuDecode+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000fc3 	.word	0x08000fc3
 8000e90:	08000fc3 	.word	0x08000fc3
 8000e94:	08000fc3 	.word	0x08000fc3
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	08000f51 	.word	0x08000f51
 8000ea0:	08000fc3 	.word	0x08000fc3
 8000ea4:	08000f7f 	.word	0x08000f7f
	case 0: {
		break;
	}
	case 3: {
		if (!isMenuLock) {
 8000ea8:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <MenuDecode+0x15c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <MenuDecode+0x4a>
			isMenuLock = true;
 8000eb6:	4b46      	ldr	r3, [pc, #280]	@ (8000fd0 <MenuDecode+0x15c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
			break;
 8000ebc:	e082      	b.n	8000fc4 <MenuDecode+0x150>
		}

		else {
			int temp_speed = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
			sprintf((char*) disp.f_line, "SPEED:%d", temp_speed);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4943      	ldr	r1, [pc, #268]	@ (8000fd4 <MenuDecode+0x160>)
 8000ec6:	4844      	ldr	r0, [pc, #272]	@ (8000fd8 <MenuDecode+0x164>)
 8000ec8:	f003 f96a 	bl	80041a0 <siprintf>
			sprintf((char*) disp.s_line, "  ");
 8000ecc:	4943      	ldr	r1, [pc, #268]	@ (8000fdc <MenuDecode+0x168>)
 8000ece:	4844      	ldr	r0, [pc, #272]	@ (8000fe0 <MenuDecode+0x16c>)
 8000ed0:	f003 f966 	bl	80041a0 <siprintf>
			lcd_display(&disp);
 8000ed4:	4843      	ldr	r0, [pc, #268]	@ (8000fe4 <MenuDecode+0x170>)
 8000ed6:	f7ff fe05 	bl	8000ae4 <lcd_display>
			while (read_keyboard() != '#') {
 8000eda:	e022      	b.n	8000f22 <MenuDecode+0xae>
				if (read_keyboard() == '2') {
 8000edc:	f7ff fbb8 	bl	8000650 <read_keyboard>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b32      	cmp	r3, #50	@ 0x32
 8000ee4:	d10a      	bne.n	8000efc <MenuDecode+0x88>
					temp_speed++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
					sprintf((char*) disp.f_line, "SPEED:%d", temp_speed);
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4939      	ldr	r1, [pc, #228]	@ (8000fd4 <MenuDecode+0x160>)
 8000ef0:	4839      	ldr	r0, [pc, #228]	@ (8000fd8 <MenuDecode+0x164>)
 8000ef2:	f003 f955 	bl	80041a0 <siprintf>
					lcd_display(&disp);
 8000ef6:	483b      	ldr	r0, [pc, #236]	@ (8000fe4 <MenuDecode+0x170>)
 8000ef8:	f7ff fdf4 	bl	8000ae4 <lcd_display>
				}

				if (read_keyboard() == '8' && temp_speed > 0) {
 8000efc:	f7ff fba8 	bl	8000650 <read_keyboard>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b38      	cmp	r3, #56	@ 0x38
 8000f04:	d10d      	bne.n	8000f22 <MenuDecode+0xae>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd0a      	ble.n	8000f22 <MenuDecode+0xae>
					temp_speed--;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
					sprintf((char*) disp.f_line, "SPEED:%d", temp_speed);
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	492f      	ldr	r1, [pc, #188]	@ (8000fd4 <MenuDecode+0x160>)
 8000f16:	4830      	ldr	r0, [pc, #192]	@ (8000fd8 <MenuDecode+0x164>)
 8000f18:	f003 f942 	bl	80041a0 <siprintf>
					lcd_display(&disp);
 8000f1c:	4831      	ldr	r0, [pc, #196]	@ (8000fe4 <MenuDecode+0x170>)
 8000f1e:	f7ff fde1 	bl	8000ae4 <lcd_display>
			while (read_keyboard() != '#') {
 8000f22:	f7ff fb95 	bl	8000650 <read_keyboard>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b23      	cmp	r3, #35	@ 0x23
 8000f2a:	d1d7      	bne.n	8000edc <MenuDecode+0x68>
				}
			}
			isMenuLock = false;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
			menuSelected = -1;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MenuDecode+0x158>)
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	601a      	str	r2, [r3, #0]
			motor_set_speed(&(robot.MotorLeft), temp_speed);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	482a      	ldr	r0, [pc, #168]	@ (8000fe8 <MenuDecode+0x174>)
 8000f3e:	f000 f936 	bl	80011ae <motor_set_speed>
			motor_set_speed(&(robot.MotorRight), temp_speed);
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4829      	ldr	r0, [pc, #164]	@ (8000fec <MenuDecode+0x178>)
 8000f46:	f000 f932 	bl	80011ae <motor_set_speed>
			Display();
 8000f4a:	f7ff fe39 	bl	8000bc0 <Display>
			break;
 8000f4e:	e039      	b.n	8000fc4 <MenuDecode+0x150>
		}
	}
	case 4: {
		if (!isMenuLock) {
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <MenuDecode+0xf2>
			isMenuLock = true;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
			break;
 8000f64:	e02e      	b.n	8000fc4 <MenuDecode+0x150>
		} else {
			DisplayParameters();
 8000f66:	f7ff ff41 	bl	8000dec <DisplayParameters>
			isMenuLock = false;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
			menuSelected = -1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MenuDecode+0x158>)
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	601a      	str	r2, [r3, #0]
			Display();
 8000f78:	f7ff fe22 	bl	8000bc0 <Display>
			break;
 8000f7c:	e022      	b.n	8000fc4 <MenuDecode+0x150>
		}
		}
		case 6:
		{
			if (!isMenuLock) {
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00d      	beq.n	8000fa8 <MenuDecode+0x134>
				isMenuLock = true;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MenuDecode+0x15c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
				break;
 8000f92:	e017      	b.n	8000fc4 <MenuDecode+0x150>
			} else {
				while (read_keyboard() != '#') {



					HAL_UART_Transmit(&huart1, txBuffer, sizeof(txBuffer),
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	2214      	movs	r2, #20
 8000f9a:	4915      	ldr	r1, [pc, #84]	@ (8000ff0 <MenuDecode+0x17c>)
 8000f9c:	4815      	ldr	r0, [pc, #84]	@ (8000ff4 <MenuDecode+0x180>)
 8000f9e:	f002 fd43 	bl	8003a28 <HAL_UART_Transmit>
							HAL_MAX_DELAY);



					HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	@ 0x64
 8000fa4:	f000 fc4a 	bl	800183c <HAL_Delay>
				while (read_keyboard() != '#') {
 8000fa8:	f7ff fb52 	bl	8000650 <read_keyboard>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b23      	cmp	r3, #35	@ 0x23
 8000fb0:	d1f0      	bne.n	8000f94 <MenuDecode+0x120>
				}
				isMenuLock = false;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <MenuDecode+0x15c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
				menuSelected = -1;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <MenuDecode+0x158>)
 8000fba:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbe:	601a      	str	r2, [r3, #0]
				break;
 8000fc0:	e000      	b.n	8000fc4 <MenuDecode+0x150>
			}
		}
		default:
		{

			break;
 8000fc2:	bf00      	nop
		}
	}
	}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	200000f4 	.word	0x200000f4
 8000fd4:	08004b94 	.word	0x08004b94
 8000fd8:	200000f9 	.word	0x200000f9
 8000fdc:	08004ba0 	.word	0x08004ba0
 8000fe0:	2000010c 	.word	0x2000010c
 8000fe4:	200000f8 	.word	0x200000f8
 8000fe8:	20000120 	.word	0x20000120
 8000fec:	20000130 	.word	0x20000130
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000018c 	.word	0x2000018c

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fbab 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f851 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f7ff faab 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100a:	f7ff fc6f 	bl	80008ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800100e:	f000 fa71 	bl	80014f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001012:	f000 f985 	bl	8001320 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fa43 	bl	80014a0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800101a:	f000 fa95 	bl	8001548 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

		init_motor(&(robot.MotorLeft), &htim3, TIM_CHANNEL_3, 0, 1);
 800101e:	2301      	movs	r3, #1
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2208      	movs	r2, #8
 8001026:	4919      	ldr	r1, [pc, #100]	@ (800108c <main+0x94>)
 8001028:	4819      	ldr	r0, [pc, #100]	@ (8001090 <main+0x98>)
 800102a:	f000 f8a1 	bl	8001170 <init_motor>
		init_motor(&(robot.MotorRight), &htim3, TIM_CHANNEL_4, 0, 1);
 800102e:	2301      	movs	r3, #1
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	220c      	movs	r2, #12
 8001036:	4915      	ldr	r1, [pc, #84]	@ (800108c <main+0x94>)
 8001038:	4816      	ldr	r0, [pc, #88]	@ (8001094 <main+0x9c>)
 800103a:	f000 f899 	bl	8001170 <init_motor>

		disp.addr = (0x27 << 1);
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <main+0xa0>)
 8001040:	224e      	movs	r2, #78	@ 0x4e
 8001042:	701a      	strb	r2, [r3, #0]
		disp.bl = true;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <main+0xa0>)
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		lcd_init(&disp);
 800104c:	4812      	ldr	r0, [pc, #72]	@ (8001098 <main+0xa0>)
 800104e:	f7ff fcc3 	bl	80009d8 <lcd_init>

		menu.index = 0;
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <main+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
		menu.indexResult = -1;
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <main+0xa4>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	605a      	str	r2, [r3, #4]
		menu.lcdDisplayStart = 0;
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <main+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
		menu.lcdIndexStart = 0;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <main+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
//								HAL_Delay(1000);




			if (isMenuLock == false) {
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <main+0xa8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <main+0x8c>

				menuSelected = Tick();
 800107a:	f7ff fea3 	bl	8000dc4 <Tick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <main+0xac>)
 8001082:	6013      	str	r3, [r2, #0]

			}
			MenuDecode();
 8001084:	f7ff fef6 	bl	8000e74 <MenuDecode>
			if (isMenuLock == false) {
 8001088:	e7f0      	b.n	800106c <main+0x74>
 800108a:	bf00      	nop
 800108c:	20000144 	.word	0x20000144
 8001090:	20000120 	.word	0x20000120
 8001094:	20000130 	.word	0x20000130
 8001098:	200000f8 	.word	0x200000f8
 800109c:	20000018 	.word	0x20000018
 80010a0:	200000f4 	.word	0x200000f4
 80010a4:	20000000 	.word	0x20000000

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	@ 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f892 	bl	80041e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <SystemClock_Config+0xb4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	4a21      	ldr	r2, [pc, #132]	@ (800115c <SystemClock_Config+0xb4>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	@ 0x40
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <SystemClock_Config+0xb4>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <SystemClock_Config+0xb8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <SystemClock_Config+0xb8>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <SystemClock_Config+0xb8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fb05 	bl	8002728 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001124:	f000 f81e 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fd68 	bl	8002c18 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800114e:	f000 f809 	bl	8001164 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	@ 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <init_motor>:
#include "tim.h"
#include "motor.h"


void init_motor(Motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		int speed, bool direction) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
	HAL_TIM_PWM_Start(motor->htim, motor->channel);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f001 ff75 	bl	8003078 <HAL_TIM_PWM_Start>
	motor->htim = htim;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	601a      	str	r2, [r3, #0]
	motor->channel = channel;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
	motor->dir = 1;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	731a      	strb	r2, [r3, #12]
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <motor_set_speed>:


void motor_set_speed(Motor *motor, int speed) {
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
	if (speed > 100) {
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b64      	cmp	r3, #100	@ 0x64
 80011bc:	dd02      	ble.n	80011c4 <motor_set_speed+0x16>
		speed = 100;
 80011be:	2364      	movs	r3, #100	@ 0x64
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	e004      	b.n	80011ce <motor_set_speed+0x20>
	} else if (speed < 0) {
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da01      	bge.n	80011ce <motor_set_speed+0x20>
		speed = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
	}
	motor->speed = speed;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <HAL_MspInit+0x4c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_MspInit+0x4c>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	f000 fab9 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f002 ff96 	bl	80041f0 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20020000 	.word	0x20020000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	20000140 	.word	0x20000140
 80012f8:	200003b0 	.word	0x200003b0

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 8001344:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <MX_TIM3_Init+0xc4>)
 8001346:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 8001356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800135a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001368:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 800136a:	f001 fe35 	bl	8002fd8 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001374:	f7ff fef6 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4619      	mov	r1, r3
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 8001388:	f002 fa82 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001392:	f7ff fee7 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	@ 0x60
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2208      	movs	r2, #8
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 80013ae:	f001 ff2b 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013b8:	f7ff fed4 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	220c      	movs	r2, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 80013c4:	f001 ff20 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013ce:	f7ff fec9 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM3_Init+0xc0>)
 80013d4:	f000 f82a 	bl	800142c <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000144 	.word	0x20000144
 80013e4:	40000400 	.word	0x40000400

080013e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_TIM_PWM_MspInit+0x3c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10d      	bne.n	8001416 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_TIM_PWM_MspInit+0x40>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <HAL_TIM_PWM_MspInit+0x40>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_TIM_PWM_MspInit+0x40>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40000400 	.word	0x40000400
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <HAL_TIM_MspPostInit+0x68>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11e      	bne.n	800148c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800147c:	2302      	movs	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_TIM_MspPostInit+0x70>)
 8001488:	f000 fae2 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40000400 	.word	0x40000400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800

080014a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <MX_USART1_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_USART1_UART_Init+0x4c>)
 80014d8:	f002 fa56 	bl	8003988 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014e2:	f7ff fe3f 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000018c 	.word	0x2000018c
 80014f0:	40011000 	.word	0x40011000

080014f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f002 fa2c 	bl	8003988 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f7ff fe15 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001d4 	.word	0x200001d4
 8001544:	40004400 	.word	0x40004400

08001548 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <MX_USART6_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_USART6_UART_Init+0x4c>)
 8001580:	f002 fa02 	bl	8003988 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f7ff fdeb 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000021c 	.word	0x2000021c
 8001598:	40011400 	.word	0x40011400

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	@ 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	@ (80016e8 <HAL_UART_MspInit+0x14c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12c      	bne.n	8001618 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a49      	ldr	r2, [pc, #292]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	4b43      	ldr	r3, [pc, #268]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a42      	ldr	r2, [pc, #264]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23c0      	movs	r3, #192	@ 0xc0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001606:	2307      	movs	r3, #7
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4837      	ldr	r0, [pc, #220]	@ (80016f0 <HAL_UART_MspInit+0x154>)
 8001612:	f000 fa1d 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001616:	e062      	b.n	80016de <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a35      	ldr	r2, [pc, #212]	@ (80016f4 <HAL_UART_MspInit+0x158>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12c      	bne.n	800167c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a30      	ldr	r2, [pc, #192]	@ (80016ec <HAL_UART_MspInit+0x150>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165a:	230c      	movs	r3, #12
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4820      	ldr	r0, [pc, #128]	@ (80016f8 <HAL_UART_MspInit+0x15c>)
 8001676:	f000 f9eb 	bl	8001a50 <HAL_GPIO_Init>
}
 800167a:	e030      	b.n	80016de <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART6)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <HAL_UART_MspInit+0x160>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12b      	bne.n	80016de <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <HAL_UART_MspInit+0x150>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a17      	ldr	r2, [pc, #92]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_UART_MspInit+0x150>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_UART_MspInit+0x150>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	@ 0xc0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016ce:	2308      	movs	r3, #8
 80016d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <HAL_UART_MspInit+0x164>)
 80016da:	f000 f9b9 	bl	8001a50 <HAL_GPIO_Init>
}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	@ 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40020800 	.word	0x40020800

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800173c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001708:	f7ff fdf8 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	@ (8001750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f002 fd63 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff fc5f 	bl	8000ff8 <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800173c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001748:	08004c70 	.word	0x08004c70
  ldr r2, =_sbss
 800174c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001750:	200003b0 	.word	0x200003b0

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f931 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fd28 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f93b 	bl	8001a36 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f000 f911 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000028 	.word	0x20000028
 80017f4:	20000030 	.word	0x20000030
 80017f8:	2000002c 	.word	0x2000002c

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000030 	.word	0x20000030
 8001820:	20000264 	.word	0x20000264

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000264 	.word	0x20000264

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000030 	.word	0x20000030

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e16b      	b.n	8001d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 815a 	bne.w	8001d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80b4 	beq.w	8001d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b60      	ldr	r3, [pc, #384]	@ (8001d5c <HAL_GPIO_Init+0x30c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a5f      	ldr	r2, [pc, #380]	@ (8001d5c <HAL_GPIO_Init+0x30c>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d5c <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d60 <HAL_GPIO_Init+0x310>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a52      	ldr	r2, [pc, #328]	@ (8001d64 <HAL_GPIO_Init+0x314>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a51      	ldr	r2, [pc, #324]	@ (8001d68 <HAL_GPIO_Init+0x318>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x222>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_GPIO_Init+0x31c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x21e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4f      	ldr	r2, [pc, #316]	@ (8001d70 <HAL_GPIO_Init+0x320>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4e      	ldr	r2, [pc, #312]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x216>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4d      	ldr	r2, [pc, #308]	@ (8001d78 <HAL_GPIO_Init+0x328>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x212>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	@ (8001d7c <HAL_GPIO_Init+0x32c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	@ (8001d80 <HAL_GPIO_Init+0x330>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x20a>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e00e      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e00c      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00a      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c62:	2305      	movs	r3, #5
 8001c64:	e008      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x228>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c88:	4935      	ldr	r1, [pc, #212]	@ (8001d60 <HAL_GPIO_Init+0x310>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a32      	ldr	r2, [pc, #200]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a27      	ldr	r2, [pc, #156]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cea:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d38:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f ae90 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40021400 	.word	0x40021400
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40021c00 	.word	0x40021c00
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e12b      	b.n	8002056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fd98 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	@ 0x24
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e50:	f001 f89a 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a81      	ldr	r2, [pc, #516]	@ (8002060 <HAL_I2C_Init+0x274>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d807      	bhi.n	8001e70 <HAL_I2C_Init+0x84>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a80      	ldr	r2, [pc, #512]	@ (8002064 <HAL_I2C_Init+0x278>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e006      	b.n	8001e7e <HAL_I2C_Init+0x92>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a7d      	ldr	r2, [pc, #500]	@ (8002068 <HAL_I2C_Init+0x27c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf94      	ite	ls
 8001e78:	2301      	movls	r3, #1
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0e7      	b.n	8002056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a78      	ldr	r2, [pc, #480]	@ (800206c <HAL_I2C_Init+0x280>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9b      	lsrs	r3, r3, #18
 8001e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002060 <HAL_I2C_Init+0x274>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_I2C_Init+0xd4>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	e009      	b.n	8001ed4 <HAL_I2C_Init+0xe8>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	4a69      	ldr	r2, [pc, #420]	@ (8002070 <HAL_I2C_Init+0x284>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ee6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	495c      	ldr	r1, [pc, #368]	@ (8002060 <HAL_I2C_Init+0x274>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d819      	bhi.n	8001f28 <HAL_I2C_Init+0x13c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e59      	subs	r1, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f02:	1c59      	adds	r1, r3, #1
 8001f04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f08:	400b      	ands	r3, r1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_I2C_Init+0x138>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e59      	subs	r1, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	e051      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e04f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_I2C_Init+0x168>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e012      	b.n	8001f7a <HAL_I2C_Init+0x18e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Init+0x196>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e022      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <HAL_I2C_Init+0x1bc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e58      	subs	r0, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	440b      	add	r3, r1
 8001f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fa6:	e00f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6809      	ldr	r1, [r1, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ff6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6911      	ldr	r1, [r2, #16]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68d2      	ldr	r2, [r2, #12]
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	430b      	orrs	r3, r1
 800200a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	000186a0 	.word	0x000186a0
 8002064:	001e847f 	.word	0x001e847f
 8002068:	003d08ff 	.word	0x003d08ff
 800206c:	431bde83 	.word	0x431bde83
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	461a      	mov	r2, r3
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	4613      	mov	r3, r2
 8002086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff fbcc 	bl	8001824 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 80e0 	bne.w	800225c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4970      	ldr	r1, [pc, #448]	@ (8002268 <HAL_I2C_Master_Transmit+0x1f4>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f964 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0d3      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_Master_Transmit+0x50>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0cc      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d007      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	@ 0x21
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2210      	movs	r2, #16
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a50      	ldr	r2, [pc, #320]	@ (800226c <HAL_I2C_Master_Transmit+0x1f8>)
 800212a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f89c 	bl	8002270 <I2C_MasterRequestWrite>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08d      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002158:	e066      	b.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa22 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b04      	cmp	r3, #4
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d11b      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x188>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	6a39      	ldr	r1, [r7, #32]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fa19 	bl	8002638 <I2C_WaitOnBTFFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	2b04      	cmp	r3, #4
 8002212:	d107      	bne.n	8002224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e01a      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d194      	bne.n	800215a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000

08002270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d006      	beq.n	800229a <I2C_MasterRequestWrite+0x2a>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d003      	beq.n	800229a <I2C_MasterRequestWrite+0x2a>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002298:	d108      	bne.n	80022ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e00b      	b.n	80022c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d107      	bne.n	80022c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f84f 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ea:	d103      	bne.n	80022f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e035      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002300:	d108      	bne.n	8002314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	e01b      	b.n	800234c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002314:	897b      	ldrh	r3, [r7, #10]
 8002316:	11db      	asrs	r3, r3, #7
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0306 	and.w	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f063 030f 	orn	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	490e      	ldr	r1, [pc, #56]	@ (800236c <I2C_MasterRequestWrite+0xfc>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f898 	bl	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e010      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4907      	ldr	r1, [pc, #28]	@ (8002370 <I2C_MasterRequestWrite+0x100>)
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f888 	bl	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	00010008 	.word	0x00010008
 8002370:	00010002 	.word	0x00010002

08002374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002384:	e048      	b.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d044      	beq.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff fa49 	bl	8001824 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d139      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	e00c      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4013      	ands	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d116      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e023      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10d      	bne.n	800243e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	43da      	mvns	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	e00c      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	429a      	cmp	r2, r3
 800245c:	d093      	beq.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002476:	e071      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002486:	d123      	bne.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f043 0204 	orr.w	r2, r3, #4
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e067      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d041      	beq.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d8:	f7ff f9a4 	bl	8001824 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d302      	bcc.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d136      	bne.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10c      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e00b      	b.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e021      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10c      	bne.n	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e00b      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f af6d 	bne.w	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b4:	e034      	b.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f886 	bl	80026c8 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f929 	bl	8001824 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11d      	bne.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b80      	cmp	r3, #128	@ 0x80
 80025f0:	d016      	beq.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b80      	cmp	r3, #128	@ 0x80
 800262c:	d1c3      	bne.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002644:	e034      	b.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f83e 	bl	80026c8 <I2C_IsAcknowledgeFailed>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e034      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d028      	beq.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7ff f8e1 	bl	8001824 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11d      	bne.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d016      	beq.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d1c3      	bne.n	8002646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d11b      	bne.n	8002718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e267      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	4b88      	ldr	r3, [pc, #544]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b85      	ldr	r3, [pc, #532]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275a:	2b08      	cmp	r3, #8
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b82      	ldr	r3, [pc, #520]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b7e      	ldr	r3, [pc, #504]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e242      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b70      	ldr	r3, [pc, #448]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b69      	ldr	r3, [pc, #420]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b66      	ldr	r3, [pc, #408]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a65      	ldr	r2, [pc, #404]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f820 	bl	8001824 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f81c 	bl	8001824 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e207      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f80c 	bl	8001824 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f808 	bl	8001824 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1f3      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	4b4a      	ldr	r3, [pc, #296]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b44      	ldr	r3, [pc, #272]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c7      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4937      	ldr	r1, [pc, #220]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b34      	ldr	r3, [pc, #208]	@ (800296c <HAL_RCC_OscConfig+0x244>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe ffc1 	bl	8001824 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe ffbd 	bl	8001824 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a8      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b28      	ldr	r3, [pc, #160]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4925      	ldr	r1, [pc, #148]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x244>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe ffa0 	bl	8001824 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe ff9c 	bl	8001824 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e187      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d036      	beq.n	8002980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCC_OscConfig+0x248>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe ff80 	bl	8001824 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe ff7c 	bl	8001824 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e167      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
 8002946:	e01b      	b.n	8002980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_OscConfig+0x248>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe ff69 	bl	8001824 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e00e      	b.n	8002974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe ff65 	bl	8001824 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d907      	bls.n	8002974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e150      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002968:	40023800 	.word	0x40023800
 800296c:	42470000 	.word	0x42470000
 8002970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b88      	ldr	r3, [pc, #544]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ea      	bne.n	8002956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8097 	beq.w	8002abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b81      	ldr	r3, [pc, #516]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b77      	ldr	r3, [pc, #476]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4b74      	ldr	r3, [pc, #464]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a73      	ldr	r2, [pc, #460]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe ff25 	bl	8001824 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe ff21 	bl	8001824 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e10c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
 8002a04:	4b64      	ldr	r3, [pc, #400]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	4a63      	ldr	r2, [pc, #396]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a10:	e01c      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x30c>
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a26:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a34:	4b58      	ldr	r3, [pc, #352]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a54      	ldr	r2, [pc, #336]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fee6 	bl	8001824 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fee2 	bl	8001824 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0cb      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ee      	beq.n	8002a5c <HAL_RCC_OscConfig+0x334>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fed0 	bl	8001824 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe fecc 	bl	8001824 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0b5      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	4a38      	ldr	r2, [pc, #224]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a1 	beq.w	8002c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d05c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d141      	bne.n	8002b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fea0 	bl	8001824 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fe9c 	bl	8001824 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e087      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	491b      	ldr	r1, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fe75 	bl	8001824 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fe71 	bl	8001824 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e05c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x416>
 8002b5c:	e054      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fe5e 	bl	8001824 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fe5a 	bl	8001824 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e045      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x444>
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e038      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d028      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d121      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b68      	ldr	r3, [pc, #416]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90c      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d044      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e067      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4934      	ldr	r1, [pc, #208]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fd8c 	bl	8001824 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fd88 	bl	8001824 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fcec 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08004c14 	.word	0x08004c14
 8002ddc:	20000028 	.word	0x20000028
 8002de0:	2000002c 	.word	0x2000002c

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b090      	sub	sp, #64	@ 0x40
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df0:	2300      	movs	r3, #0
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df4:	2300      	movs	r3, #0
 8002df6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfc:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 80a1 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e16:	e09b      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002e1c:	e09b      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e22:	e098      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e50:	fb03 f201 	mul.w	r2, r3, r1
 8002e54:	2300      	movs	r3, #0
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a43      	ldr	r2, [pc, #268]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e64:	460a      	mov	r2, r1
 8002e66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6a:	4413      	add	r3, r2
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e70:	2200      	movs	r2, #0
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	61fa      	str	r2, [r7, #28]
 8002e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e7e:	f7fd f9f7 	bl	8000270 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8a:	e053      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	617a      	str	r2, [r7, #20]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e9e:	f04f 0b00 	mov.w	fp, #0
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	465b      	mov	r3, fp
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	ebb2 080a 	subs.w	r8, r2, sl
 8002ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eda:	eb63 0509 	sbc.w	r5, r3, r9
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	00eb      	lsls	r3, r5, #3
 8002ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eec:	00e2      	lsls	r2, r4, #3
 8002eee:	4614      	mov	r4, r2
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	eb14 030a 	adds.w	r3, r4, sl
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	eb45 030b 	adc.w	r3, r5, fp
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	028b      	lsls	r3, r1, #10
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f14:	4621      	mov	r1, r4
 8002f16:	028a      	lsls	r2, r1, #10
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	60fa      	str	r2, [r7, #12]
 8002f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f28:	f7fd f9a2 	bl	8000270 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002f44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3740      	adds	r7, #64	@ 0x40
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	017d7840 	.word	0x017d7840

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000028 	.word	0x20000028

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08004c24 	.word	0x08004c24

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08004c24 	.word	0x08004c24

08002fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e041      	b.n	800306e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f9f2 	bl	80013e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 f9b8 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_TIM_PWM_Start+0x24>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e022      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d109      	bne.n	80030b6 <HAL_TIM_PWM_Start+0x3e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e015      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start+0x58>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e008      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07c      	b.n	80031e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0x82>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f8:	e013      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0x92>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003108:	e00b      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xa2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003118:	e003      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fb8a 	bl	8003844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2d      	ldr	r2, [pc, #180]	@ (80031ec <HAL_TIM_PWM_Start+0x174>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_PWM_Start+0xcc>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <HAL_TIM_PWM_Start+0x178>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_TIM_PWM_Start+0xd0>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_TIM_PWM_Start+0xd2>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	@ (80031ec <HAL_TIM_PWM_Start+0x174>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d01d      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <HAL_TIM_PWM_Start+0x17c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <HAL_TIM_PWM_Start+0x180>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <HAL_TIM_PWM_Start+0x184>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a16      	ldr	r2, [pc, #88]	@ (80031f0 <HAL_TIM_PWM_Start+0x178>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <HAL_TIM_PWM_Start+0x188>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_TIM_PWM_Start+0x136>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a16      	ldr	r2, [pc, #88]	@ (8003204 <HAL_TIM_PWM_Start+0x18c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d111      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d010      	beq.n	80031e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	e007      	b.n	80031e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40014000 	.word	0x40014000
 8003204:	40001800 	.word	0x40001800

08003208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003222:	2302      	movs	r3, #2
 8003224:	e0ae      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	f200 809f 	bhi.w	8003374 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003271 	.word	0x08003271
 8003240:	08003375 	.word	0x08003375
 8003244:	08003375 	.word	0x08003375
 8003248:	08003375 	.word	0x08003375
 800324c:	080032b1 	.word	0x080032b1
 8003250:	08003375 	.word	0x08003375
 8003254:	08003375 	.word	0x08003375
 8003258:	08003375 	.word	0x08003375
 800325c:	080032f3 	.word	0x080032f3
 8003260:	08003375 	.word	0x08003375
 8003264:	08003375 	.word	0x08003375
 8003268:	08003375 	.word	0x08003375
 800326c:	08003333 	.word	0x08003333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f934 	bl	80034e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6999      	ldr	r1, [r3, #24]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	619a      	str	r2, [r3, #24]
      break;
 80032ae:	e064      	b.n	800337a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f984 	bl	80035c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
      break;
 80032f0:	e043      	b.n	800337a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f9d9 	bl	80036b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0208 	orr.w	r2, r2, #8
 800330c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0204 	bic.w	r2, r2, #4
 800331c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
      break;
 8003330:	e023      	b.n	800337a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa2d 	bl	8003798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800334c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
      break;
 8003372:	e002      	b.n	800337a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
      break;
 8003378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a46      	ldr	r2, [pc, #280]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a43      	ldr	r2, [pc, #268]	@ (80034bc <TIM_Base_SetConfig+0x130>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <TIM_Base_SetConfig+0x134>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <TIM_Base_SetConfig+0x138>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a35      	ldr	r2, [pc, #212]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d027      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a32      	ldr	r2, [pc, #200]	@ (80034bc <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d023      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01f      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a30      	ldr	r2, [pc, #192]	@ (80034c4 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d017      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2e      	ldr	r2, [pc, #184]	@ (80034cc <TIM_Base_SetConfig+0x140>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <TIM_Base_SetConfig+0x144>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00f      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <TIM_Base_SetConfig+0x148>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	@ (80034d8 <TIM_Base_SetConfig+0x14c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	@ (80034dc <TIM_Base_SetConfig+0x150>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	@ (80034e0 <TIM_Base_SetConfig+0x154>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
  }
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40010400 	.word	0x40010400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800
 80034d8:	40001800 	.word	0x40001800
 80034dc:	40001c00 	.word	0x40001c00
 80034e0:	40002000 	.word	0x40002000

080034e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 0201 	bic.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a20      	ldr	r2, [pc, #128]	@ (80035bc <TIM_OC1_SetConfig+0xd8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC1_SetConfig+0x64>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <TIM_OC1_SetConfig+0xdc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10c      	bne.n	8003562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0308 	bic.w	r3, r3, #8
 800354e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a15      	ldr	r2, [pc, #84]	@ (80035bc <TIM_OC1_SetConfig+0xd8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_OC1_SetConfig+0x8e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC1_SetConfig+0xdc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d111      	bne.n	8003596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40010400 	.word	0x40010400

080035c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0320 	bic.w	r3, r3, #32
 800360e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a22      	ldr	r2, [pc, #136]	@ (80036a8 <TIM_OC2_SetConfig+0xe4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC2_SetConfig+0x68>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <TIM_OC2_SetConfig+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10d      	bne.n	8003648 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <TIM_OC2_SetConfig+0xe4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC2_SetConfig+0x94>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <TIM_OC2_SetConfig+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d113      	bne.n	8003680 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800365e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40010400 	.word	0x40010400

080036b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a21      	ldr	r2, [pc, #132]	@ (8003790 <TIM_OC3_SetConfig+0xe0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC3_SetConfig+0x66>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a20      	ldr	r2, [pc, #128]	@ (8003794 <TIM_OC3_SetConfig+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10d      	bne.n	8003732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a16      	ldr	r2, [pc, #88]	@ (8003790 <TIM_OC3_SetConfig+0xe0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC3_SetConfig+0x92>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <TIM_OC3_SetConfig+0xe4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d113      	bne.n	800376a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	621a      	str	r2, [r3, #32]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400

08003798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	@ (800383c <TIM_OC4_SetConfig+0xa4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC4_SetConfig+0x68>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <TIM_OC4_SetConfig+0xa8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d109      	bne.n	8003814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40010400 	.word	0x40010400

08003844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2201      	movs	r2, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e05a      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a21      	ldr	r2, [pc, #132]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f4:	d01d      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40001800 	.word	0x40001800

08003988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e042      	b.n	8003a20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fdf4 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	@ 0x24
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f973 	bl	8003cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d175      	bne.n	8003b34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_UART_Transmit+0x2c>
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e06e      	b.n	8003b36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2221      	movs	r2, #33	@ 0x21
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a66:	f7fd fedd 	bl	8001824 <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a80:	d108      	bne.n	8003a94 <HAL_UART_Transmit+0x6c>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e003      	b.n	8003a9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a9c:	e02e      	b.n	8003afc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2180      	movs	r1, #128	@ 0x80
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f848 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03a      	b.n	8003b36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e007      	b.n	8003aee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1cb      	bne.n	8003a9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2140      	movs	r1, #64	@ 0x40
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f814 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e006      	b.n	8003b36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	e03b      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d037      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fd fe64 	bl	8001824 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e03a      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d020      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d01d      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d116      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f81d 	bl	8003bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e00f      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d0b4      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b095      	sub	sp, #84	@ 0x54
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c18:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d119      	bne.n	8003c9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0310 	bic.w	r3, r3, #16
 8003c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c88:	61ba      	str	r2, [r7, #24]
 8003c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	613b      	str	r3, [r7, #16]
   return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003caa:	bf00      	nop
 8003cac:	3754      	adds	r7, #84	@ 0x54
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cbc:	b0c0      	sub	sp, #256	@ 0x100
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	ea40 0301 	orr.w	r3, r0, r1
 8003ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d10:	f021 010c 	bic.w	r1, r1, #12
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	6999      	ldr	r1, [r3, #24]
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	ea40 0301 	orr.w	r3, r0, r1
 8003d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <UART_SetConfig+0x2cc>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d005      	beq.n	8003d58 <UART_SetConfig+0xa0>
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b8d      	ldr	r3, [pc, #564]	@ (8003f88 <UART_SetConfig+0x2d0>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d104      	bne.n	8003d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7ff f92a 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d60:	e003      	b.n	8003d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d62:	f7ff f911 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8003d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d74:	f040 810c 	bne.w	8003f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d92:	415b      	adcs	r3, r3
 8003d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	eb12 0801 	adds.w	r8, r2, r1
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb43 0901 	adc.w	r9, r3, r1
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dba:	4690      	mov	r8, r2
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	eb18 0303 	adds.w	r3, r8, r3
 8003dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	462b      	mov	r3, r5
 8003dca:	eb49 0303 	adc.w	r3, r9, r3
 8003dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003de6:	460b      	mov	r3, r1
 8003de8:	18db      	adds	r3, r3, r3
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dec:	4613      	mov	r3, r2
 8003dee:	eb42 0303 	adc.w	r3, r2, r3
 8003df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dfc:	f7fc fa38 	bl	8000270 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4b61      	ldr	r3, [pc, #388]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011c      	lsls	r4, r3, #4
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e30:	4641      	mov	r1, r8
 8003e32:	eb12 0a01 	adds.w	sl, r2, r1
 8003e36:	4649      	mov	r1, r9
 8003e38:	eb43 0b01 	adc.w	fp, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e50:	4692      	mov	sl, r2
 8003e52:	469b      	mov	fp, r3
 8003e54:	4643      	mov	r3, r8
 8003e56:	eb1a 0303 	adds.w	r3, sl, r3
 8003e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	eb4b 0303 	adc.w	r3, fp, r3
 8003e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	18db      	adds	r3, r3, r3
 8003e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e82:	4613      	mov	r3, r2
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e92:	f7fc f9ed 	bl	8000270 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2264      	movs	r2, #100	@ 0x64
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	1acb      	subs	r3, r1, r3
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eb2:	4b36      	ldr	r3, [pc, #216]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ec0:	441c      	add	r4, r3
 8003ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	1891      	adds	r1, r2, r2
 8003eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003edc:	415b      	adcs	r3, r3
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	1851      	adds	r1, r2, r1
 8003ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eea:	4649      	mov	r1, r9
 8003eec:	414b      	adcs	r3, r1
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003efc:	4659      	mov	r1, fp
 8003efe:	00cb      	lsls	r3, r1, #3
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f06:	4651      	mov	r1, sl
 8003f08:	00ca      	lsls	r2, r1, #3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4642      	mov	r2, r8
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f18:	464b      	mov	r3, r9
 8003f1a:	460a      	mov	r2, r1
 8003f1c:	eb42 0303 	adc.w	r3, r2, r3
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f38:	460b      	mov	r3, r1
 8003f3a:	18db      	adds	r3, r3, r3
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3e:	4613      	mov	r3, r2
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f4e:	f7fc f98f 	bl	8000270 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	@ 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	3332      	adds	r3, #50	@ 0x32
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 0207 	and.w	r2, r3, #7
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4422      	add	r2, r4
 8003f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f80:	e106      	b.n	8004190 <UART_SetConfig+0x4d8>
 8003f82:	bf00      	nop
 8003f84:	40011000 	.word	0x40011000
 8003f88:	40011400 	.word	0x40011400
 8003f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	6239      	str	r1, [r7, #32]
 8003faa:	415b      	adcs	r3, r3
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	1854      	adds	r4, r2, r1
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	eb43 0501 	adc.w	r5, r3, r1
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fd8:	464b      	mov	r3, r9
 8003fda:	eb45 0303 	adc.w	r3, r5, r3
 8003fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ffe:	4629      	mov	r1, r5
 8004000:	008b      	lsls	r3, r1, #2
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004008:	4621      	mov	r1, r4
 800400a:	008a      	lsls	r2, r1, #2
 800400c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004010:	f7fc f92e 	bl	8000270 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4b60      	ldr	r3, [pc, #384]	@ (800419c <UART_SetConfig+0x4e4>)
 800401a:	fba3 2302 	umull	r2, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	011c      	lsls	r4, r3, #4
 8004022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800402c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	1891      	adds	r1, r2, r2
 800403a:	61b9      	str	r1, [r7, #24]
 800403c:	415b      	adcs	r3, r3
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004044:	4641      	mov	r1, r8
 8004046:	1851      	adds	r1, r2, r1
 8004048:	6139      	str	r1, [r7, #16]
 800404a:	4649      	mov	r1, r9
 800404c:	414b      	adcs	r3, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800405c:	4659      	mov	r1, fp
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004066:	4651      	mov	r1, sl
 8004068:	00ca      	lsls	r2, r1, #3
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	4603      	mov	r3, r0
 8004070:	4642      	mov	r2, r8
 8004072:	189b      	adds	r3, r3, r2
 8004074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004078:	464b      	mov	r3, r9
 800407a:	460a      	mov	r2, r1
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800408e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800409c:	4649      	mov	r1, r9
 800409e:	008b      	lsls	r3, r1, #2
 80040a0:	4641      	mov	r1, r8
 80040a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a6:	4641      	mov	r1, r8
 80040a8:	008a      	lsls	r2, r1, #2
 80040aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040ae:	f7fc f8df 	bl	8000270 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	4b38      	ldr	r3, [pc, #224]	@ (800419c <UART_SetConfig+0x4e4>)
 80040ba:	fba3 2301 	umull	r2, r3, r3, r1
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2264      	movs	r2, #100	@ 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	1acb      	subs	r3, r1, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	@ 0x32
 80040cc:	4a33      	ldr	r2, [pc, #204]	@ (800419c <UART_SetConfig+0x4e4>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d8:	441c      	add	r4, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80040e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f8:	4641      	mov	r1, r8
 80040fa:	1851      	adds	r1, r2, r1
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	4649      	mov	r1, r9
 8004100:	414b      	adcs	r3, r1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004110:	4659      	mov	r1, fp
 8004112:	00cb      	lsls	r3, r1, #3
 8004114:	4651      	mov	r1, sl
 8004116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411a:	4651      	mov	r1, sl
 800411c:	00ca      	lsls	r2, r1, #3
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	4603      	mov	r3, r0
 8004124:	4642      	mov	r2, r8
 8004126:	189b      	adds	r3, r3, r2
 8004128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800412a:	464b      	mov	r3, r9
 800412c:	460a      	mov	r2, r1
 800412e:	eb42 0303 	adc.w	r3, r2, r3
 8004132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	663b      	str	r3, [r7, #96]	@ 0x60
 800413e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800414c:	4649      	mov	r1, r9
 800414e:	008b      	lsls	r3, r1, #2
 8004150:	4641      	mov	r1, r8
 8004152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004156:	4641      	mov	r1, r8
 8004158:	008a      	lsls	r2, r1, #2
 800415a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800415e:	f7fc f887 	bl	8000270 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <UART_SetConfig+0x4e4>)
 8004168:	fba3 1302 	umull	r1, r3, r3, r2
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	2164      	movs	r1, #100	@ 0x64
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	3332      	adds	r3, #50	@ 0x32
 800417a:	4a08      	ldr	r2, [pc, #32]	@ (800419c <UART_SetConfig+0x4e4>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4422      	add	r2, r4
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004196:	46bd      	mov	sp, r7
 8004198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419c:	51eb851f 	.word	0x51eb851f

080041a0 <siprintf>:
 80041a0:	b40e      	push	{r1, r2, r3}
 80041a2:	b500      	push	{lr}
 80041a4:	b09c      	sub	sp, #112	@ 0x70
 80041a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041a8:	9002      	str	r0, [sp, #8]
 80041aa:	9006      	str	r0, [sp, #24]
 80041ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041b0:	4809      	ldr	r0, [pc, #36]	@ (80041d8 <siprintf+0x38>)
 80041b2:	9107      	str	r1, [sp, #28]
 80041b4:	9104      	str	r1, [sp, #16]
 80041b6:	4909      	ldr	r1, [pc, #36]	@ (80041dc <siprintf+0x3c>)
 80041b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041bc:	9105      	str	r1, [sp, #20]
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	a902      	add	r1, sp, #8
 80041c4:	f000 f994 	bl	80044f0 <_svfiprintf_r>
 80041c8:	9b02      	ldr	r3, [sp, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	b01c      	add	sp, #112	@ 0x70
 80041d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d4:	b003      	add	sp, #12
 80041d6:	4770      	bx	lr
 80041d8:	20000034 	.word	0x20000034
 80041dc:	ffff0208 	.word	0xffff0208

080041e0 <memset>:
 80041e0:	4402      	add	r2, r0
 80041e2:	4603      	mov	r3, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <__errno>:
 80041f0:	4b01      	ldr	r3, [pc, #4]	@ (80041f8 <__errno+0x8>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000034 	.word	0x20000034

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	@ (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	@ (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	@ (8004240 <__libc_init_array+0x44>)
 8004210:	f000 fc66 	bl	8004ae0 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08004c68 	.word	0x08004c68
 8004238:	08004c68 	.word	0x08004c68
 800423c:	08004c68 	.word	0x08004c68
 8004240:	08004c6c 	.word	0x08004c6c

08004244 <__retarget_lock_acquire_recursive>:
 8004244:	4770      	bx	lr

08004246 <__retarget_lock_release_recursive>:
 8004246:	4770      	bx	lr

08004248 <_free_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4605      	mov	r5, r0
 800424c:	2900      	cmp	r1, #0
 800424e:	d041      	beq.n	80042d4 <_free_r+0x8c>
 8004250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004254:	1f0c      	subs	r4, r1, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	18e4      	addlt	r4, r4, r3
 800425c:	f000 f8e0 	bl	8004420 <__malloc_lock>
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <_free_r+0x90>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	b933      	cbnz	r3, 8004274 <_free_r+0x2c>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	4628      	mov	r0, r5
 800426c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004270:	f000 b8dc 	b.w	800442c <__malloc_unlock>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x42>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	e7ed      	b.n	8004266 <_free_r+0x1e>
 800428a:	461a      	mov	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b10b      	cbz	r3, 8004294 <_free_r+0x4c>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x42>
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	1850      	adds	r0, r2, r1
 8004298:	42a0      	cmp	r0, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x6c>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	4401      	add	r1, r0
 80042a0:	1850      	adds	r0, r2, r1
 80042a2:	4283      	cmp	r3, r0
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	d1e0      	bne.n	800426a <_free_r+0x22>
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6053      	str	r3, [r2, #4]
 80042ae:	4408      	add	r0, r1
 80042b0:	6010      	str	r0, [r2, #0]
 80042b2:	e7da      	b.n	800426a <_free_r+0x22>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x74>
 80042b6:	230c      	movs	r3, #12
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	e7d6      	b.n	800426a <_free_r+0x22>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	6054      	str	r4, [r2, #4]
 80042d2:	e7ca      	b.n	800426a <_free_r+0x22>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	200003ac 	.word	0x200003ac

080042dc <sbrk_aligned>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0f      	ldr	r6, [pc, #60]	@ (800431c <sbrk_aligned+0x40>)
 80042e0:	460c      	mov	r4, r1
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	4605      	mov	r5, r0
 80042e6:	b911      	cbnz	r1, 80042ee <sbrk_aligned+0x12>
 80042e8:	f000 fba6 	bl	8004a38 <_sbrk_r>
 80042ec:	6030      	str	r0, [r6, #0]
 80042ee:	4621      	mov	r1, r4
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 fba1 	bl	8004a38 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d103      	bne.n	8004302 <sbrk_aligned+0x26>
 80042fa:	f04f 34ff 	mov.w	r4, #4294967295
 80042fe:	4620      	mov	r0, r4
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	1cc4      	adds	r4, r0, #3
 8004304:	f024 0403 	bic.w	r4, r4, #3
 8004308:	42a0      	cmp	r0, r4
 800430a:	d0f8      	beq.n	80042fe <sbrk_aligned+0x22>
 800430c:	1a21      	subs	r1, r4, r0
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fb92 	bl	8004a38 <_sbrk_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d1f2      	bne.n	80042fe <sbrk_aligned+0x22>
 8004318:	e7ef      	b.n	80042fa <sbrk_aligned+0x1e>
 800431a:	bf00      	nop
 800431c:	200003a8 	.word	0x200003a8

08004320 <_malloc_r>:
 8004320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004324:	1ccd      	adds	r5, r1, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	3508      	adds	r5, #8
 800432c:	2d0c      	cmp	r5, #12
 800432e:	bf38      	it	cc
 8004330:	250c      	movcc	r5, #12
 8004332:	2d00      	cmp	r5, #0
 8004334:	4606      	mov	r6, r0
 8004336:	db01      	blt.n	800433c <_malloc_r+0x1c>
 8004338:	42a9      	cmp	r1, r5
 800433a:	d904      	bls.n	8004346 <_malloc_r+0x26>
 800433c:	230c      	movs	r3, #12
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	2000      	movs	r0, #0
 8004342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800441c <_malloc_r+0xfc>
 800434a:	f000 f869 	bl	8004420 <__malloc_lock>
 800434e:	f8d8 3000 	ldr.w	r3, [r8]
 8004352:	461c      	mov	r4, r3
 8004354:	bb44      	cbnz	r4, 80043a8 <_malloc_r+0x88>
 8004356:	4629      	mov	r1, r5
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff ffbf 	bl	80042dc <sbrk_aligned>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	4604      	mov	r4, r0
 8004362:	d158      	bne.n	8004416 <_malloc_r+0xf6>
 8004364:	f8d8 4000 	ldr.w	r4, [r8]
 8004368:	4627      	mov	r7, r4
 800436a:	2f00      	cmp	r7, #0
 800436c:	d143      	bne.n	80043f6 <_malloc_r+0xd6>
 800436e:	2c00      	cmp	r4, #0
 8004370:	d04b      	beq.n	800440a <_malloc_r+0xea>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	4639      	mov	r1, r7
 8004376:	4630      	mov	r0, r6
 8004378:	eb04 0903 	add.w	r9, r4, r3
 800437c:	f000 fb5c 	bl	8004a38 <_sbrk_r>
 8004380:	4581      	cmp	r9, r0
 8004382:	d142      	bne.n	800440a <_malloc_r+0xea>
 8004384:	6821      	ldr	r1, [r4, #0]
 8004386:	1a6d      	subs	r5, r5, r1
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff ffa6 	bl	80042dc <sbrk_aligned>
 8004390:	3001      	adds	r0, #1
 8004392:	d03a      	beq.n	800440a <_malloc_r+0xea>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	442b      	add	r3, r5
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	f8d8 3000 	ldr.w	r3, [r8]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	bb62      	cbnz	r2, 80043fc <_malloc_r+0xdc>
 80043a2:	f8c8 7000 	str.w	r7, [r8]
 80043a6:	e00f      	b.n	80043c8 <_malloc_r+0xa8>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	d420      	bmi.n	80043f0 <_malloc_r+0xd0>
 80043ae:	2a0b      	cmp	r2, #11
 80043b0:	d917      	bls.n	80043e2 <_malloc_r+0xc2>
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	6059      	strne	r1, [r3, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	bf08      	it	eq
 80043c0:	f8c8 1000 	streq.w	r1, [r8]
 80043c4:	5162      	str	r2, [r4, r5]
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f82f 	bl	800442c <__malloc_unlock>
 80043ce:	f104 000b 	add.w	r0, r4, #11
 80043d2:	1d23      	adds	r3, r4, #4
 80043d4:	f020 0007 	bic.w	r0, r0, #7
 80043d8:	1ac2      	subs	r2, r0, r3
 80043da:	bf1c      	itt	ne
 80043dc:	1a1b      	subne	r3, r3, r0
 80043de:	50a3      	strne	r3, [r4, r2]
 80043e0:	e7af      	b.n	8004342 <_malloc_r+0x22>
 80043e2:	6862      	ldr	r2, [r4, #4]
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	bf0c      	ite	eq
 80043e8:	f8c8 2000 	streq.w	r2, [r8]
 80043ec:	605a      	strne	r2, [r3, #4]
 80043ee:	e7eb      	b.n	80043c8 <_malloc_r+0xa8>
 80043f0:	4623      	mov	r3, r4
 80043f2:	6864      	ldr	r4, [r4, #4]
 80043f4:	e7ae      	b.n	8004354 <_malloc_r+0x34>
 80043f6:	463c      	mov	r4, r7
 80043f8:	687f      	ldr	r7, [r7, #4]
 80043fa:	e7b6      	b.n	800436a <_malloc_r+0x4a>
 80043fc:	461a      	mov	r2, r3
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	d1fb      	bne.n	80043fc <_malloc_r+0xdc>
 8004404:	2300      	movs	r3, #0
 8004406:	6053      	str	r3, [r2, #4]
 8004408:	e7de      	b.n	80043c8 <_malloc_r+0xa8>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f80c 	bl	800442c <__malloc_unlock>
 8004414:	e794      	b.n	8004340 <_malloc_r+0x20>
 8004416:	6005      	str	r5, [r0, #0]
 8004418:	e7d6      	b.n	80043c8 <_malloc_r+0xa8>
 800441a:	bf00      	nop
 800441c:	200003ac 	.word	0x200003ac

08004420 <__malloc_lock>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__malloc_lock+0x8>)
 8004422:	f7ff bf0f 	b.w	8004244 <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	200003a4 	.word	0x200003a4

0800442c <__malloc_unlock>:
 800442c:	4801      	ldr	r0, [pc, #4]	@ (8004434 <__malloc_unlock+0x8>)
 800442e:	f7ff bf0a 	b.w	8004246 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	200003a4 	.word	0x200003a4

08004438 <__ssputs_r>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	688e      	ldr	r6, [r1, #8]
 800443e:	461f      	mov	r7, r3
 8004440:	42be      	cmp	r6, r7
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	4682      	mov	sl, r0
 8004446:	460c      	mov	r4, r1
 8004448:	4690      	mov	r8, r2
 800444a:	d82d      	bhi.n	80044a8 <__ssputs_r+0x70>
 800444c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004454:	d026      	beq.n	80044a4 <__ssputs_r+0x6c>
 8004456:	6965      	ldr	r5, [r4, #20]
 8004458:	6909      	ldr	r1, [r1, #16]
 800445a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800445e:	eba3 0901 	sub.w	r9, r3, r1
 8004462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004466:	1c7b      	adds	r3, r7, #1
 8004468:	444b      	add	r3, r9
 800446a:	106d      	asrs	r5, r5, #1
 800446c:	429d      	cmp	r5, r3
 800446e:	bf38      	it	cc
 8004470:	461d      	movcc	r5, r3
 8004472:	0553      	lsls	r3, r2, #21
 8004474:	d527      	bpl.n	80044c6 <__ssputs_r+0x8e>
 8004476:	4629      	mov	r1, r5
 8004478:	f7ff ff52 	bl	8004320 <_malloc_r>
 800447c:	4606      	mov	r6, r0
 800447e:	b360      	cbz	r0, 80044da <__ssputs_r+0xa2>
 8004480:	6921      	ldr	r1, [r4, #16]
 8004482:	464a      	mov	r2, r9
 8004484:	f000 fae8 	bl	8004a58 <memcpy>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800448e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	6126      	str	r6, [r4, #16]
 8004496:	6165      	str	r5, [r4, #20]
 8004498:	444e      	add	r6, r9
 800449a:	eba5 0509 	sub.w	r5, r5, r9
 800449e:	6026      	str	r6, [r4, #0]
 80044a0:	60a5      	str	r5, [r4, #8]
 80044a2:	463e      	mov	r6, r7
 80044a4:	42be      	cmp	r6, r7
 80044a6:	d900      	bls.n	80044aa <__ssputs_r+0x72>
 80044a8:	463e      	mov	r6, r7
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	4632      	mov	r2, r6
 80044ae:	4641      	mov	r1, r8
 80044b0:	f000 faa8 	bl	8004a04 <memmove>
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	1b9b      	subs	r3, r3, r6
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	4433      	add	r3, r6
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	2000      	movs	r0, #0
 80044c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c6:	462a      	mov	r2, r5
 80044c8:	f000 fad4 	bl	8004a74 <_realloc_r>
 80044cc:	4606      	mov	r6, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d1e0      	bne.n	8004494 <__ssputs_r+0x5c>
 80044d2:	6921      	ldr	r1, [r4, #16]
 80044d4:	4650      	mov	r0, sl
 80044d6:	f7ff feb7 	bl	8004248 <_free_r>
 80044da:	230c      	movs	r3, #12
 80044dc:	f8ca 3000 	str.w	r3, [sl]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e7e9      	b.n	80044c2 <__ssputs_r+0x8a>
	...

080044f0 <_svfiprintf_r>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	4698      	mov	r8, r3
 80044f6:	898b      	ldrh	r3, [r1, #12]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	b09d      	sub	sp, #116	@ 0x74
 80044fc:	4607      	mov	r7, r0
 80044fe:	460d      	mov	r5, r1
 8004500:	4614      	mov	r4, r2
 8004502:	d510      	bpl.n	8004526 <_svfiprintf_r+0x36>
 8004504:	690b      	ldr	r3, [r1, #16]
 8004506:	b973      	cbnz	r3, 8004526 <_svfiprintf_r+0x36>
 8004508:	2140      	movs	r1, #64	@ 0x40
 800450a:	f7ff ff09 	bl	8004320 <_malloc_r>
 800450e:	6028      	str	r0, [r5, #0]
 8004510:	6128      	str	r0, [r5, #16]
 8004512:	b930      	cbnz	r0, 8004522 <_svfiprintf_r+0x32>
 8004514:	230c      	movs	r3, #12
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	b01d      	add	sp, #116	@ 0x74
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004522:	2340      	movs	r3, #64	@ 0x40
 8004524:	616b      	str	r3, [r5, #20]
 8004526:	2300      	movs	r3, #0
 8004528:	9309      	str	r3, [sp, #36]	@ 0x24
 800452a:	2320      	movs	r3, #32
 800452c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004530:	f8cd 800c 	str.w	r8, [sp, #12]
 8004534:	2330      	movs	r3, #48	@ 0x30
 8004536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046d4 <_svfiprintf_r+0x1e4>
 800453a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800453e:	f04f 0901 	mov.w	r9, #1
 8004542:	4623      	mov	r3, r4
 8004544:	469a      	mov	sl, r3
 8004546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800454a:	b10a      	cbz	r2, 8004550 <_svfiprintf_r+0x60>
 800454c:	2a25      	cmp	r2, #37	@ 0x25
 800454e:	d1f9      	bne.n	8004544 <_svfiprintf_r+0x54>
 8004550:	ebba 0b04 	subs.w	fp, sl, r4
 8004554:	d00b      	beq.n	800456e <_svfiprintf_r+0x7e>
 8004556:	465b      	mov	r3, fp
 8004558:	4622      	mov	r2, r4
 800455a:	4629      	mov	r1, r5
 800455c:	4638      	mov	r0, r7
 800455e:	f7ff ff6b 	bl	8004438 <__ssputs_r>
 8004562:	3001      	adds	r0, #1
 8004564:	f000 80a7 	beq.w	80046b6 <_svfiprintf_r+0x1c6>
 8004568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800456a:	445a      	add	r2, fp
 800456c:	9209      	str	r2, [sp, #36]	@ 0x24
 800456e:	f89a 3000 	ldrb.w	r3, [sl]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 809f 	beq.w	80046b6 <_svfiprintf_r+0x1c6>
 8004578:	2300      	movs	r3, #0
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004582:	f10a 0a01 	add.w	sl, sl, #1
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	9307      	str	r3, [sp, #28]
 800458a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800458e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004590:	4654      	mov	r4, sl
 8004592:	2205      	movs	r2, #5
 8004594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004598:	484e      	ldr	r0, [pc, #312]	@ (80046d4 <_svfiprintf_r+0x1e4>)
 800459a:	f7fb fe19 	bl	80001d0 <memchr>
 800459e:	9a04      	ldr	r2, [sp, #16]
 80045a0:	b9d8      	cbnz	r0, 80045da <_svfiprintf_r+0xea>
 80045a2:	06d0      	lsls	r0, r2, #27
 80045a4:	bf44      	itt	mi
 80045a6:	2320      	movmi	r3, #32
 80045a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ac:	0711      	lsls	r1, r2, #28
 80045ae:	bf44      	itt	mi
 80045b0:	232b      	movmi	r3, #43	@ 0x2b
 80045b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045b6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80045bc:	d015      	beq.n	80045ea <_svfiprintf_r+0xfa>
 80045be:	9a07      	ldr	r2, [sp, #28]
 80045c0:	4654      	mov	r4, sl
 80045c2:	2000      	movs	r0, #0
 80045c4:	f04f 0c0a 	mov.w	ip, #10
 80045c8:	4621      	mov	r1, r4
 80045ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ce:	3b30      	subs	r3, #48	@ 0x30
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d94b      	bls.n	800466c <_svfiprintf_r+0x17c>
 80045d4:	b1b0      	cbz	r0, 8004604 <_svfiprintf_r+0x114>
 80045d6:	9207      	str	r2, [sp, #28]
 80045d8:	e014      	b.n	8004604 <_svfiprintf_r+0x114>
 80045da:	eba0 0308 	sub.w	r3, r0, r8
 80045de:	fa09 f303 	lsl.w	r3, r9, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	46a2      	mov	sl, r4
 80045e8:	e7d2      	b.n	8004590 <_svfiprintf_r+0xa0>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	1d19      	adds	r1, r3, #4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	9103      	str	r1, [sp, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfbb      	ittet	lt
 80045f6:	425b      	neglt	r3, r3
 80045f8:	f042 0202 	orrlt.w	r2, r2, #2
 80045fc:	9307      	strge	r3, [sp, #28]
 80045fe:	9307      	strlt	r3, [sp, #28]
 8004600:	bfb8      	it	lt
 8004602:	9204      	strlt	r2, [sp, #16]
 8004604:	7823      	ldrb	r3, [r4, #0]
 8004606:	2b2e      	cmp	r3, #46	@ 0x2e
 8004608:	d10a      	bne.n	8004620 <_svfiprintf_r+0x130>
 800460a:	7863      	ldrb	r3, [r4, #1]
 800460c:	2b2a      	cmp	r3, #42	@ 0x2a
 800460e:	d132      	bne.n	8004676 <_svfiprintf_r+0x186>
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	9203      	str	r2, [sp, #12]
 8004618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800461c:	3402      	adds	r4, #2
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046e4 <_svfiprintf_r+0x1f4>
 8004624:	7821      	ldrb	r1, [r4, #0]
 8004626:	2203      	movs	r2, #3
 8004628:	4650      	mov	r0, sl
 800462a:	f7fb fdd1 	bl	80001d0 <memchr>
 800462e:	b138      	cbz	r0, 8004640 <_svfiprintf_r+0x150>
 8004630:	9b04      	ldr	r3, [sp, #16]
 8004632:	eba0 000a 	sub.w	r0, r0, sl
 8004636:	2240      	movs	r2, #64	@ 0x40
 8004638:	4082      	lsls	r2, r0
 800463a:	4313      	orrs	r3, r2
 800463c:	3401      	adds	r4, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	4824      	ldr	r0, [pc, #144]	@ (80046d8 <_svfiprintf_r+0x1e8>)
 8004646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800464a:	2206      	movs	r2, #6
 800464c:	f7fb fdc0 	bl	80001d0 <memchr>
 8004650:	2800      	cmp	r0, #0
 8004652:	d036      	beq.n	80046c2 <_svfiprintf_r+0x1d2>
 8004654:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <_svfiprintf_r+0x1ec>)
 8004656:	bb1b      	cbnz	r3, 80046a0 <_svfiprintf_r+0x1b0>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	3307      	adds	r3, #7
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004666:	4433      	add	r3, r6
 8004668:	9309      	str	r3, [sp, #36]	@ 0x24
 800466a:	e76a      	b.n	8004542 <_svfiprintf_r+0x52>
 800466c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004670:	460c      	mov	r4, r1
 8004672:	2001      	movs	r0, #1
 8004674:	e7a8      	b.n	80045c8 <_svfiprintf_r+0xd8>
 8004676:	2300      	movs	r3, #0
 8004678:	3401      	adds	r4, #1
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 0c0a 	mov.w	ip, #10
 8004682:	4620      	mov	r0, r4
 8004684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004688:	3a30      	subs	r2, #48	@ 0x30
 800468a:	2a09      	cmp	r2, #9
 800468c:	d903      	bls.n	8004696 <_svfiprintf_r+0x1a6>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0c6      	beq.n	8004620 <_svfiprintf_r+0x130>
 8004692:	9105      	str	r1, [sp, #20]
 8004694:	e7c4      	b.n	8004620 <_svfiprintf_r+0x130>
 8004696:	fb0c 2101 	mla	r1, ip, r1, r2
 800469a:	4604      	mov	r4, r0
 800469c:	2301      	movs	r3, #1
 800469e:	e7f0      	b.n	8004682 <_svfiprintf_r+0x192>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	462a      	mov	r2, r5
 80046a6:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <_svfiprintf_r+0x1f0>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	4638      	mov	r0, r7
 80046ac:	f3af 8000 	nop.w
 80046b0:	1c42      	adds	r2, r0, #1
 80046b2:	4606      	mov	r6, r0
 80046b4:	d1d6      	bne.n	8004664 <_svfiprintf_r+0x174>
 80046b6:	89ab      	ldrh	r3, [r5, #12]
 80046b8:	065b      	lsls	r3, r3, #25
 80046ba:	f53f af2d 	bmi.w	8004518 <_svfiprintf_r+0x28>
 80046be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046c0:	e72c      	b.n	800451c <_svfiprintf_r+0x2c>
 80046c2:	ab03      	add	r3, sp, #12
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	462a      	mov	r2, r5
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <_svfiprintf_r+0x1f0>)
 80046ca:	a904      	add	r1, sp, #16
 80046cc:	4638      	mov	r0, r7
 80046ce:	f000 f879 	bl	80047c4 <_printf_i>
 80046d2:	e7ed      	b.n	80046b0 <_svfiprintf_r+0x1c0>
 80046d4:	08004c2c 	.word	0x08004c2c
 80046d8:	08004c36 	.word	0x08004c36
 80046dc:	00000000 	.word	0x00000000
 80046e0:	08004439 	.word	0x08004439
 80046e4:	08004c32 	.word	0x08004c32

080046e8 <_printf_common>:
 80046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	4616      	mov	r6, r2
 80046ee:	4698      	mov	r8, r3
 80046f0:	688a      	ldr	r2, [r1, #8]
 80046f2:	690b      	ldr	r3, [r1, #16]
 80046f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	bfb8      	it	lt
 80046fc:	4613      	movlt	r3, r2
 80046fe:	6033      	str	r3, [r6, #0]
 8004700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004704:	4607      	mov	r7, r0
 8004706:	460c      	mov	r4, r1
 8004708:	b10a      	cbz	r2, 800470e <_printf_common+0x26>
 800470a:	3301      	adds	r3, #1
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	0699      	lsls	r1, r3, #26
 8004712:	bf42      	ittt	mi
 8004714:	6833      	ldrmi	r3, [r6, #0]
 8004716:	3302      	addmi	r3, #2
 8004718:	6033      	strmi	r3, [r6, #0]
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	f015 0506 	ands.w	r5, r5, #6
 8004720:	d106      	bne.n	8004730 <_printf_common+0x48>
 8004722:	f104 0a19 	add.w	sl, r4, #25
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	6832      	ldr	r2, [r6, #0]
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	42ab      	cmp	r3, r5
 800472e:	dc26      	bgt.n	800477e <_printf_common+0x96>
 8004730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	3b00      	subs	r3, #0
 8004738:	bf18      	it	ne
 800473a:	2301      	movne	r3, #1
 800473c:	0692      	lsls	r2, r2, #26
 800473e:	d42b      	bmi.n	8004798 <_printf_common+0xb0>
 8004740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004744:	4641      	mov	r1, r8
 8004746:	4638      	mov	r0, r7
 8004748:	47c8      	blx	r9
 800474a:	3001      	adds	r0, #1
 800474c:	d01e      	beq.n	800478c <_printf_common+0xa4>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	6922      	ldr	r2, [r4, #16]
 8004752:	f003 0306 	and.w	r3, r3, #6
 8004756:	2b04      	cmp	r3, #4
 8004758:	bf02      	ittt	eq
 800475a:	68e5      	ldreq	r5, [r4, #12]
 800475c:	6833      	ldreq	r3, [r6, #0]
 800475e:	1aed      	subeq	r5, r5, r3
 8004760:	68a3      	ldr	r3, [r4, #8]
 8004762:	bf0c      	ite	eq
 8004764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004768:	2500      	movne	r5, #0
 800476a:	4293      	cmp	r3, r2
 800476c:	bfc4      	itt	gt
 800476e:	1a9b      	subgt	r3, r3, r2
 8004770:	18ed      	addgt	r5, r5, r3
 8004772:	2600      	movs	r6, #0
 8004774:	341a      	adds	r4, #26
 8004776:	42b5      	cmp	r5, r6
 8004778:	d11a      	bne.n	80047b0 <_printf_common+0xc8>
 800477a:	2000      	movs	r0, #0
 800477c:	e008      	b.n	8004790 <_printf_common+0xa8>
 800477e:	2301      	movs	r3, #1
 8004780:	4652      	mov	r2, sl
 8004782:	4641      	mov	r1, r8
 8004784:	4638      	mov	r0, r7
 8004786:	47c8      	blx	r9
 8004788:	3001      	adds	r0, #1
 800478a:	d103      	bne.n	8004794 <_printf_common+0xac>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004794:	3501      	adds	r5, #1
 8004796:	e7c6      	b.n	8004726 <_printf_common+0x3e>
 8004798:	18e1      	adds	r1, r4, r3
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	2030      	movs	r0, #48	@ 0x30
 800479e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047a2:	4422      	add	r2, r4
 80047a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047ac:	3302      	adds	r3, #2
 80047ae:	e7c7      	b.n	8004740 <_printf_common+0x58>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4622      	mov	r2, r4
 80047b4:	4641      	mov	r1, r8
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c8      	blx	r9
 80047ba:	3001      	adds	r0, #1
 80047bc:	d0e6      	beq.n	800478c <_printf_common+0xa4>
 80047be:	3601      	adds	r6, #1
 80047c0:	e7d9      	b.n	8004776 <_printf_common+0x8e>
	...

080047c4 <_printf_i>:
 80047c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	7e0f      	ldrb	r7, [r1, #24]
 80047ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047cc:	2f78      	cmp	r7, #120	@ 0x78
 80047ce:	4691      	mov	r9, r2
 80047d0:	4680      	mov	r8, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	469a      	mov	sl, r3
 80047d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047da:	d807      	bhi.n	80047ec <_printf_i+0x28>
 80047dc:	2f62      	cmp	r7, #98	@ 0x62
 80047de:	d80a      	bhi.n	80047f6 <_printf_i+0x32>
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	f000 80d2 	beq.w	800498a <_printf_i+0x1c6>
 80047e6:	2f58      	cmp	r7, #88	@ 0x58
 80047e8:	f000 80b9 	beq.w	800495e <_printf_i+0x19a>
 80047ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047f4:	e03a      	b.n	800486c <_printf_i+0xa8>
 80047f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047fa:	2b15      	cmp	r3, #21
 80047fc:	d8f6      	bhi.n	80047ec <_printf_i+0x28>
 80047fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004804 <_printf_i+0x40>)
 8004800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004804:	0800485d 	.word	0x0800485d
 8004808:	08004871 	.word	0x08004871
 800480c:	080047ed 	.word	0x080047ed
 8004810:	080047ed 	.word	0x080047ed
 8004814:	080047ed 	.word	0x080047ed
 8004818:	080047ed 	.word	0x080047ed
 800481c:	08004871 	.word	0x08004871
 8004820:	080047ed 	.word	0x080047ed
 8004824:	080047ed 	.word	0x080047ed
 8004828:	080047ed 	.word	0x080047ed
 800482c:	080047ed 	.word	0x080047ed
 8004830:	08004971 	.word	0x08004971
 8004834:	0800489b 	.word	0x0800489b
 8004838:	0800492b 	.word	0x0800492b
 800483c:	080047ed 	.word	0x080047ed
 8004840:	080047ed 	.word	0x080047ed
 8004844:	08004993 	.word	0x08004993
 8004848:	080047ed 	.word	0x080047ed
 800484c:	0800489b 	.word	0x0800489b
 8004850:	080047ed 	.word	0x080047ed
 8004854:	080047ed 	.word	0x080047ed
 8004858:	08004933 	.word	0x08004933
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6032      	str	r2, [r6, #0]
 8004864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800486c:	2301      	movs	r3, #1
 800486e:	e09d      	b.n	80049ac <_printf_i+0x1e8>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	1d19      	adds	r1, r3, #4
 8004876:	6031      	str	r1, [r6, #0]
 8004878:	0606      	lsls	r6, r0, #24
 800487a:	d501      	bpl.n	8004880 <_printf_i+0xbc>
 800487c:	681d      	ldr	r5, [r3, #0]
 800487e:	e003      	b.n	8004888 <_printf_i+0xc4>
 8004880:	0645      	lsls	r5, r0, #25
 8004882:	d5fb      	bpl.n	800487c <_printf_i+0xb8>
 8004884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004888:	2d00      	cmp	r5, #0
 800488a:	da03      	bge.n	8004894 <_printf_i+0xd0>
 800488c:	232d      	movs	r3, #45	@ 0x2d
 800488e:	426d      	negs	r5, r5
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004894:	4859      	ldr	r0, [pc, #356]	@ (80049fc <_printf_i+0x238>)
 8004896:	230a      	movs	r3, #10
 8004898:	e011      	b.n	80048be <_printf_i+0xfa>
 800489a:	6821      	ldr	r1, [r4, #0]
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	0608      	lsls	r0, r1, #24
 80048a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048a4:	d402      	bmi.n	80048ac <_printf_i+0xe8>
 80048a6:	0649      	lsls	r1, r1, #25
 80048a8:	bf48      	it	mi
 80048aa:	b2ad      	uxthmi	r5, r5
 80048ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ae:	4853      	ldr	r0, [pc, #332]	@ (80049fc <_printf_i+0x238>)
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	bf14      	ite	ne
 80048b4:	230a      	movne	r3, #10
 80048b6:	2308      	moveq	r3, #8
 80048b8:	2100      	movs	r1, #0
 80048ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048be:	6866      	ldr	r6, [r4, #4]
 80048c0:	60a6      	str	r6, [r4, #8]
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	bfa2      	ittt	ge
 80048c6:	6821      	ldrge	r1, [r4, #0]
 80048c8:	f021 0104 	bicge.w	r1, r1, #4
 80048cc:	6021      	strge	r1, [r4, #0]
 80048ce:	b90d      	cbnz	r5, 80048d4 <_printf_i+0x110>
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	d04b      	beq.n	800496c <_printf_i+0x1a8>
 80048d4:	4616      	mov	r6, r2
 80048d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80048da:	fb03 5711 	mls	r7, r3, r1, r5
 80048de:	5dc7      	ldrb	r7, [r0, r7]
 80048e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048e4:	462f      	mov	r7, r5
 80048e6:	42bb      	cmp	r3, r7
 80048e8:	460d      	mov	r5, r1
 80048ea:	d9f4      	bls.n	80048d6 <_printf_i+0x112>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d10b      	bne.n	8004908 <_printf_i+0x144>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07df      	lsls	r7, r3, #31
 80048f4:	d508      	bpl.n	8004908 <_printf_i+0x144>
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	6861      	ldr	r1, [r4, #4]
 80048fa:	4299      	cmp	r1, r3
 80048fc:	bfde      	ittt	le
 80048fe:	2330      	movle	r3, #48	@ 0x30
 8004900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004908:	1b92      	subs	r2, r2, r6
 800490a:	6122      	str	r2, [r4, #16]
 800490c:	f8cd a000 	str.w	sl, [sp]
 8004910:	464b      	mov	r3, r9
 8004912:	aa03      	add	r2, sp, #12
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fee6 	bl	80046e8 <_printf_common>
 800491c:	3001      	adds	r0, #1
 800491e:	d14a      	bne.n	80049b6 <_printf_i+0x1f2>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b004      	add	sp, #16
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	f043 0320 	orr.w	r3, r3, #32
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	4833      	ldr	r0, [pc, #204]	@ (8004a00 <_printf_i+0x23c>)
 8004934:	2778      	movs	r7, #120	@ 0x78
 8004936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	6831      	ldr	r1, [r6, #0]
 800493e:	061f      	lsls	r7, r3, #24
 8004940:	f851 5b04 	ldr.w	r5, [r1], #4
 8004944:	d402      	bmi.n	800494c <_printf_i+0x188>
 8004946:	065f      	lsls	r7, r3, #25
 8004948:	bf48      	it	mi
 800494a:	b2ad      	uxthmi	r5, r5
 800494c:	6031      	str	r1, [r6, #0]
 800494e:	07d9      	lsls	r1, r3, #31
 8004950:	bf44      	itt	mi
 8004952:	f043 0320 	orrmi.w	r3, r3, #32
 8004956:	6023      	strmi	r3, [r4, #0]
 8004958:	b11d      	cbz	r5, 8004962 <_printf_i+0x19e>
 800495a:	2310      	movs	r3, #16
 800495c:	e7ac      	b.n	80048b8 <_printf_i+0xf4>
 800495e:	4827      	ldr	r0, [pc, #156]	@ (80049fc <_printf_i+0x238>)
 8004960:	e7e9      	b.n	8004936 <_printf_i+0x172>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f023 0320 	bic.w	r3, r3, #32
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	e7f6      	b.n	800495a <_printf_i+0x196>
 800496c:	4616      	mov	r6, r2
 800496e:	e7bd      	b.n	80048ec <_printf_i+0x128>
 8004970:	6833      	ldr	r3, [r6, #0]
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	6961      	ldr	r1, [r4, #20]
 8004976:	1d18      	adds	r0, r3, #4
 8004978:	6030      	str	r0, [r6, #0]
 800497a:	062e      	lsls	r6, r5, #24
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	d501      	bpl.n	8004984 <_printf_i+0x1c0>
 8004980:	6019      	str	r1, [r3, #0]
 8004982:	e002      	b.n	800498a <_printf_i+0x1c6>
 8004984:	0668      	lsls	r0, r5, #25
 8004986:	d5fb      	bpl.n	8004980 <_printf_i+0x1bc>
 8004988:	8019      	strh	r1, [r3, #0]
 800498a:	2300      	movs	r3, #0
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	4616      	mov	r6, r2
 8004990:	e7bc      	b.n	800490c <_printf_i+0x148>
 8004992:	6833      	ldr	r3, [r6, #0]
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	6032      	str	r2, [r6, #0]
 8004998:	681e      	ldr	r6, [r3, #0]
 800499a:	6862      	ldr	r2, [r4, #4]
 800499c:	2100      	movs	r1, #0
 800499e:	4630      	mov	r0, r6
 80049a0:	f7fb fc16 	bl	80001d0 <memchr>
 80049a4:	b108      	cbz	r0, 80049aa <_printf_i+0x1e6>
 80049a6:	1b80      	subs	r0, r0, r6
 80049a8:	6060      	str	r0, [r4, #4]
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	2300      	movs	r3, #0
 80049b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049b4:	e7aa      	b.n	800490c <_printf_i+0x148>
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	4632      	mov	r2, r6
 80049ba:	4649      	mov	r1, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	47d0      	blx	sl
 80049c0:	3001      	adds	r0, #1
 80049c2:	d0ad      	beq.n	8004920 <_printf_i+0x15c>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	079b      	lsls	r3, r3, #30
 80049c8:	d413      	bmi.n	80049f2 <_printf_i+0x22e>
 80049ca:	68e0      	ldr	r0, [r4, #12]
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	4298      	cmp	r0, r3
 80049d0:	bfb8      	it	lt
 80049d2:	4618      	movlt	r0, r3
 80049d4:	e7a6      	b.n	8004924 <_printf_i+0x160>
 80049d6:	2301      	movs	r3, #1
 80049d8:	4632      	mov	r2, r6
 80049da:	4649      	mov	r1, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	47d0      	blx	sl
 80049e0:	3001      	adds	r0, #1
 80049e2:	d09d      	beq.n	8004920 <_printf_i+0x15c>
 80049e4:	3501      	adds	r5, #1
 80049e6:	68e3      	ldr	r3, [r4, #12]
 80049e8:	9903      	ldr	r1, [sp, #12]
 80049ea:	1a5b      	subs	r3, r3, r1
 80049ec:	42ab      	cmp	r3, r5
 80049ee:	dcf2      	bgt.n	80049d6 <_printf_i+0x212>
 80049f0:	e7eb      	b.n	80049ca <_printf_i+0x206>
 80049f2:	2500      	movs	r5, #0
 80049f4:	f104 0619 	add.w	r6, r4, #25
 80049f8:	e7f5      	b.n	80049e6 <_printf_i+0x222>
 80049fa:	bf00      	nop
 80049fc:	08004c3d 	.word	0x08004c3d
 8004a00:	08004c4e 	.word	0x08004c4e

08004a04 <memmove>:
 8004a04:	4288      	cmp	r0, r1
 8004a06:	b510      	push	{r4, lr}
 8004a08:	eb01 0402 	add.w	r4, r1, r2
 8004a0c:	d902      	bls.n	8004a14 <memmove+0x10>
 8004a0e:	4284      	cmp	r4, r0
 8004a10:	4623      	mov	r3, r4
 8004a12:	d807      	bhi.n	8004a24 <memmove+0x20>
 8004a14:	1e43      	subs	r3, r0, #1
 8004a16:	42a1      	cmp	r1, r4
 8004a18:	d008      	beq.n	8004a2c <memmove+0x28>
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a22:	e7f8      	b.n	8004a16 <memmove+0x12>
 8004a24:	4402      	add	r2, r0
 8004a26:	4601      	mov	r1, r0
 8004a28:	428a      	cmp	r2, r1
 8004a2a:	d100      	bne.n	8004a2e <memmove+0x2a>
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a36:	e7f7      	b.n	8004a28 <memmove+0x24>

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d06      	ldr	r5, [pc, #24]	@ (8004a54 <_sbrk_r+0x1c>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fc fc24 	bl	8001290 <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	200003a0 	.word	0x200003a0

08004a58 <memcpy>:
 8004a58:	440a      	add	r2, r1
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a60:	d100      	bne.n	8004a64 <memcpy+0xc>
 8004a62:	4770      	bx	lr
 8004a64:	b510      	push	{r4, lr}
 8004a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	d1f9      	bne.n	8004a66 <memcpy+0xe>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <_realloc_r>:
 8004a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	b921      	cbnz	r1, 8004a8a <_realloc_r+0x16>
 8004a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a84:	4611      	mov	r1, r2
 8004a86:	f7ff bc4b 	b.w	8004320 <_malloc_r>
 8004a8a:	b92a      	cbnz	r2, 8004a98 <_realloc_r+0x24>
 8004a8c:	f7ff fbdc 	bl	8004248 <_free_r>
 8004a90:	2400      	movs	r4, #0
 8004a92:	4620      	mov	r0, r4
 8004a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a98:	f000 f81a 	bl	8004ad0 <_malloc_usable_size_r>
 8004a9c:	4285      	cmp	r5, r0
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	d802      	bhi.n	8004aa8 <_realloc_r+0x34>
 8004aa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004aa6:	d8f4      	bhi.n	8004a92 <_realloc_r+0x1e>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff fc38 	bl	8004320 <_malloc_r>
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0ec      	beq.n	8004a90 <_realloc_r+0x1c>
 8004ab6:	42b5      	cmp	r5, r6
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4621      	mov	r1, r4
 8004abc:	bf28      	it	cs
 8004abe:	4632      	movcs	r2, r6
 8004ac0:	f7ff ffca 	bl	8004a58 <memcpy>
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f7ff fbbe 	bl	8004248 <_free_r>
 8004acc:	463c      	mov	r4, r7
 8004ace:	e7e0      	b.n	8004a92 <_realloc_r+0x1e>

08004ad0 <_malloc_usable_size_r>:
 8004ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad4:	1f18      	subs	r0, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfbc      	itt	lt
 8004ada:	580b      	ldrlt	r3, [r1, r0]
 8004adc:	18c0      	addlt	r0, r0, r3
 8004ade:	4770      	bx	lr

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
